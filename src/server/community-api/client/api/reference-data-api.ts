/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { PageOfKeyValue } from '../model';
// @ts-ignore
import { ProbationAreaWithLocalDeliveryUnits } from '../model';
// @ts-ignore
import { ReferenceDataList } from '../model';
// @ts-ignore
import { ReferenceDataSets } from '../model';
/**
 * ReferenceDataApi - axios parameter creator
 * @export
 */
export const ReferenceDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accepts a probation area code
         * @summary Return Local delivery units for a probation area
         * @param {string} code Probation area code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLdusForProbationCodeUsingGET: async (code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getLdusForProbationCodeUsingGET', 'code', code)
            const localVarPath = `/secure/probationAreas/code/{code}/localDeliveryUnits`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts filtering to only return active areas
         * @summary Return probation areas
         * @param {boolean} [active] Restricts to active areas only
         * @param {boolean} [excludeEstablishments] Restricts to areas that are providers, no prisons will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProbationAreaCodesUsingGET: async (active?: boolean, excludeEstablishments?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/secure/probationAreas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (excludeEstablishments !== undefined) {
                localVarQueryParameter['excludeEstablishments'] = excludeEstablishments;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts filtering to only return active areas
         * @summary Return Probation Areas and associated Local Delivery Units. Establishments are excluded.
         * @param {boolean} [active] Restricts to active areas only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProbationAreasAndLocalDeliveryUnitsUsingGET: async (active?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/secure/probationAreas/localDeliveryUnits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * It is expected that this API will be used to assist developers in understanding the available set codes available for /secure/referenceData/set/{set} endpoint
         * @summary Returns all available reference data sets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceDataSetsUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/secure/referenceData/sets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the reference data items for the given set
         * @param {string} set The set of reference data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceDataUsingGET: async (set: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('getReferenceDataUsingGET', 'set', set)
            const localVarPath = `/secure/referenceData/set/{set}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts a probation area code and local delivery unit code
         * @summary Return teams for a local delivery unit within a probation area
         * @param {string} code Probation area code
         * @param {string} lduCode Local delivery unit code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsForLduUsingGET: async (code: string, lduCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getTeamsForLduUsingGET', 'code', code)
            // verify required parameter 'lduCode' is not null or undefined
            assertParamExists('getTeamsForLduUsingGET', 'lduCode', lduCode)
            const localVarPath = `/secure/probationAreas/code/{code}/localDeliveryUnits/code/{lduCode}/teams`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"lduCode"}}`, encodeURIComponent(String(lduCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferenceDataApi - functional programming interface
 * @export
 */
export const ReferenceDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferenceDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Accepts a probation area code
         * @summary Return Local delivery units for a probation area
         * @param {string} code Probation area code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLdusForProbationCodeUsingGET(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageOfKeyValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLdusForProbationCodeUsingGET(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts filtering to only return active areas
         * @summary Return probation areas
         * @param {boolean} [active] Restricts to active areas only
         * @param {boolean} [excludeEstablishments] Restricts to areas that are providers, no prisons will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProbationAreaCodesUsingGET(active?: boolean, excludeEstablishments?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageOfKeyValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProbationAreaCodesUsingGET(active, excludeEstablishments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts filtering to only return active areas
         * @summary Return Probation Areas and associated Local Delivery Units. Establishments are excluded.
         * @param {boolean} [active] Restricts to active areas only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProbationAreasAndLocalDeliveryUnitsUsingGET(active?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProbationAreaWithLocalDeliveryUnits>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProbationAreasAndLocalDeliveryUnitsUsingGET(active, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * It is expected that this API will be used to assist developers in understanding the available set codes available for /secure/referenceData/set/{set} endpoint
         * @summary Returns all available reference data sets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferenceDataSetsUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferenceDataSets>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferenceDataSetsUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return the reference data items for the given set
         * @param {string} set The set of reference data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferenceDataUsingGET(set: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferenceDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferenceDataUsingGET(set, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts a probation area code and local delivery unit code
         * @summary Return teams for a local delivery unit within a probation area
         * @param {string} code Probation area code
         * @param {string} lduCode Local delivery unit code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsForLduUsingGET(code: string, lduCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageOfKeyValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamsForLduUsingGET(code, lduCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReferenceDataApi - factory interface
 * @export
 */
export const ReferenceDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferenceDataApiFp(configuration)
    return {
        /**
         * Accepts a probation area code
         * @summary Return Local delivery units for a probation area
         * @param {string} code Probation area code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLdusForProbationCodeUsingGET(code: string, options?: any): AxiosPromise<PageOfKeyValue> {
            return localVarFp.getLdusForProbationCodeUsingGET(code, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts filtering to only return active areas
         * @summary Return probation areas
         * @param {boolean} [active] Restricts to active areas only
         * @param {boolean} [excludeEstablishments] Restricts to areas that are providers, no prisons will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProbationAreaCodesUsingGET(active?: boolean, excludeEstablishments?: boolean, options?: any): AxiosPromise<PageOfKeyValue> {
            return localVarFp.getProbationAreaCodesUsingGET(active, excludeEstablishments, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts filtering to only return active areas
         * @summary Return Probation Areas and associated Local Delivery Units. Establishments are excluded.
         * @param {boolean} [active] Restricts to active areas only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProbationAreasAndLocalDeliveryUnitsUsingGET(active?: boolean, options?: any): AxiosPromise<Array<ProbationAreaWithLocalDeliveryUnits>> {
            return localVarFp.getProbationAreasAndLocalDeliveryUnitsUsingGET(active, options).then((request) => request(axios, basePath));
        },
        /**
         * It is expected that this API will be used to assist developers in understanding the available set codes available for /secure/referenceData/set/{set} endpoint
         * @summary Returns all available reference data sets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceDataSetsUsingGET(options?: any): AxiosPromise<ReferenceDataSets> {
            return localVarFp.getReferenceDataSetsUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return the reference data items for the given set
         * @param {string} set The set of reference data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceDataUsingGET(set: string, options?: any): AxiosPromise<ReferenceDataList> {
            return localVarFp.getReferenceDataUsingGET(set, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts a probation area code and local delivery unit code
         * @summary Return teams for a local delivery unit within a probation area
         * @param {string} code Probation area code
         * @param {string} lduCode Local delivery unit code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsForLduUsingGET(code: string, lduCode: string, options?: any): AxiosPromise<PageOfKeyValue> {
            return localVarFp.getTeamsForLduUsingGET(code, lduCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getLdusForProbationCodeUsingGET operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiGetLdusForProbationCodeUsingGETRequest
 */
export interface ReferenceDataApiGetLdusForProbationCodeUsingGETRequest {
    /**
     * Probation area code
     * @type {string}
     * @memberof ReferenceDataApiGetLdusForProbationCodeUsingGET
     */
    readonly code: string
}

/**
 * Request parameters for getProbationAreaCodesUsingGET operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiGetProbationAreaCodesUsingGETRequest
 */
export interface ReferenceDataApiGetProbationAreaCodesUsingGETRequest {
    /**
     * Restricts to active areas only
     * @type {boolean}
     * @memberof ReferenceDataApiGetProbationAreaCodesUsingGET
     */
    readonly active?: boolean

    /**
     * Restricts to areas that are providers, no prisons will be returned
     * @type {boolean}
     * @memberof ReferenceDataApiGetProbationAreaCodesUsingGET
     */
    readonly excludeEstablishments?: boolean
}

/**
 * Request parameters for getProbationAreasAndLocalDeliveryUnitsUsingGET operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiGetProbationAreasAndLocalDeliveryUnitsUsingGETRequest
 */
export interface ReferenceDataApiGetProbationAreasAndLocalDeliveryUnitsUsingGETRequest {
    /**
     * Restricts to active areas only
     * @type {boolean}
     * @memberof ReferenceDataApiGetProbationAreasAndLocalDeliveryUnitsUsingGET
     */
    readonly active?: boolean
}

/**
 * Request parameters for getReferenceDataUsingGET operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiGetReferenceDataUsingGETRequest
 */
export interface ReferenceDataApiGetReferenceDataUsingGETRequest {
    /**
     * The set of reference data
     * @type {string}
     * @memberof ReferenceDataApiGetReferenceDataUsingGET
     */
    readonly set: string
}

/**
 * Request parameters for getTeamsForLduUsingGET operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiGetTeamsForLduUsingGETRequest
 */
export interface ReferenceDataApiGetTeamsForLduUsingGETRequest {
    /**
     * Probation area code
     * @type {string}
     * @memberof ReferenceDataApiGetTeamsForLduUsingGET
     */
    readonly code: string

    /**
     * Local delivery unit code
     * @type {string}
     * @memberof ReferenceDataApiGetTeamsForLduUsingGET
     */
    readonly lduCode: string
}

/**
 * ReferenceDataApi - object-oriented interface
 * @export
 * @class ReferenceDataApi
 * @extends {BaseAPI}
 */
export class ReferenceDataApi extends BaseAPI {
    /**
     * Accepts a probation area code
     * @summary Return Local delivery units for a probation area
     * @param {ReferenceDataApiGetLdusForProbationCodeUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApi
     */
    public getLdusForProbationCodeUsingGET(requestParameters: ReferenceDataApiGetLdusForProbationCodeUsingGETRequest, options?: any) {
        return ReferenceDataApiFp(this.configuration).getLdusForProbationCodeUsingGET(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts filtering to only return active areas
     * @summary Return probation areas
     * @param {ReferenceDataApiGetProbationAreaCodesUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApi
     */
    public getProbationAreaCodesUsingGET(requestParameters: ReferenceDataApiGetProbationAreaCodesUsingGETRequest = {}, options?: any) {
        return ReferenceDataApiFp(this.configuration).getProbationAreaCodesUsingGET(requestParameters.active, requestParameters.excludeEstablishments, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts filtering to only return active areas
     * @summary Return Probation Areas and associated Local Delivery Units. Establishments are excluded.
     * @param {ReferenceDataApiGetProbationAreasAndLocalDeliveryUnitsUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApi
     */
    public getProbationAreasAndLocalDeliveryUnitsUsingGET(requestParameters: ReferenceDataApiGetProbationAreasAndLocalDeliveryUnitsUsingGETRequest = {}, options?: any) {
        return ReferenceDataApiFp(this.configuration).getProbationAreasAndLocalDeliveryUnitsUsingGET(requestParameters.active, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * It is expected that this API will be used to assist developers in understanding the available set codes available for /secure/referenceData/set/{set} endpoint
     * @summary Returns all available reference data sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApi
     */
    public getReferenceDataSetsUsingGET(options?: any) {
        return ReferenceDataApiFp(this.configuration).getReferenceDataSetsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return the reference data items for the given set
     * @param {ReferenceDataApiGetReferenceDataUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApi
     */
    public getReferenceDataUsingGET(requestParameters: ReferenceDataApiGetReferenceDataUsingGETRequest, options?: any) {
        return ReferenceDataApiFp(this.configuration).getReferenceDataUsingGET(requestParameters.set, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts a probation area code and local delivery unit code
     * @summary Return teams for a local delivery unit within a probation area
     * @param {ReferenceDataApiGetTeamsForLduUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApi
     */
    public getTeamsForLduUsingGET(requestParameters: ReferenceDataApiGetTeamsForLduUsingGETRequest, options?: any) {
        return ReferenceDataApiFp(this.configuration).getTeamsForLduUsingGET(requestParameters.code, requestParameters.lduCode, options).then((request) => request(this.axios, this.basePath));
    }
}
