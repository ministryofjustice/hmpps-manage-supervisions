/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { ManagedOffender } from '../model';
// @ts-ignore
import { StaffDetails } from '../model';
/**
 * StaffApi - axios parameter creator
 * @export
 */
export const StaffApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accepts a Delius staff officer identifier
         * @summary Return list of of currently managed offenders for one responsible officer (RO)
         * @param {number} staffIdentifier Delius officer identifier of the responsible officer
         * @param {boolean} [current] Current only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffendersForResponsibleOfficerIdentifierUsingGET: async (staffIdentifier: number, current?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffIdentifier' is not null or undefined
            assertParamExists('getOffendersForResponsibleOfficerIdentifierUsingGET', 'staffIdentifier', staffIdentifier)
            const localVarPath = `/secure/staff/staffIdentifier/{staffIdentifier}/managedOffenders`
                .replace(`{${"staffIdentifier"}}`, encodeURIComponent(String(staffIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts a Delius staff officer identifier
         * @summary Return details of a staff member including option user details
         * @param {number} staffIdentifier Delius officer identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffDetailsForStaffIdentifierUsingGET: async (staffIdentifier: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffIdentifier' is not null or undefined
            assertParamExists('getStaffDetailsForStaffIdentifierUsingGET', 'staffIdentifier', staffIdentifier)
            const localVarPath = `/secure/staff/staffIdentifier/{staffIdentifier}`
                .replace(`{${"staffIdentifier"}}`, encodeURIComponent(String(staffIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts a Delius staff username
         * @summary Return details of a staff member including user details
         * @param {string} username Delius username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffDetailsForUsernameUsingGET: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getStaffDetailsForUsernameUsingGET', 'username', username)
            const localVarPath = `/secure/staff/username/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * staff details for supplied usernames
         * @summary Returns a list of staff details for supplied usernames - POST version to allow large user lists.
         * @param {Array<string>} usernames usernames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffDetailsList: async (usernames: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'usernames' is not null or undefined
            assertParamExists('getStaffDetailsList', 'usernames', usernames)
            const localVarPath = `/secure/staff/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usernames, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaffApi - functional programming interface
 * @export
 */
export const StaffApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StaffApiAxiosParamCreator(configuration)
    return {
        /**
         * Accepts a Delius staff officer identifier
         * @summary Return list of of currently managed offenders for one responsible officer (RO)
         * @param {number} staffIdentifier Delius officer identifier of the responsible officer
         * @param {boolean} [current] Current only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffendersForResponsibleOfficerIdentifierUsingGET(staffIdentifier: number, current?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ManagedOffender>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffendersForResponsibleOfficerIdentifierUsingGET(staffIdentifier, current, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts a Delius staff officer identifier
         * @summary Return details of a staff member including option user details
         * @param {number} staffIdentifier Delius officer identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStaffDetailsForStaffIdentifierUsingGET(staffIdentifier: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaffDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStaffDetailsForStaffIdentifierUsingGET(staffIdentifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts a Delius staff username
         * @summary Return details of a staff member including user details
         * @param {string} username Delius username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStaffDetailsForUsernameUsingGET(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaffDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStaffDetailsForUsernameUsingGET(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * staff details for supplied usernames
         * @summary Returns a list of staff details for supplied usernames - POST version to allow large user lists.
         * @param {Array<string>} usernames usernames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStaffDetailsList(usernames: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StaffDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStaffDetailsList(usernames, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StaffApi - factory interface
 * @export
 */
export const StaffApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StaffApiFp(configuration)
    return {
        /**
         * Accepts a Delius staff officer identifier
         * @summary Return list of of currently managed offenders for one responsible officer (RO)
         * @param {number} staffIdentifier Delius officer identifier of the responsible officer
         * @param {boolean} [current] Current only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffendersForResponsibleOfficerIdentifierUsingGET(staffIdentifier: number, current?: boolean, options?: any): AxiosPromise<Array<ManagedOffender>> {
            return localVarFp.getOffendersForResponsibleOfficerIdentifierUsingGET(staffIdentifier, current, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts a Delius staff officer identifier
         * @summary Return details of a staff member including option user details
         * @param {number} staffIdentifier Delius officer identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffDetailsForStaffIdentifierUsingGET(staffIdentifier: number, options?: any): AxiosPromise<StaffDetails> {
            return localVarFp.getStaffDetailsForStaffIdentifierUsingGET(staffIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts a Delius staff username
         * @summary Return details of a staff member including user details
         * @param {string} username Delius username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffDetailsForUsernameUsingGET(username: string, options?: any): AxiosPromise<StaffDetails> {
            return localVarFp.getStaffDetailsForUsernameUsingGET(username, options).then((request) => request(axios, basePath));
        },
        /**
         * staff details for supplied usernames
         * @summary Returns a list of staff details for supplied usernames - POST version to allow large user lists.
         * @param {Array<string>} usernames usernames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffDetailsList(usernames: Array<string>, options?: any): AxiosPromise<Array<StaffDetails>> {
            return localVarFp.getStaffDetailsList(usernames, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getOffendersForResponsibleOfficerIdentifierUsingGET operation in StaffApi.
 * @export
 * @interface StaffApiGetOffendersForResponsibleOfficerIdentifierUsingGETRequest
 */
export interface StaffApiGetOffendersForResponsibleOfficerIdentifierUsingGETRequest {
    /**
     * Delius officer identifier of the responsible officer
     * @type {number}
     * @memberof StaffApiGetOffendersForResponsibleOfficerIdentifierUsingGET
     */
    readonly staffIdentifier: number

    /**
     * Current only
     * @type {boolean}
     * @memberof StaffApiGetOffendersForResponsibleOfficerIdentifierUsingGET
     */
    readonly current?: boolean
}

/**
 * Request parameters for getStaffDetailsForStaffIdentifierUsingGET operation in StaffApi.
 * @export
 * @interface StaffApiGetStaffDetailsForStaffIdentifierUsingGETRequest
 */
export interface StaffApiGetStaffDetailsForStaffIdentifierUsingGETRequest {
    /**
     * Delius officer identifier
     * @type {number}
     * @memberof StaffApiGetStaffDetailsForStaffIdentifierUsingGET
     */
    readonly staffIdentifier: number
}

/**
 * Request parameters for getStaffDetailsForUsernameUsingGET operation in StaffApi.
 * @export
 * @interface StaffApiGetStaffDetailsForUsernameUsingGETRequest
 */
export interface StaffApiGetStaffDetailsForUsernameUsingGETRequest {
    /**
     * Delius username
     * @type {string}
     * @memberof StaffApiGetStaffDetailsForUsernameUsingGET
     */
    readonly username: string
}

/**
 * Request parameters for getStaffDetailsList operation in StaffApi.
 * @export
 * @interface StaffApiGetStaffDetailsListRequest
 */
export interface StaffApiGetStaffDetailsListRequest {
    /**
     * usernames
     * @type {Array<string>}
     * @memberof StaffApiGetStaffDetailsList
     */
    readonly usernames: Array<string>
}

/**
 * StaffApi - object-oriented interface
 * @export
 * @class StaffApi
 * @extends {BaseAPI}
 */
export class StaffApi extends BaseAPI {
    /**
     * Accepts a Delius staff officer identifier
     * @summary Return list of of currently managed offenders for one responsible officer (RO)
     * @param {StaffApiGetOffendersForResponsibleOfficerIdentifierUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffApi
     */
    public getOffendersForResponsibleOfficerIdentifierUsingGET(requestParameters: StaffApiGetOffendersForResponsibleOfficerIdentifierUsingGETRequest, options?: any) {
        return StaffApiFp(this.configuration).getOffendersForResponsibleOfficerIdentifierUsingGET(requestParameters.staffIdentifier, requestParameters.current, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts a Delius staff officer identifier
     * @summary Return details of a staff member including option user details
     * @param {StaffApiGetStaffDetailsForStaffIdentifierUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffApi
     */
    public getStaffDetailsForStaffIdentifierUsingGET(requestParameters: StaffApiGetStaffDetailsForStaffIdentifierUsingGETRequest, options?: any) {
        return StaffApiFp(this.configuration).getStaffDetailsForStaffIdentifierUsingGET(requestParameters.staffIdentifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts a Delius staff username
     * @summary Return details of a staff member including user details
     * @param {StaffApiGetStaffDetailsForUsernameUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffApi
     */
    public getStaffDetailsForUsernameUsingGET(requestParameters: StaffApiGetStaffDetailsForUsernameUsingGETRequest, options?: any) {
        return StaffApiFp(this.configuration).getStaffDetailsForUsernameUsingGET(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * staff details for supplied usernames
     * @summary Returns a list of staff details for supplied usernames - POST version to allow large user lists.
     * @param {StaffApiGetStaffDetailsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffApi
     */
    public getStaffDetailsList(requestParameters: StaffApiGetStaffDetailsListRequest, options?: any) {
        return StaffApiFp(this.configuration).getStaffDetailsList(requestParameters.usernames, options).then((request) => request(this.axios, this.basePath));
    }
}
