/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Court } from '../model';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { NewCourtDto } from '../model';
// @ts-ignore
import { UpdateCourtDto } from '../model';
/**
 * CourtsApi - axios parameter creator
 * @export
 */
export const CourtsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * requires ROLE_MAINTAIN_REF_DATA and read scope
         * @summary Experimental API to get a court entity
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtUsingGET: async (code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getCourtUsingGET', 'code', code)
            const localVarPath = `/secure/courts/code/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_MAINTAIN_REF_DATA and read scope
         * @summary Experimental API to get all court entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtsUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/secure/courts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_MAINTAIN_REF_DATA and write scope
         * @summary Experimental API to insert a court entity
         * @param {NewCourtDto} court court
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCourtUsingPOST: async (court: NewCourtDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'court' is not null or undefined
            assertParamExists('insertCourtUsingPOST', 'court', court)
            const localVarPath = `/secure/courts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(court, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_MAINTAIN_REF_DATA and write scope
         * @summary Experimental API to update a court entity
         * @param {string} code unique code for this court
         * @param {UpdateCourtDto} court court
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourtUsingPUT: async (code: string, court: UpdateCourtDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateCourtUsingPUT', 'code', code)
            // verify required parameter 'court' is not null or undefined
            assertParamExists('updateCourtUsingPUT', 'court', court)
            const localVarPath = `/secure/courts/code/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(court, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourtsApi - functional programming interface
 * @export
 */
export const CourtsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourtsApiAxiosParamCreator(configuration)
    return {
        /**
         * requires ROLE_MAINTAIN_REF_DATA and read scope
         * @summary Experimental API to get a court entity
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtUsingGET(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Court>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourtUsingGET(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_MAINTAIN_REF_DATA and read scope
         * @summary Experimental API to get all court entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtsUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Court>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourtsUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_MAINTAIN_REF_DATA and write scope
         * @summary Experimental API to insert a court entity
         * @param {NewCourtDto} court court
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertCourtUsingPOST(court: NewCourtDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Court>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertCourtUsingPOST(court, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_MAINTAIN_REF_DATA and write scope
         * @summary Experimental API to update a court entity
         * @param {string} code unique code for this court
         * @param {UpdateCourtDto} court court
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCourtUsingPUT(code: string, court: UpdateCourtDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Court>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCourtUsingPUT(code, court, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CourtsApi - factory interface
 * @export
 */
export const CourtsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourtsApiFp(configuration)
    return {
        /**
         * requires ROLE_MAINTAIN_REF_DATA and read scope
         * @summary Experimental API to get a court entity
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtUsingGET(code: string, options?: any): AxiosPromise<Court> {
            return localVarFp.getCourtUsingGET(code, options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_MAINTAIN_REF_DATA and read scope
         * @summary Experimental API to get all court entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtsUsingGET(options?: any): AxiosPromise<Array<Court>> {
            return localVarFp.getCourtsUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_MAINTAIN_REF_DATA and write scope
         * @summary Experimental API to insert a court entity
         * @param {NewCourtDto} court court
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCourtUsingPOST(court: NewCourtDto, options?: any): AxiosPromise<Court> {
            return localVarFp.insertCourtUsingPOST(court, options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_MAINTAIN_REF_DATA and write scope
         * @summary Experimental API to update a court entity
         * @param {string} code unique code for this court
         * @param {UpdateCourtDto} court court
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourtUsingPUT(code: string, court: UpdateCourtDto, options?: any): AxiosPromise<Court> {
            return localVarFp.updateCourtUsingPUT(code, court, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCourtUsingGET operation in CourtsApi.
 * @export
 * @interface CourtsApiGetCourtUsingGETRequest
 */
export interface CourtsApiGetCourtUsingGETRequest {
    /**
     * code
     * @type {string}
     * @memberof CourtsApiGetCourtUsingGET
     */
    readonly code: string
}

/**
 * Request parameters for insertCourtUsingPOST operation in CourtsApi.
 * @export
 * @interface CourtsApiInsertCourtUsingPOSTRequest
 */
export interface CourtsApiInsertCourtUsingPOSTRequest {
    /**
     * court
     * @type {NewCourtDto}
     * @memberof CourtsApiInsertCourtUsingPOST
     */
    readonly court: NewCourtDto
}

/**
 * Request parameters for updateCourtUsingPUT operation in CourtsApi.
 * @export
 * @interface CourtsApiUpdateCourtUsingPUTRequest
 */
export interface CourtsApiUpdateCourtUsingPUTRequest {
    /**
     * unique code for this court
     * @type {string}
     * @memberof CourtsApiUpdateCourtUsingPUT
     */
    readonly code: string

    /**
     * court
     * @type {UpdateCourtDto}
     * @memberof CourtsApiUpdateCourtUsingPUT
     */
    readonly court: UpdateCourtDto
}

/**
 * CourtsApi - object-oriented interface
 * @export
 * @class CourtsApi
 * @extends {BaseAPI}
 */
export class CourtsApi extends BaseAPI {
    /**
     * requires ROLE_MAINTAIN_REF_DATA and read scope
     * @summary Experimental API to get a court entity
     * @param {CourtsApiGetCourtUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtsApi
     */
    public getCourtUsingGET(requestParameters: CourtsApiGetCourtUsingGETRequest, options?: any) {
        return CourtsApiFp(this.configuration).getCourtUsingGET(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_MAINTAIN_REF_DATA and read scope
     * @summary Experimental API to get all court entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtsApi
     */
    public getCourtsUsingGET(options?: any) {
        return CourtsApiFp(this.configuration).getCourtsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_MAINTAIN_REF_DATA and write scope
     * @summary Experimental API to insert a court entity
     * @param {CourtsApiInsertCourtUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtsApi
     */
    public insertCourtUsingPOST(requestParameters: CourtsApiInsertCourtUsingPOSTRequest, options?: any) {
        return CourtsApiFp(this.configuration).insertCourtUsingPOST(requestParameters.court, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_MAINTAIN_REF_DATA and write scope
     * @summary Experimental API to update a court entity
     * @param {CourtsApiUpdateCourtUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtsApi
     */
    public updateCourtUsingPUT(requestParameters: CourtsApiUpdateCourtUsingPUTRequest, options?: any) {
        return CourtsApiFp(this.configuration).updateCourtUsingPUT(requestParameters.code, requestParameters.court, options).then((request) => request(this.axios, this.basePath));
    }
}
