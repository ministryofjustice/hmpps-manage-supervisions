/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { OffenderDocuments } from '../model';
// @ts-ignore
import { Resource } from '../model';
/**
 * DocumentsApi - axios parameter creator
 * @export
 */
export const DocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the document contents meta data for a given document associated with an offender
         * @param {string} crn CRN for the offender
         * @param {string} documentId Document Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDocumentByCrnUsingGET: async (crn: string, documentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getOffenderDocumentByCrnUsingGET', 'crn', crn)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getOffenderDocumentByCrnUsingGET', 'documentId', documentId)
            const localVarPath = `/secure/offenders/crn/{crn}/documents/{documentId}`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)))
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the document contents meta data for a given document associated with an offender
         * @param {string} documentId Document Id
         * @param {string} nomsNumber Nomis number for the offender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDocumentUsingGET: async (documentId: string, nomsNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getOffenderDocumentUsingGET', 'documentId', documentId)
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getOffenderDocumentUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/documents/{documentId}`
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId)))
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all documents\' meta data for an offender by CRN
         * @param {string} crn CRN for the offender
         * @param {string} [subtype] Optional filter for subtype within a type. Can only be used if type is also present&lt;div&gt;Supported sub-types are &lt;ul&gt;   &lt;li&gt;for type &lt;b&gt;COURT_REPORT_DOCUMENT&lt;/b&gt;       &lt;ul&gt;           &lt;li&gt;&lt;b&gt;PSR&lt;/b&gt; - for Pre-Sentence Reports&lt;/li&gt;       &lt;/ul&gt;   &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
         * @param {string} [type] Optional filter for type&lt;div&gt;Supported types are &lt;ul&gt;&lt;li&gt;OFFENDER_DOCUMENT&lt;/li&gt;&lt;li&gt;CONVICTION_DOCUMENT&lt;/li&gt;&lt;li&gt;CPSPACK_DOCUMENT&lt;/li&gt;&lt;li&gt;PRECONS_DOCUMENT&lt;/li&gt;&lt;li&gt;COURT_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;INSTITUTION_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;ADDRESS_ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;APPROVED_PREMISES_REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CASE_ALLOCATION_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CONTACT_DOCUMENT&lt;/li&gt;&lt;li&gt;REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;NSI_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CIRCUMSTANCE_DOCUMENT&lt;/li&gt;&lt;li&gt;UPW_APPOINTMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CONTACT_DOCUMENT&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDocumentsByCrnUsingGET: async (crn: string, subtype?: string, type?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getOffenderDocumentsByCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/documents/grouped`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subtype !== undefined) {
                localVarQueryParameter['subtype'] = subtype;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <div>Supported types are <ul><li>OFFENDER_DOCUMENT</li><li>CONVICTION_DOCUMENT</li><li>CPSPACK_DOCUMENT</li><li>PRECONS_DOCUMENT</li><li>COURT_REPORT_DOCUMENT</li><li>INSTITUTION_REPORT_DOCUMENT</li><li>ADDRESS_ASSESSMENT_DOCUMENT</li><li>APPROVED_PREMISES_REFERRAL_DOCUMENT</li><li>ASSESSMENT_DOCUMENT</li><li>CASE_ALLOCATION_DOCUMENT</li><li>PERSONAL_CONTACT_DOCUMENT</li><li>REFERRAL_DOCUMENT</li><li>NSI_DOCUMENT</li><li>PERSONAL_CIRCUMSTANCE_DOCUMENT</li><li>UPW_APPOINTMENT_DOCUMENT</li><li>CONTACT_DOCUMENT</li></ul></div>
         * @summary Returns all document\'s meta data for an offender by NOMS number
         * @param {string} nomsNumber Nomis number for the offender
         * @param {string} [subtype] Optional filter for subtype within a type. Can only be used if type is also present&lt;div&gt;Supported sub-types are &lt;ul&gt;   &lt;li&gt;for type &lt;b&gt;COURT_REPORT_DOCUMENT&lt;/b&gt;       &lt;ul&gt;           &lt;li&gt;&lt;b&gt;PSR&lt;/b&gt; - for Pre-Sentence Reports&lt;/li&gt;       &lt;/ul&gt;   &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
         * @param {string} [type] Optional filter for type&lt;div&gt;Supported types are &lt;ul&gt;&lt;li&gt;OFFENDER_DOCUMENT&lt;/li&gt;&lt;li&gt;CONVICTION_DOCUMENT&lt;/li&gt;&lt;li&gt;CPSPACK_DOCUMENT&lt;/li&gt;&lt;li&gt;PRECONS_DOCUMENT&lt;/li&gt;&lt;li&gt;COURT_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;INSTITUTION_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;ADDRESS_ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;APPROVED_PREMISES_REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CASE_ALLOCATION_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CONTACT_DOCUMENT&lt;/li&gt;&lt;li&gt;REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;NSI_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CIRCUMSTANCE_DOCUMENT&lt;/li&gt;&lt;li&gt;UPW_APPOINTMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CONTACT_DOCUMENT&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDocumentsByNomsNumberUsingGET: async (nomsNumber: string, subtype?: string, type?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getOffenderDocumentsByNomsNumberUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/documents/grouped`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subtype !== undefined) {
                localVarQueryParameter['subtype'] = subtype;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentsApi - functional programming interface
 * @export
 */
export const DocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the document contents meta data for a given document associated with an offender
         * @param {string} crn CRN for the offender
         * @param {string} documentId Document Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderDocumentByCrnUsingGET(crn: string, documentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderDocumentByCrnUsingGET(crn, documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the document contents meta data for a given document associated with an offender
         * @param {string} documentId Document Id
         * @param {string} nomsNumber Nomis number for the offender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderDocumentUsingGET(documentId: string, nomsNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderDocumentUsingGET(documentId, nomsNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all documents\' meta data for an offender by CRN
         * @param {string} crn CRN for the offender
         * @param {string} [subtype] Optional filter for subtype within a type. Can only be used if type is also present&lt;div&gt;Supported sub-types are &lt;ul&gt;   &lt;li&gt;for type &lt;b&gt;COURT_REPORT_DOCUMENT&lt;/b&gt;       &lt;ul&gt;           &lt;li&gt;&lt;b&gt;PSR&lt;/b&gt; - for Pre-Sentence Reports&lt;/li&gt;       &lt;/ul&gt;   &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
         * @param {string} [type] Optional filter for type&lt;div&gt;Supported types are &lt;ul&gt;&lt;li&gt;OFFENDER_DOCUMENT&lt;/li&gt;&lt;li&gt;CONVICTION_DOCUMENT&lt;/li&gt;&lt;li&gt;CPSPACK_DOCUMENT&lt;/li&gt;&lt;li&gt;PRECONS_DOCUMENT&lt;/li&gt;&lt;li&gt;COURT_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;INSTITUTION_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;ADDRESS_ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;APPROVED_PREMISES_REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CASE_ALLOCATION_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CONTACT_DOCUMENT&lt;/li&gt;&lt;li&gt;REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;NSI_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CIRCUMSTANCE_DOCUMENT&lt;/li&gt;&lt;li&gt;UPW_APPOINTMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CONTACT_DOCUMENT&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderDocumentsByCrnUsingGET(crn: string, subtype?: string, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OffenderDocuments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderDocumentsByCrnUsingGET(crn, subtype, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <div>Supported types are <ul><li>OFFENDER_DOCUMENT</li><li>CONVICTION_DOCUMENT</li><li>CPSPACK_DOCUMENT</li><li>PRECONS_DOCUMENT</li><li>COURT_REPORT_DOCUMENT</li><li>INSTITUTION_REPORT_DOCUMENT</li><li>ADDRESS_ASSESSMENT_DOCUMENT</li><li>APPROVED_PREMISES_REFERRAL_DOCUMENT</li><li>ASSESSMENT_DOCUMENT</li><li>CASE_ALLOCATION_DOCUMENT</li><li>PERSONAL_CONTACT_DOCUMENT</li><li>REFERRAL_DOCUMENT</li><li>NSI_DOCUMENT</li><li>PERSONAL_CIRCUMSTANCE_DOCUMENT</li><li>UPW_APPOINTMENT_DOCUMENT</li><li>CONTACT_DOCUMENT</li></ul></div>
         * @summary Returns all document\'s meta data for an offender by NOMS number
         * @param {string} nomsNumber Nomis number for the offender
         * @param {string} [subtype] Optional filter for subtype within a type. Can only be used if type is also present&lt;div&gt;Supported sub-types are &lt;ul&gt;   &lt;li&gt;for type &lt;b&gt;COURT_REPORT_DOCUMENT&lt;/b&gt;       &lt;ul&gt;           &lt;li&gt;&lt;b&gt;PSR&lt;/b&gt; - for Pre-Sentence Reports&lt;/li&gt;       &lt;/ul&gt;   &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
         * @param {string} [type] Optional filter for type&lt;div&gt;Supported types are &lt;ul&gt;&lt;li&gt;OFFENDER_DOCUMENT&lt;/li&gt;&lt;li&gt;CONVICTION_DOCUMENT&lt;/li&gt;&lt;li&gt;CPSPACK_DOCUMENT&lt;/li&gt;&lt;li&gt;PRECONS_DOCUMENT&lt;/li&gt;&lt;li&gt;COURT_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;INSTITUTION_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;ADDRESS_ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;APPROVED_PREMISES_REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CASE_ALLOCATION_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CONTACT_DOCUMENT&lt;/li&gt;&lt;li&gt;REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;NSI_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CIRCUMSTANCE_DOCUMENT&lt;/li&gt;&lt;li&gt;UPW_APPOINTMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CONTACT_DOCUMENT&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderDocumentsByNomsNumberUsingGET(nomsNumber: string, subtype?: string, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OffenderDocuments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderDocumentsByNomsNumberUsingGET(nomsNumber, subtype, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentsApi - factory interface
 * @export
 */
export const DocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the document contents meta data for a given document associated with an offender
         * @param {string} crn CRN for the offender
         * @param {string} documentId Document Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDocumentByCrnUsingGET(crn: string, documentId: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.getOffenderDocumentByCrnUsingGET(crn, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the document contents meta data for a given document associated with an offender
         * @param {string} documentId Document Id
         * @param {string} nomsNumber Nomis number for the offender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDocumentUsingGET(documentId: string, nomsNumber: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.getOffenderDocumentUsingGET(documentId, nomsNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all documents\' meta data for an offender by CRN
         * @param {string} crn CRN for the offender
         * @param {string} [subtype] Optional filter for subtype within a type. Can only be used if type is also present&lt;div&gt;Supported sub-types are &lt;ul&gt;   &lt;li&gt;for type &lt;b&gt;COURT_REPORT_DOCUMENT&lt;/b&gt;       &lt;ul&gt;           &lt;li&gt;&lt;b&gt;PSR&lt;/b&gt; - for Pre-Sentence Reports&lt;/li&gt;       &lt;/ul&gt;   &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
         * @param {string} [type] Optional filter for type&lt;div&gt;Supported types are &lt;ul&gt;&lt;li&gt;OFFENDER_DOCUMENT&lt;/li&gt;&lt;li&gt;CONVICTION_DOCUMENT&lt;/li&gt;&lt;li&gt;CPSPACK_DOCUMENT&lt;/li&gt;&lt;li&gt;PRECONS_DOCUMENT&lt;/li&gt;&lt;li&gt;COURT_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;INSTITUTION_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;ADDRESS_ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;APPROVED_PREMISES_REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CASE_ALLOCATION_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CONTACT_DOCUMENT&lt;/li&gt;&lt;li&gt;REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;NSI_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CIRCUMSTANCE_DOCUMENT&lt;/li&gt;&lt;li&gt;UPW_APPOINTMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CONTACT_DOCUMENT&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDocumentsByCrnUsingGET(crn: string, subtype?: string, type?: string, options?: any): AxiosPromise<OffenderDocuments> {
            return localVarFp.getOffenderDocumentsByCrnUsingGET(crn, subtype, type, options).then((request) => request(axios, basePath));
        },
        /**
         * <div>Supported types are <ul><li>OFFENDER_DOCUMENT</li><li>CONVICTION_DOCUMENT</li><li>CPSPACK_DOCUMENT</li><li>PRECONS_DOCUMENT</li><li>COURT_REPORT_DOCUMENT</li><li>INSTITUTION_REPORT_DOCUMENT</li><li>ADDRESS_ASSESSMENT_DOCUMENT</li><li>APPROVED_PREMISES_REFERRAL_DOCUMENT</li><li>ASSESSMENT_DOCUMENT</li><li>CASE_ALLOCATION_DOCUMENT</li><li>PERSONAL_CONTACT_DOCUMENT</li><li>REFERRAL_DOCUMENT</li><li>NSI_DOCUMENT</li><li>PERSONAL_CIRCUMSTANCE_DOCUMENT</li><li>UPW_APPOINTMENT_DOCUMENT</li><li>CONTACT_DOCUMENT</li></ul></div>
         * @summary Returns all document\'s meta data for an offender by NOMS number
         * @param {string} nomsNumber Nomis number for the offender
         * @param {string} [subtype] Optional filter for subtype within a type. Can only be used if type is also present&lt;div&gt;Supported sub-types are &lt;ul&gt;   &lt;li&gt;for type &lt;b&gt;COURT_REPORT_DOCUMENT&lt;/b&gt;       &lt;ul&gt;           &lt;li&gt;&lt;b&gt;PSR&lt;/b&gt; - for Pre-Sentence Reports&lt;/li&gt;       &lt;/ul&gt;   &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
         * @param {string} [type] Optional filter for type&lt;div&gt;Supported types are &lt;ul&gt;&lt;li&gt;OFFENDER_DOCUMENT&lt;/li&gt;&lt;li&gt;CONVICTION_DOCUMENT&lt;/li&gt;&lt;li&gt;CPSPACK_DOCUMENT&lt;/li&gt;&lt;li&gt;PRECONS_DOCUMENT&lt;/li&gt;&lt;li&gt;COURT_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;INSTITUTION_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;ADDRESS_ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;APPROVED_PREMISES_REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CASE_ALLOCATION_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CONTACT_DOCUMENT&lt;/li&gt;&lt;li&gt;REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;NSI_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CIRCUMSTANCE_DOCUMENT&lt;/li&gt;&lt;li&gt;UPW_APPOINTMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CONTACT_DOCUMENT&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDocumentsByNomsNumberUsingGET(nomsNumber: string, subtype?: string, type?: string, options?: any): AxiosPromise<OffenderDocuments> {
            return localVarFp.getOffenderDocumentsByNomsNumberUsingGET(nomsNumber, subtype, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getOffenderDocumentByCrnUsingGET operation in DocumentsApi.
 * @export
 * @interface DocumentsApiGetOffenderDocumentByCrnUsingGETRequest
 */
export interface DocumentsApiGetOffenderDocumentByCrnUsingGETRequest {
    /**
     * CRN for the offender
     * @type {string}
     * @memberof DocumentsApiGetOffenderDocumentByCrnUsingGET
     */
    readonly crn: string

    /**
     * Document Id
     * @type {string}
     * @memberof DocumentsApiGetOffenderDocumentByCrnUsingGET
     */
    readonly documentId: string
}

/**
 * Request parameters for getOffenderDocumentUsingGET operation in DocumentsApi.
 * @export
 * @interface DocumentsApiGetOffenderDocumentUsingGETRequest
 */
export interface DocumentsApiGetOffenderDocumentUsingGETRequest {
    /**
     * Document Id
     * @type {string}
     * @memberof DocumentsApiGetOffenderDocumentUsingGET
     */
    readonly documentId: string

    /**
     * Nomis number for the offender
     * @type {string}
     * @memberof DocumentsApiGetOffenderDocumentUsingGET
     */
    readonly nomsNumber: string
}

/**
 * Request parameters for getOffenderDocumentsByCrnUsingGET operation in DocumentsApi.
 * @export
 * @interface DocumentsApiGetOffenderDocumentsByCrnUsingGETRequest
 */
export interface DocumentsApiGetOffenderDocumentsByCrnUsingGETRequest {
    /**
     * CRN for the offender
     * @type {string}
     * @memberof DocumentsApiGetOffenderDocumentsByCrnUsingGET
     */
    readonly crn: string

    /**
     * Optional filter for subtype within a type. Can only be used if type is also present&lt;div&gt;Supported sub-types are &lt;ul&gt;   &lt;li&gt;for type &lt;b&gt;COURT_REPORT_DOCUMENT&lt;/b&gt;       &lt;ul&gt;           &lt;li&gt;&lt;b&gt;PSR&lt;/b&gt; - for Pre-Sentence Reports&lt;/li&gt;       &lt;/ul&gt;   &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
     * @type {string}
     * @memberof DocumentsApiGetOffenderDocumentsByCrnUsingGET
     */
    readonly subtype?: string

    /**
     * Optional filter for type&lt;div&gt;Supported types are &lt;ul&gt;&lt;li&gt;OFFENDER_DOCUMENT&lt;/li&gt;&lt;li&gt;CONVICTION_DOCUMENT&lt;/li&gt;&lt;li&gt;CPSPACK_DOCUMENT&lt;/li&gt;&lt;li&gt;PRECONS_DOCUMENT&lt;/li&gt;&lt;li&gt;COURT_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;INSTITUTION_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;ADDRESS_ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;APPROVED_PREMISES_REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CASE_ALLOCATION_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CONTACT_DOCUMENT&lt;/li&gt;&lt;li&gt;REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;NSI_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CIRCUMSTANCE_DOCUMENT&lt;/li&gt;&lt;li&gt;UPW_APPOINTMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CONTACT_DOCUMENT&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
     * @type {string}
     * @memberof DocumentsApiGetOffenderDocumentsByCrnUsingGET
     */
    readonly type?: string
}

/**
 * Request parameters for getOffenderDocumentsByNomsNumberUsingGET operation in DocumentsApi.
 * @export
 * @interface DocumentsApiGetOffenderDocumentsByNomsNumberUsingGETRequest
 */
export interface DocumentsApiGetOffenderDocumentsByNomsNumberUsingGETRequest {
    /**
     * Nomis number for the offender
     * @type {string}
     * @memberof DocumentsApiGetOffenderDocumentsByNomsNumberUsingGET
     */
    readonly nomsNumber: string

    /**
     * Optional filter for subtype within a type. Can only be used if type is also present&lt;div&gt;Supported sub-types are &lt;ul&gt;   &lt;li&gt;for type &lt;b&gt;COURT_REPORT_DOCUMENT&lt;/b&gt;       &lt;ul&gt;           &lt;li&gt;&lt;b&gt;PSR&lt;/b&gt; - for Pre-Sentence Reports&lt;/li&gt;       &lt;/ul&gt;   &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
     * @type {string}
     * @memberof DocumentsApiGetOffenderDocumentsByNomsNumberUsingGET
     */
    readonly subtype?: string

    /**
     * Optional filter for type&lt;div&gt;Supported types are &lt;ul&gt;&lt;li&gt;OFFENDER_DOCUMENT&lt;/li&gt;&lt;li&gt;CONVICTION_DOCUMENT&lt;/li&gt;&lt;li&gt;CPSPACK_DOCUMENT&lt;/li&gt;&lt;li&gt;PRECONS_DOCUMENT&lt;/li&gt;&lt;li&gt;COURT_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;INSTITUTION_REPORT_DOCUMENT&lt;/li&gt;&lt;li&gt;ADDRESS_ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;APPROVED_PREMISES_REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;ASSESSMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CASE_ALLOCATION_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CONTACT_DOCUMENT&lt;/li&gt;&lt;li&gt;REFERRAL_DOCUMENT&lt;/li&gt;&lt;li&gt;NSI_DOCUMENT&lt;/li&gt;&lt;li&gt;PERSONAL_CIRCUMSTANCE_DOCUMENT&lt;/li&gt;&lt;li&gt;UPW_APPOINTMENT_DOCUMENT&lt;/li&gt;&lt;li&gt;CONTACT_DOCUMENT&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
     * @type {string}
     * @memberof DocumentsApiGetOffenderDocumentsByNomsNumberUsingGET
     */
    readonly type?: string
}

/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
export class DocumentsApi extends BaseAPI {
    /**
     * 
     * @summary Returns the document contents meta data for a given document associated with an offender
     * @param {DocumentsApiGetOffenderDocumentByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public getOffenderDocumentByCrnUsingGET(requestParameters: DocumentsApiGetOffenderDocumentByCrnUsingGETRequest, options?: any) {
        return DocumentsApiFp(this.configuration).getOffenderDocumentByCrnUsingGET(requestParameters.crn, requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the document contents meta data for a given document associated with an offender
     * @param {DocumentsApiGetOffenderDocumentUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public getOffenderDocumentUsingGET(requestParameters: DocumentsApiGetOffenderDocumentUsingGETRequest, options?: any) {
        return DocumentsApiFp(this.configuration).getOffenderDocumentUsingGET(requestParameters.documentId, requestParameters.nomsNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all documents\' meta data for an offender by CRN
     * @param {DocumentsApiGetOffenderDocumentsByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public getOffenderDocumentsByCrnUsingGET(requestParameters: DocumentsApiGetOffenderDocumentsByCrnUsingGETRequest, options?: any) {
        return DocumentsApiFp(this.configuration).getOffenderDocumentsByCrnUsingGET(requestParameters.crn, requestParameters.subtype, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <div>Supported types are <ul><li>OFFENDER_DOCUMENT</li><li>CONVICTION_DOCUMENT</li><li>CPSPACK_DOCUMENT</li><li>PRECONS_DOCUMENT</li><li>COURT_REPORT_DOCUMENT</li><li>INSTITUTION_REPORT_DOCUMENT</li><li>ADDRESS_ASSESSMENT_DOCUMENT</li><li>APPROVED_PREMISES_REFERRAL_DOCUMENT</li><li>ASSESSMENT_DOCUMENT</li><li>CASE_ALLOCATION_DOCUMENT</li><li>PERSONAL_CONTACT_DOCUMENT</li><li>REFERRAL_DOCUMENT</li><li>NSI_DOCUMENT</li><li>PERSONAL_CIRCUMSTANCE_DOCUMENT</li><li>UPW_APPOINTMENT_DOCUMENT</li><li>CONTACT_DOCUMENT</li></ul></div>
     * @summary Returns all document\'s meta data for an offender by NOMS number
     * @param {DocumentsApiGetOffenderDocumentsByNomsNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public getOffenderDocumentsByNomsNumberUsingGET(requestParameters: DocumentsApiGetOffenderDocumentsByNomsNumberUsingGETRequest, options?: any) {
        return DocumentsApiFp(this.configuration).getOffenderDocumentsByNomsNumberUsingGET(requestParameters.nomsNumber, requestParameters.subtype, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }
}
