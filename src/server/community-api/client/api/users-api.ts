/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { UserDetails } from '../model';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a role to a user held in Delius Identity (LDAP)
         * @param {string} roleId Delius Role ID
         * @param {string} username LDAP username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRoleUsingPUT: async (roleId: string, username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('addRoleUsingPUT', 'roleId', roleId)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('addRoleUsingPUT', 'username', username)
            const localVarPath = `/secure/users/{username}/roles/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find user details of a user held in Delius Identity (LDAP)
         * @param {string} email LDAP email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserByEmailUsingGET: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('findUserByEmailUsingGET', 'email', email)
            const localVarPath = `/secure/users/search/email/{email}/details`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find user details of a user held in Delius Identity (LDAP)
         * @param {string} username LDAP username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserUsingGET: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('findUserUsingGET', 'username', username)
            const localVarPath = `/secure/users/{username}/details`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a role to a user held in Delius Identity (LDAP)
         * @param {string} roleId Delius Role ID
         * @param {string} username LDAP username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRoleUsingPUT(roleId: string, username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRoleUsingPUT(roleId, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find user details of a user held in Delius Identity (LDAP)
         * @param {string} email LDAP email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findUserByEmailUsingGET(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findUserByEmailUsingGET(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find user details of a user held in Delius Identity (LDAP)
         * @param {string} username LDAP username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findUserUsingGET(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findUserUsingGET(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a role to a user held in Delius Identity (LDAP)
         * @param {string} roleId Delius Role ID
         * @param {string} username LDAP username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRoleUsingPUT(roleId: string, username: string, options?: any): AxiosPromise<void> {
            return localVarFp.addRoleUsingPUT(roleId, username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find user details of a user held in Delius Identity (LDAP)
         * @param {string} email LDAP email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserByEmailUsingGET(email: string, options?: any): AxiosPromise<Array<UserDetails>> {
            return localVarFp.findUserByEmailUsingGET(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find user details of a user held in Delius Identity (LDAP)
         * @param {string} username LDAP username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserUsingGET(username: string, options?: any): AxiosPromise<UserDetails> {
            return localVarFp.findUserUsingGET(username, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addRoleUsingPUT operation in UsersApi.
 * @export
 * @interface UsersApiAddRoleUsingPUTRequest
 */
export interface UsersApiAddRoleUsingPUTRequest {
    /**
     * Delius Role ID
     * @type {string}
     * @memberof UsersApiAddRoleUsingPUT
     */
    readonly roleId: string

    /**
     * LDAP username
     * @type {string}
     * @memberof UsersApiAddRoleUsingPUT
     */
    readonly username: string
}

/**
 * Request parameters for findUserByEmailUsingGET operation in UsersApi.
 * @export
 * @interface UsersApiFindUserByEmailUsingGETRequest
 */
export interface UsersApiFindUserByEmailUsingGETRequest {
    /**
     * LDAP email address
     * @type {string}
     * @memberof UsersApiFindUserByEmailUsingGET
     */
    readonly email: string
}

/**
 * Request parameters for findUserUsingGET operation in UsersApi.
 * @export
 * @interface UsersApiFindUserUsingGETRequest
 */
export interface UsersApiFindUserUsingGETRequest {
    /**
     * LDAP username
     * @type {string}
     * @memberof UsersApiFindUserUsingGET
     */
    readonly username: string
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Add a role to a user held in Delius Identity (LDAP)
     * @param {UsersApiAddRoleUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public addRoleUsingPUT(requestParameters: UsersApiAddRoleUsingPUTRequest, options?: any) {
        return UsersApiFp(this.configuration).addRoleUsingPUT(requestParameters.roleId, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find user details of a user held in Delius Identity (LDAP)
     * @param {UsersApiFindUserByEmailUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public findUserByEmailUsingGET(requestParameters: UsersApiFindUserByEmailUsingGETRequest, options?: any) {
        return UsersApiFp(this.configuration).findUserByEmailUsingGET(requestParameters.email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find user details of a user held in Delius Identity (LDAP)
     * @param {UsersApiFindUserUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public findUserUsingGET(requestParameters: UsersApiFindUserUsingGETRequest, options?: any) {
        return UsersApiFp(this.configuration).findUserUsingGET(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }
}
