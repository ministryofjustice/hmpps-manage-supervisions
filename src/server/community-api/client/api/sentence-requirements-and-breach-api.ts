/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConvictionRequirements } from '../model';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { LicenceConditions } from '../model';
// @ts-ignore
import { NsiWrapper } from '../model';
// @ts-ignore
import { PssRequirements } from '../model';
/**
 * SentenceRequirementsAndBreachApi - axios parameter creator
 * @export
 */
export const SentenceRequirementsAndBreachApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the Licence Conditions for a conviction
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenceConditionsByConvictionIdUsingGET: async (convictionId: number, crn: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'convictionId' is not null or undefined
            assertParamExists('getLicenceConditionsByConvictionIdUsingGET', 'convictionId', convictionId)
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getLicenceConditionsByConvictionIdUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/convictions/{convictionId}/licenceConditions`
                .replace(`{${"convictionId"}}`, encodeURIComponent(String(convictionId)))
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the NSIs for a conviction ID and a CRN, filtering by NSI codes
         * @param {number} convictionId ID for the conviction / event
         * @param {string} crn CRN for the offender
         * @param {Array<string>} nsiCodes list of NSI codes to constrain by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNsiForOffenderByCrnAndConvictionIdUsingGET: async (convictionId: number, crn: string, nsiCodes: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'convictionId' is not null or undefined
            assertParamExists('getNsiForOffenderByCrnAndConvictionIdUsingGET', 'convictionId', convictionId)
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getNsiForOffenderByCrnAndConvictionIdUsingGET', 'crn', crn)
            // verify required parameter 'nsiCodes' is not null or undefined
            assertParamExists('getNsiForOffenderByCrnAndConvictionIdUsingGET', 'nsiCodes', nsiCodes)
            const localVarPath = `/secure/offenders/crn/{crn}/convictions/{convictionId}/nsis`
                .replace(`{${"convictionId"}}`, encodeURIComponent(String(convictionId)))
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nsiCodes) {
                localVarQueryParameter['nsiCodes'] = nsiCodes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return all the NSIs for the CRN, active convictions only, filtering by NSI codes
         * @param {string} crn CRN for the offender
         * @param {Array<string>} nsiCodes list of NSI codes to constrain by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNsisForOffenderByCrnAndActiveConvictionsUsingGET: async (crn: string, nsiCodes: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getNsisForOffenderByCrnAndActiveConvictionsUsingGET', 'crn', crn)
            // verify required parameter 'nsiCodes' is not null or undefined
            assertParamExists('getNsisForOffenderByCrnAndActiveConvictionsUsingGET', 'nsiCodes', nsiCodes)
            const localVarPath = `/secure/offenders/crn/{crn}/convictions/active/nsis`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nsiCodes) {
                localVarQueryParameter['nsiCodes'] = nsiCodes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the Post Sentence Supervision Requirements for a conviction
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPssRequirementsByConvictionIdUsingGET: async (convictionId: number, crn: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'convictionId' is not null or undefined
            assertParamExists('getPssRequirementsByConvictionIdUsingGET', 'convictionId', convictionId)
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getPssRequirementsByConvictionIdUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/convictions/{convictionId}/pssRequirements`
                .replace(`{${"convictionId"}}`, encodeURIComponent(String(convictionId)))
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the requirements for a conviction
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {boolean} [activeOnly] retrieve only active requirements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequirementsByConvictionIdUsingGET: async (convictionId: number, crn: string, activeOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'convictionId' is not null or undefined
            assertParamExists('getRequirementsByConvictionIdUsingGET', 'convictionId', convictionId)
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getRequirementsByConvictionIdUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/convictions/{convictionId}/requirements`
                .replace(`{${"convictionId"}}`, encodeURIComponent(String(convictionId)))
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (activeOnly !== undefined) {
                localVarQueryParameter['activeOnly'] = activeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SentenceRequirementsAndBreachApi - functional programming interface
 * @export
 */
export const SentenceRequirementsAndBreachApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SentenceRequirementsAndBreachApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the Licence Conditions for a conviction
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLicenceConditionsByConvictionIdUsingGET(convictionId: number, crn: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenceConditions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLicenceConditionsByConvictionIdUsingGET(convictionId, crn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return the NSIs for a conviction ID and a CRN, filtering by NSI codes
         * @param {number} convictionId ID for the conviction / event
         * @param {string} crn CRN for the offender
         * @param {Array<string>} nsiCodes list of NSI codes to constrain by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNsiForOffenderByCrnAndConvictionIdUsingGET(convictionId: number, crn: string, nsiCodes: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NsiWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNsiForOffenderByCrnAndConvictionIdUsingGET(convictionId, crn, nsiCodes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return all the NSIs for the CRN, active convictions only, filtering by NSI codes
         * @param {string} crn CRN for the offender
         * @param {Array<string>} nsiCodes list of NSI codes to constrain by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNsisForOffenderByCrnAndActiveConvictionsUsingGET(crn: string, nsiCodes: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NsiWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNsisForOffenderByCrnAndActiveConvictionsUsingGET(crn, nsiCodes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the Post Sentence Supervision Requirements for a conviction
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPssRequirementsByConvictionIdUsingGET(convictionId: number, crn: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PssRequirements>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPssRequirementsByConvictionIdUsingGET(convictionId, crn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the requirements for a conviction
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {boolean} [activeOnly] retrieve only active requirements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequirementsByConvictionIdUsingGET(convictionId: number, crn: string, activeOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConvictionRequirements>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequirementsByConvictionIdUsingGET(convictionId, crn, activeOnly, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SentenceRequirementsAndBreachApi - factory interface
 * @export
 */
export const SentenceRequirementsAndBreachApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SentenceRequirementsAndBreachApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the Licence Conditions for a conviction
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenceConditionsByConvictionIdUsingGET(convictionId: number, crn: string, options?: any): AxiosPromise<LicenceConditions> {
            return localVarFp.getLicenceConditionsByConvictionIdUsingGET(convictionId, crn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return the NSIs for a conviction ID and a CRN, filtering by NSI codes
         * @param {number} convictionId ID for the conviction / event
         * @param {string} crn CRN for the offender
         * @param {Array<string>} nsiCodes list of NSI codes to constrain by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNsiForOffenderByCrnAndConvictionIdUsingGET(convictionId: number, crn: string, nsiCodes: Array<string>, options?: any): AxiosPromise<NsiWrapper> {
            return localVarFp.getNsiForOffenderByCrnAndConvictionIdUsingGET(convictionId, crn, nsiCodes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return all the NSIs for the CRN, active convictions only, filtering by NSI codes
         * @param {string} crn CRN for the offender
         * @param {Array<string>} nsiCodes list of NSI codes to constrain by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNsisForOffenderByCrnAndActiveConvictionsUsingGET(crn: string, nsiCodes: Array<string>, options?: any): AxiosPromise<NsiWrapper> {
            return localVarFp.getNsisForOffenderByCrnAndActiveConvictionsUsingGET(crn, nsiCodes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the Post Sentence Supervision Requirements for a conviction
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPssRequirementsByConvictionIdUsingGET(convictionId: number, crn: string, options?: any): AxiosPromise<PssRequirements> {
            return localVarFp.getPssRequirementsByConvictionIdUsingGET(convictionId, crn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the requirements for a conviction
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {boolean} [activeOnly] retrieve only active requirements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequirementsByConvictionIdUsingGET(convictionId: number, crn: string, activeOnly?: boolean, options?: any): AxiosPromise<ConvictionRequirements> {
            return localVarFp.getRequirementsByConvictionIdUsingGET(convictionId, crn, activeOnly, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getLicenceConditionsByConvictionIdUsingGET operation in SentenceRequirementsAndBreachApi.
 * @export
 * @interface SentenceRequirementsAndBreachApiGetLicenceConditionsByConvictionIdUsingGETRequest
 */
export interface SentenceRequirementsAndBreachApiGetLicenceConditionsByConvictionIdUsingGETRequest {
    /**
     * convictionId
     * @type {number}
     * @memberof SentenceRequirementsAndBreachApiGetLicenceConditionsByConvictionIdUsingGET
     */
    readonly convictionId: number

    /**
     * crn
     * @type {string}
     * @memberof SentenceRequirementsAndBreachApiGetLicenceConditionsByConvictionIdUsingGET
     */
    readonly crn: string
}

/**
 * Request parameters for getNsiForOffenderByCrnAndConvictionIdUsingGET operation in SentenceRequirementsAndBreachApi.
 * @export
 * @interface SentenceRequirementsAndBreachApiGetNsiForOffenderByCrnAndConvictionIdUsingGETRequest
 */
export interface SentenceRequirementsAndBreachApiGetNsiForOffenderByCrnAndConvictionIdUsingGETRequest {
    /**
     * ID for the conviction / event
     * @type {number}
     * @memberof SentenceRequirementsAndBreachApiGetNsiForOffenderByCrnAndConvictionIdUsingGET
     */
    readonly convictionId: number

    /**
     * CRN for the offender
     * @type {string}
     * @memberof SentenceRequirementsAndBreachApiGetNsiForOffenderByCrnAndConvictionIdUsingGET
     */
    readonly crn: string

    /**
     * list of NSI codes to constrain by
     * @type {Array<string>}
     * @memberof SentenceRequirementsAndBreachApiGetNsiForOffenderByCrnAndConvictionIdUsingGET
     */
    readonly nsiCodes: Array<string>
}

/**
 * Request parameters for getNsisForOffenderByCrnAndActiveConvictionsUsingGET operation in SentenceRequirementsAndBreachApi.
 * @export
 * @interface SentenceRequirementsAndBreachApiGetNsisForOffenderByCrnAndActiveConvictionsUsingGETRequest
 */
export interface SentenceRequirementsAndBreachApiGetNsisForOffenderByCrnAndActiveConvictionsUsingGETRequest {
    /**
     * CRN for the offender
     * @type {string}
     * @memberof SentenceRequirementsAndBreachApiGetNsisForOffenderByCrnAndActiveConvictionsUsingGET
     */
    readonly crn: string

    /**
     * list of NSI codes to constrain by
     * @type {Array<string>}
     * @memberof SentenceRequirementsAndBreachApiGetNsisForOffenderByCrnAndActiveConvictionsUsingGET
     */
    readonly nsiCodes: Array<string>
}

/**
 * Request parameters for getPssRequirementsByConvictionIdUsingGET operation in SentenceRequirementsAndBreachApi.
 * @export
 * @interface SentenceRequirementsAndBreachApiGetPssRequirementsByConvictionIdUsingGETRequest
 */
export interface SentenceRequirementsAndBreachApiGetPssRequirementsByConvictionIdUsingGETRequest {
    /**
     * convictionId
     * @type {number}
     * @memberof SentenceRequirementsAndBreachApiGetPssRequirementsByConvictionIdUsingGET
     */
    readonly convictionId: number

    /**
     * crn
     * @type {string}
     * @memberof SentenceRequirementsAndBreachApiGetPssRequirementsByConvictionIdUsingGET
     */
    readonly crn: string
}

/**
 * Request parameters for getRequirementsByConvictionIdUsingGET operation in SentenceRequirementsAndBreachApi.
 * @export
 * @interface SentenceRequirementsAndBreachApiGetRequirementsByConvictionIdUsingGETRequest
 */
export interface SentenceRequirementsAndBreachApiGetRequirementsByConvictionIdUsingGETRequest {
    /**
     * convictionId
     * @type {number}
     * @memberof SentenceRequirementsAndBreachApiGetRequirementsByConvictionIdUsingGET
     */
    readonly convictionId: number

    /**
     * crn
     * @type {string}
     * @memberof SentenceRequirementsAndBreachApiGetRequirementsByConvictionIdUsingGET
     */
    readonly crn: string

    /**
     * retrieve only active requirements
     * @type {boolean}
     * @memberof SentenceRequirementsAndBreachApiGetRequirementsByConvictionIdUsingGET
     */
    readonly activeOnly?: boolean
}

/**
 * SentenceRequirementsAndBreachApi - object-oriented interface
 * @export
 * @class SentenceRequirementsAndBreachApi
 * @extends {BaseAPI}
 */
export class SentenceRequirementsAndBreachApi extends BaseAPI {
    /**
     * 
     * @summary Returns the Licence Conditions for a conviction
     * @param {SentenceRequirementsAndBreachApiGetLicenceConditionsByConvictionIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceRequirementsAndBreachApi
     */
    public getLicenceConditionsByConvictionIdUsingGET(requestParameters: SentenceRequirementsAndBreachApiGetLicenceConditionsByConvictionIdUsingGETRequest, options?: any) {
        return SentenceRequirementsAndBreachApiFp(this.configuration).getLicenceConditionsByConvictionIdUsingGET(requestParameters.convictionId, requestParameters.crn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return the NSIs for a conviction ID and a CRN, filtering by NSI codes
     * @param {SentenceRequirementsAndBreachApiGetNsiForOffenderByCrnAndConvictionIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceRequirementsAndBreachApi
     */
    public getNsiForOffenderByCrnAndConvictionIdUsingGET(requestParameters: SentenceRequirementsAndBreachApiGetNsiForOffenderByCrnAndConvictionIdUsingGETRequest, options?: any) {
        return SentenceRequirementsAndBreachApiFp(this.configuration).getNsiForOffenderByCrnAndConvictionIdUsingGET(requestParameters.convictionId, requestParameters.crn, requestParameters.nsiCodes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return all the NSIs for the CRN, active convictions only, filtering by NSI codes
     * @param {SentenceRequirementsAndBreachApiGetNsisForOffenderByCrnAndActiveConvictionsUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceRequirementsAndBreachApi
     */
    public getNsisForOffenderByCrnAndActiveConvictionsUsingGET(requestParameters: SentenceRequirementsAndBreachApiGetNsisForOffenderByCrnAndActiveConvictionsUsingGETRequest, options?: any) {
        return SentenceRequirementsAndBreachApiFp(this.configuration).getNsisForOffenderByCrnAndActiveConvictionsUsingGET(requestParameters.crn, requestParameters.nsiCodes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the Post Sentence Supervision Requirements for a conviction
     * @param {SentenceRequirementsAndBreachApiGetPssRequirementsByConvictionIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceRequirementsAndBreachApi
     */
    public getPssRequirementsByConvictionIdUsingGET(requestParameters: SentenceRequirementsAndBreachApiGetPssRequirementsByConvictionIdUsingGETRequest, options?: any) {
        return SentenceRequirementsAndBreachApiFp(this.configuration).getPssRequirementsByConvictionIdUsingGET(requestParameters.convictionId, requestParameters.crn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the requirements for a conviction
     * @param {SentenceRequirementsAndBreachApiGetRequirementsByConvictionIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceRequirementsAndBreachApi
     */
    public getRequirementsByConvictionIdUsingGET(requestParameters: SentenceRequirementsAndBreachApiGetRequirementsByConvictionIdUsingGETRequest, options?: any) {
        return SentenceRequirementsAndBreachApiFp(this.configuration).getRequirementsByConvictionIdUsingGET(requestParameters.convictionId, requestParameters.crn, requestParameters.activeOnly, options).then((request) => request(this.axios, this.basePath));
    }
}
