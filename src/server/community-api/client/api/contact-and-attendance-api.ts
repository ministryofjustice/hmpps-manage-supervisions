/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Attendances } from '../model';
// @ts-ignore
import { Contact } from '../model';
// @ts-ignore
import { ErrorResponse } from '../model';
/**
 * ContactAndAttendanceApi - axios parameter creator
 * @export
 */
export const ContactAndAttendanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return the attendances for a CRN and a conviction id, filtered.
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendancesByConvictionUsingGET: async (convictionId: number, crn: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'convictionId' is not null or undefined
            assertParamExists('getAttendancesByConvictionUsingGET', 'convictionId', convictionId)
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getAttendancesByConvictionUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/convictions/{convictionId}/attendancesFilter`
                .replace(`{${"convictionId"}}`, encodeURIComponent(String(convictionId)))
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the attendances for a CRN and a conviction id where enforcement is flagged
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendancesUsingGET: async (convictionId: number, crn: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'convictionId' is not null or undefined
            assertParamExists('getAttendancesUsingGET', 'convictionId', convictionId)
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getAttendancesUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/convictions/{convictionId}/attendances`
                .replace(`{${"convictionId"}}`, encodeURIComponent(String(convictionId)))
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the contact details for an offender
         * @param {Array<string>} contactTypes contactTypes
         * @param {string} from from
         * @param {string} nomsNumber Nomis number for the offender
         * @param {string} to to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderContactReportByNomsNumberUsingGET: async (contactTypes: Array<string>, from: string, nomsNumber: string, to: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactTypes' is not null or undefined
            assertParamExists('getOffenderContactReportByNomsNumberUsingGET', 'contactTypes', contactTypes)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getOffenderContactReportByNomsNumberUsingGET', 'from', from)
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getOffenderContactReportByNomsNumberUsingGET', 'nomsNumber', nomsNumber)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getOffenderContactReportByNomsNumberUsingGET', 'to', to)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/contacts`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contactTypes) {
                localVarQueryParameter['contactTypes'] = contactTypes;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds case note to delius
         * @param {number} caseNotesId caseNotesId
         * @param {string} nomisId nomisId
         * @param {string} caseNote caseNote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertCaseNotesToDeliusUsingPUT: async (caseNotesId: number, nomisId: string, caseNote: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseNotesId' is not null or undefined
            assertParamExists('upsertCaseNotesToDeliusUsingPUT', 'caseNotesId', caseNotesId)
            // verify required parameter 'nomisId' is not null or undefined
            assertParamExists('upsertCaseNotesToDeliusUsingPUT', 'nomisId', nomisId)
            // verify required parameter 'caseNote' is not null or undefined
            assertParamExists('upsertCaseNotesToDeliusUsingPUT', 'caseNote', caseNote)
            const localVarPath = `/secure/nomisCaseNotes/{nomisId}/{caseNotesId}`
                .replace(`{${"caseNotesId"}}`, encodeURIComponent(String(caseNotesId)))
                .replace(`{${"nomisId"}}`, encodeURIComponent(String(nomisId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(caseNote, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactAndAttendanceApi - functional programming interface
 * @export
 */
export const ContactAndAttendanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactAndAttendanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Return the attendances for a CRN and a conviction id, filtered.
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttendancesByConvictionUsingGET(convictionId: number, crn: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attendances>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttendancesByConvictionUsingGET(convictionId, crn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return the attendances for a CRN and a conviction id where enforcement is flagged
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttendancesUsingGET(convictionId: number, crn: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attendances>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttendancesUsingGET(convictionId, crn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the contact details for an offender
         * @param {Array<string>} contactTypes contactTypes
         * @param {string} from from
         * @param {string} nomsNumber Nomis number for the offender
         * @param {string} to to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderContactReportByNomsNumberUsingGET(contactTypes: Array<string>, from: string, nomsNumber: string, to: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Contact>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderContactReportByNomsNumberUsingGET(contactTypes, from, nomsNumber, to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Adds case note to delius
         * @param {number} caseNotesId caseNotesId
         * @param {string} nomisId nomisId
         * @param {string} caseNote caseNote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertCaseNotesToDeliusUsingPUT(caseNotesId: number, nomisId: string, caseNote: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertCaseNotesToDeliusUsingPUT(caseNotesId, nomisId, caseNote, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContactAndAttendanceApi - factory interface
 * @export
 */
export const ContactAndAttendanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactAndAttendanceApiFp(configuration)
    return {
        /**
         * 
         * @summary Return the attendances for a CRN and a conviction id, filtered.
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendancesByConvictionUsingGET(convictionId: number, crn: string, options?: any): AxiosPromise<Attendances> {
            return localVarFp.getAttendancesByConvictionUsingGET(convictionId, crn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return the attendances for a CRN and a conviction id where enforcement is flagged
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendancesUsingGET(convictionId: number, crn: string, options?: any): AxiosPromise<Attendances> {
            return localVarFp.getAttendancesUsingGET(convictionId, crn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the contact details for an offender
         * @param {Array<string>} contactTypes contactTypes
         * @param {string} from from
         * @param {string} nomsNumber Nomis number for the offender
         * @param {string} to to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderContactReportByNomsNumberUsingGET(contactTypes: Array<string>, from: string, nomsNumber: string, to: string, options?: any): AxiosPromise<Array<Contact>> {
            return localVarFp.getOffenderContactReportByNomsNumberUsingGET(contactTypes, from, nomsNumber, to, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds case note to delius
         * @param {number} caseNotesId caseNotesId
         * @param {string} nomisId nomisId
         * @param {string} caseNote caseNote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertCaseNotesToDeliusUsingPUT(caseNotesId: number, nomisId: string, caseNote: string, options?: any): AxiosPromise<string> {
            return localVarFp.upsertCaseNotesToDeliusUsingPUT(caseNotesId, nomisId, caseNote, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAttendancesByConvictionUsingGET operation in ContactAndAttendanceApi.
 * @export
 * @interface ContactAndAttendanceApiGetAttendancesByConvictionUsingGETRequest
 */
export interface ContactAndAttendanceApiGetAttendancesByConvictionUsingGETRequest {
    /**
     * convictionId
     * @type {number}
     * @memberof ContactAndAttendanceApiGetAttendancesByConvictionUsingGET
     */
    readonly convictionId: number

    /**
     * crn
     * @type {string}
     * @memberof ContactAndAttendanceApiGetAttendancesByConvictionUsingGET
     */
    readonly crn: string
}

/**
 * Request parameters for getAttendancesUsingGET operation in ContactAndAttendanceApi.
 * @export
 * @interface ContactAndAttendanceApiGetAttendancesUsingGETRequest
 */
export interface ContactAndAttendanceApiGetAttendancesUsingGETRequest {
    /**
     * convictionId
     * @type {number}
     * @memberof ContactAndAttendanceApiGetAttendancesUsingGET
     */
    readonly convictionId: number

    /**
     * crn
     * @type {string}
     * @memberof ContactAndAttendanceApiGetAttendancesUsingGET
     */
    readonly crn: string
}

/**
 * Request parameters for getOffenderContactReportByNomsNumberUsingGET operation in ContactAndAttendanceApi.
 * @export
 * @interface ContactAndAttendanceApiGetOffenderContactReportByNomsNumberUsingGETRequest
 */
export interface ContactAndAttendanceApiGetOffenderContactReportByNomsNumberUsingGETRequest {
    /**
     * contactTypes
     * @type {Array<string>}
     * @memberof ContactAndAttendanceApiGetOffenderContactReportByNomsNumberUsingGET
     */
    readonly contactTypes: Array<string>

    /**
     * from
     * @type {string}
     * @memberof ContactAndAttendanceApiGetOffenderContactReportByNomsNumberUsingGET
     */
    readonly from: string

    /**
     * Nomis number for the offender
     * @type {string}
     * @memberof ContactAndAttendanceApiGetOffenderContactReportByNomsNumberUsingGET
     */
    readonly nomsNumber: string

    /**
     * to
     * @type {string}
     * @memberof ContactAndAttendanceApiGetOffenderContactReportByNomsNumberUsingGET
     */
    readonly to: string
}

/**
 * Request parameters for upsertCaseNotesToDeliusUsingPUT operation in ContactAndAttendanceApi.
 * @export
 * @interface ContactAndAttendanceApiUpsertCaseNotesToDeliusUsingPUTRequest
 */
export interface ContactAndAttendanceApiUpsertCaseNotesToDeliusUsingPUTRequest {
    /**
     * caseNotesId
     * @type {number}
     * @memberof ContactAndAttendanceApiUpsertCaseNotesToDeliusUsingPUT
     */
    readonly caseNotesId: number

    /**
     * nomisId
     * @type {string}
     * @memberof ContactAndAttendanceApiUpsertCaseNotesToDeliusUsingPUT
     */
    readonly nomisId: string

    /**
     * caseNote
     * @type {string}
     * @memberof ContactAndAttendanceApiUpsertCaseNotesToDeliusUsingPUT
     */
    readonly caseNote: string
}

/**
 * ContactAndAttendanceApi - object-oriented interface
 * @export
 * @class ContactAndAttendanceApi
 * @extends {BaseAPI}
 */
export class ContactAndAttendanceApi extends BaseAPI {
    /**
     * 
     * @summary Return the attendances for a CRN and a conviction id, filtered.
     * @param {ContactAndAttendanceApiGetAttendancesByConvictionUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactAndAttendanceApi
     */
    public getAttendancesByConvictionUsingGET(requestParameters: ContactAndAttendanceApiGetAttendancesByConvictionUsingGETRequest, options?: any) {
        return ContactAndAttendanceApiFp(this.configuration).getAttendancesByConvictionUsingGET(requestParameters.convictionId, requestParameters.crn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return the attendances for a CRN and a conviction id where enforcement is flagged
     * @param {ContactAndAttendanceApiGetAttendancesUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactAndAttendanceApi
     */
    public getAttendancesUsingGET(requestParameters: ContactAndAttendanceApiGetAttendancesUsingGETRequest, options?: any) {
        return ContactAndAttendanceApiFp(this.configuration).getAttendancesUsingGET(requestParameters.convictionId, requestParameters.crn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the contact details for an offender
     * @param {ContactAndAttendanceApiGetOffenderContactReportByNomsNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactAndAttendanceApi
     */
    public getOffenderContactReportByNomsNumberUsingGET(requestParameters: ContactAndAttendanceApiGetOffenderContactReportByNomsNumberUsingGETRequest, options?: any) {
        return ContactAndAttendanceApiFp(this.configuration).getOffenderContactReportByNomsNumberUsingGET(requestParameters.contactTypes, requestParameters.from, requestParameters.nomsNumber, requestParameters.to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds case note to delius
     * @param {ContactAndAttendanceApiUpsertCaseNotesToDeliusUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactAndAttendanceApi
     */
    public upsertCaseNotesToDeliusUsingPUT(requestParameters: ContactAndAttendanceApiUpsertCaseNotesToDeliusUsingPUTRequest, options?: any) {
        return ContactAndAttendanceApiFp(this.configuration).upsertCaseNotesToDeliusUsingPUT(requestParameters.caseNotesId, requestParameters.nomisId, requestParameters.caseNote, options).then((request) => request(this.axios, this.basePath));
    }
}
