/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { MappaDetails } from '../model';
// @ts-ignore
import { Registrations } from '../model';
// @ts-ignore
import { RiskResourcingDetails } from '../model';
/**
 * RisksAndRegistrationsApi - axios parameter creator
 * @export
 */
export const RisksAndRegistrationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the MAPPA details for an offender using CRN
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderMappaDetailsByCrnUsingGET: async (crn: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getOffenderMappaDetailsByCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/risk/mappa`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the MAPPA details for an offender using NOMS number
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderMappaDetailsByNomsNumberUsingGET: async (nomsNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getOffenderMappaDetailsByNomsNumberUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/risk/mappa`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the registrations for an offender using the crn
         * @param {string} crn crn
         * @param {boolean} [activeOnly] retrieve only active registrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderRegistrationsByCrnUsingGET: async (crn: string, activeOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getOffenderRegistrationsByCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/registrations`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (activeOnly !== undefined) {
                localVarQueryParameter['activeOnly'] = activeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the registrations for an offender using NOMS number
         * @param {string} nomsNumber nomsNumber
         * @param {boolean} [failOnDuplicate] failOnDuplicate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderRegistrationsByNomsNumberUsingGET: async (nomsNumber: string, failOnDuplicate?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getOffenderRegistrationsByNomsNumberUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/registrations`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (failOnDuplicate !== undefined) {
                localVarQueryParameter['failOnDuplicate'] = failOnDuplicate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the registrations for an offender using offenderId
         * @param {number} offenderId offenderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderRegistrationsByOffenderIdUsingGET: async (offenderId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offenderId' is not null or undefined
            assertParamExists('getOffenderRegistrationsByOffenderIdUsingGET', 'offenderId', offenderId)
            const localVarPath = `/secure/offenders/offenderId/{offenderId}/registrations`
                .replace(`{${"offenderId"}}`, encodeURIComponent(String(offenderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the resourcing details for an offender using CRN number. Typically this is allocated or retained requiring greater resourcing. This equates to the historic NPS/CRC split for low and high risk offenders
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderResourcingDetailsByCrnUsingGET: async (crn: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getOffenderResourcingDetailsByCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/risk/resourcing/latest`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the resourcing details for an offender using NOMS number. Typically this is allocated or retained requiring greater resourcing. This equates to the historic NPS/CRC split for low and high risk offenders
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderResourcingDetailsByNomsNumberUsingGET: async (nomsNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getOffenderResourcingDetailsByNomsNumberUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/risk/resourcing/latest`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RisksAndRegistrationsApi - functional programming interface
 * @export
 */
export const RisksAndRegistrationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RisksAndRegistrationsApiAxiosParamCreator(configuration)
    return {
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the MAPPA details for an offender using CRN
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderMappaDetailsByCrnUsingGET(crn: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MappaDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderMappaDetailsByCrnUsingGET(crn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the MAPPA details for an offender using NOMS number
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderMappaDetailsByNomsNumberUsingGET(nomsNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MappaDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderMappaDetailsByNomsNumberUsingGET(nomsNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the registrations for an offender using the crn
         * @param {string} crn crn
         * @param {boolean} [activeOnly] retrieve only active registrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderRegistrationsByCrnUsingGET(crn: string, activeOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registrations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderRegistrationsByCrnUsingGET(crn, activeOnly, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the registrations for an offender using NOMS number
         * @param {string} nomsNumber nomsNumber
         * @param {boolean} [failOnDuplicate] failOnDuplicate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderRegistrationsByNomsNumberUsingGET(nomsNumber: string, failOnDuplicate?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registrations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderRegistrationsByNomsNumberUsingGET(nomsNumber, failOnDuplicate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the registrations for an offender using offenderId
         * @param {number} offenderId offenderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderRegistrationsByOffenderIdUsingGET(offenderId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registrations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderRegistrationsByOffenderIdUsingGET(offenderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the resourcing details for an offender using CRN number. Typically this is allocated or retained requiring greater resourcing. This equates to the historic NPS/CRC split for low and high risk offenders
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderResourcingDetailsByCrnUsingGET(crn: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RiskResourcingDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderResourcingDetailsByCrnUsingGET(crn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the resourcing details for an offender using NOMS number. Typically this is allocated or retained requiring greater resourcing. This equates to the historic NPS/CRC split for low and high risk offenders
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderResourcingDetailsByNomsNumberUsingGET(nomsNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RiskResourcingDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderResourcingDetailsByNomsNumberUsingGET(nomsNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RisksAndRegistrationsApi - factory interface
 * @export
 */
export const RisksAndRegistrationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RisksAndRegistrationsApiFp(configuration)
    return {
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the MAPPA details for an offender using CRN
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderMappaDetailsByCrnUsingGET(crn: string, options?: any): AxiosPromise<MappaDetails> {
            return localVarFp.getOffenderMappaDetailsByCrnUsingGET(crn, options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the MAPPA details for an offender using NOMS number
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderMappaDetailsByNomsNumberUsingGET(nomsNumber: string, options?: any): AxiosPromise<MappaDetails> {
            return localVarFp.getOffenderMappaDetailsByNomsNumberUsingGET(nomsNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the registrations for an offender using the crn
         * @param {string} crn crn
         * @param {boolean} [activeOnly] retrieve only active registrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderRegistrationsByCrnUsingGET(crn: string, activeOnly?: boolean, options?: any): AxiosPromise<Registrations> {
            return localVarFp.getOffenderRegistrationsByCrnUsingGET(crn, activeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the registrations for an offender using NOMS number
         * @param {string} nomsNumber nomsNumber
         * @param {boolean} [failOnDuplicate] failOnDuplicate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderRegistrationsByNomsNumberUsingGET(nomsNumber: string, failOnDuplicate?: boolean, options?: any): AxiosPromise<Registrations> {
            return localVarFp.getOffenderRegistrationsByNomsNumberUsingGET(nomsNumber, failOnDuplicate, options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the registrations for an offender using offenderId
         * @param {number} offenderId offenderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderRegistrationsByOffenderIdUsingGET(offenderId: number, options?: any): AxiosPromise<Registrations> {
            return localVarFp.getOffenderRegistrationsByOffenderIdUsingGET(offenderId, options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the resourcing details for an offender using CRN number. Typically this is allocated or retained requiring greater resourcing. This equates to the historic NPS/CRC split for low and high risk offenders
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderResourcingDetailsByCrnUsingGET(crn: string, options?: any): AxiosPromise<RiskResourcingDetails> {
            return localVarFp.getOffenderResourcingDetailsByCrnUsingGET(crn, options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the resourcing details for an offender using NOMS number. Typically this is allocated or retained requiring greater resourcing. This equates to the historic NPS/CRC split for low and high risk offenders
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderResourcingDetailsByNomsNumberUsingGET(nomsNumber: string, options?: any): AxiosPromise<RiskResourcingDetails> {
            return localVarFp.getOffenderResourcingDetailsByNomsNumberUsingGET(nomsNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getOffenderMappaDetailsByCrnUsingGET operation in RisksAndRegistrationsApi.
 * @export
 * @interface RisksAndRegistrationsApiGetOffenderMappaDetailsByCrnUsingGETRequest
 */
export interface RisksAndRegistrationsApiGetOffenderMappaDetailsByCrnUsingGETRequest {
    /**
     * crn
     * @type {string}
     * @memberof RisksAndRegistrationsApiGetOffenderMappaDetailsByCrnUsingGET
     */
    readonly crn: string
}

/**
 * Request parameters for getOffenderMappaDetailsByNomsNumberUsingGET operation in RisksAndRegistrationsApi.
 * @export
 * @interface RisksAndRegistrationsApiGetOffenderMappaDetailsByNomsNumberUsingGETRequest
 */
export interface RisksAndRegistrationsApiGetOffenderMappaDetailsByNomsNumberUsingGETRequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof RisksAndRegistrationsApiGetOffenderMappaDetailsByNomsNumberUsingGET
     */
    readonly nomsNumber: string
}

/**
 * Request parameters for getOffenderRegistrationsByCrnUsingGET operation in RisksAndRegistrationsApi.
 * @export
 * @interface RisksAndRegistrationsApiGetOffenderRegistrationsByCrnUsingGETRequest
 */
export interface RisksAndRegistrationsApiGetOffenderRegistrationsByCrnUsingGETRequest {
    /**
     * crn
     * @type {string}
     * @memberof RisksAndRegistrationsApiGetOffenderRegistrationsByCrnUsingGET
     */
    readonly crn: string

    /**
     * retrieve only active registrations
     * @type {boolean}
     * @memberof RisksAndRegistrationsApiGetOffenderRegistrationsByCrnUsingGET
     */
    readonly activeOnly?: boolean
}

/**
 * Request parameters for getOffenderRegistrationsByNomsNumberUsingGET operation in RisksAndRegistrationsApi.
 * @export
 * @interface RisksAndRegistrationsApiGetOffenderRegistrationsByNomsNumberUsingGETRequest
 */
export interface RisksAndRegistrationsApiGetOffenderRegistrationsByNomsNumberUsingGETRequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof RisksAndRegistrationsApiGetOffenderRegistrationsByNomsNumberUsingGET
     */
    readonly nomsNumber: string

    /**
     * failOnDuplicate
     * @type {boolean}
     * @memberof RisksAndRegistrationsApiGetOffenderRegistrationsByNomsNumberUsingGET
     */
    readonly failOnDuplicate?: boolean
}

/**
 * Request parameters for getOffenderRegistrationsByOffenderIdUsingGET operation in RisksAndRegistrationsApi.
 * @export
 * @interface RisksAndRegistrationsApiGetOffenderRegistrationsByOffenderIdUsingGETRequest
 */
export interface RisksAndRegistrationsApiGetOffenderRegistrationsByOffenderIdUsingGETRequest {
    /**
     * offenderId
     * @type {number}
     * @memberof RisksAndRegistrationsApiGetOffenderRegistrationsByOffenderIdUsingGET
     */
    readonly offenderId: number
}

/**
 * Request parameters for getOffenderResourcingDetailsByCrnUsingGET operation in RisksAndRegistrationsApi.
 * @export
 * @interface RisksAndRegistrationsApiGetOffenderResourcingDetailsByCrnUsingGETRequest
 */
export interface RisksAndRegistrationsApiGetOffenderResourcingDetailsByCrnUsingGETRequest {
    /**
     * crn
     * @type {string}
     * @memberof RisksAndRegistrationsApiGetOffenderResourcingDetailsByCrnUsingGET
     */
    readonly crn: string
}

/**
 * Request parameters for getOffenderResourcingDetailsByNomsNumberUsingGET operation in RisksAndRegistrationsApi.
 * @export
 * @interface RisksAndRegistrationsApiGetOffenderResourcingDetailsByNomsNumberUsingGETRequest
 */
export interface RisksAndRegistrationsApiGetOffenderResourcingDetailsByNomsNumberUsingGETRequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof RisksAndRegistrationsApiGetOffenderResourcingDetailsByNomsNumberUsingGET
     */
    readonly nomsNumber: string
}

/**
 * RisksAndRegistrationsApi - object-oriented interface
 * @export
 * @class RisksAndRegistrationsApi
 * @extends {BaseAPI}
 */
export class RisksAndRegistrationsApi extends BaseAPI {
    /**
     * requires ROLE_COMMUNITY
     * @summary Return the MAPPA details for an offender using CRN
     * @param {RisksAndRegistrationsApiGetOffenderMappaDetailsByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RisksAndRegistrationsApi
     */
    public getOffenderMappaDetailsByCrnUsingGET(requestParameters: RisksAndRegistrationsApiGetOffenderMappaDetailsByCrnUsingGETRequest, options?: any) {
        return RisksAndRegistrationsApiFp(this.configuration).getOffenderMappaDetailsByCrnUsingGET(requestParameters.crn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_COMMUNITY
     * @summary Return the MAPPA details for an offender using NOMS number
     * @param {RisksAndRegistrationsApiGetOffenderMappaDetailsByNomsNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RisksAndRegistrationsApi
     */
    public getOffenderMappaDetailsByNomsNumberUsingGET(requestParameters: RisksAndRegistrationsApiGetOffenderMappaDetailsByNomsNumberUsingGETRequest, options?: any) {
        return RisksAndRegistrationsApiFp(this.configuration).getOffenderMappaDetailsByNomsNumberUsingGET(requestParameters.nomsNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_COMMUNITY
     * @summary Return the registrations for an offender using the crn
     * @param {RisksAndRegistrationsApiGetOffenderRegistrationsByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RisksAndRegistrationsApi
     */
    public getOffenderRegistrationsByCrnUsingGET(requestParameters: RisksAndRegistrationsApiGetOffenderRegistrationsByCrnUsingGETRequest, options?: any) {
        return RisksAndRegistrationsApiFp(this.configuration).getOffenderRegistrationsByCrnUsingGET(requestParameters.crn, requestParameters.activeOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_COMMUNITY
     * @summary Return the registrations for an offender using NOMS number
     * @param {RisksAndRegistrationsApiGetOffenderRegistrationsByNomsNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RisksAndRegistrationsApi
     */
    public getOffenderRegistrationsByNomsNumberUsingGET(requestParameters: RisksAndRegistrationsApiGetOffenderRegistrationsByNomsNumberUsingGETRequest, options?: any) {
        return RisksAndRegistrationsApiFp(this.configuration).getOffenderRegistrationsByNomsNumberUsingGET(requestParameters.nomsNumber, requestParameters.failOnDuplicate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_COMMUNITY
     * @summary Return the registrations for an offender using offenderId
     * @param {RisksAndRegistrationsApiGetOffenderRegistrationsByOffenderIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RisksAndRegistrationsApi
     */
    public getOffenderRegistrationsByOffenderIdUsingGET(requestParameters: RisksAndRegistrationsApiGetOffenderRegistrationsByOffenderIdUsingGETRequest, options?: any) {
        return RisksAndRegistrationsApiFp(this.configuration).getOffenderRegistrationsByOffenderIdUsingGET(requestParameters.offenderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_COMMUNITY
     * @summary Return the resourcing details for an offender using CRN number. Typically this is allocated or retained requiring greater resourcing. This equates to the historic NPS/CRC split for low and high risk offenders
     * @param {RisksAndRegistrationsApiGetOffenderResourcingDetailsByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RisksAndRegistrationsApi
     */
    public getOffenderResourcingDetailsByCrnUsingGET(requestParameters: RisksAndRegistrationsApiGetOffenderResourcingDetailsByCrnUsingGETRequest, options?: any) {
        return RisksAndRegistrationsApiFp(this.configuration).getOffenderResourcingDetailsByCrnUsingGET(requestParameters.crn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_COMMUNITY
     * @summary Return the resourcing details for an offender using NOMS number. Typically this is allocated or retained requiring greater resourcing. This equates to the historic NPS/CRC split for low and high risk offenders
     * @param {RisksAndRegistrationsApiGetOffenderResourcingDetailsByNomsNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RisksAndRegistrationsApi
     */
    public getOffenderResourcingDetailsByNomsNumberUsingGET(requestParameters: RisksAndRegistrationsApiGetOffenderResourcingDetailsByNomsNumberUsingGETRequest, options?: any) {
        return RisksAndRegistrationsApiFp(this.configuration).getOffenderResourcingDetailsByNomsNumberUsingGET(requestParameters.nomsNumber, options).then((request) => request(this.axios, this.basePath));
    }
}
