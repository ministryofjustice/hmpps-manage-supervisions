/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppointmentCreateRequest } from '../model';
// @ts-ignore
import { AppointmentCreateResponse } from '../model';
// @ts-ignore
import { AppointmentType } from '../model';
// @ts-ignore
import { ContextlessAppointmentCreateRequest } from '../model';
// @ts-ignore
import { ContextlessAppointmentOutcomeRequest } from '../model';
// @ts-ignore
import { ContextlessAppointmentRescheduleRequest } from '../model';
// @ts-ignore
import { ErrorResponse } from '../model';
/**
 * AppointmentsApi - axios parameter creator
 * @export
 */
export const AppointmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates an Contact appointment
         * @param {string} crn crn
         * @param {number} sentenceId sentenceId
         * @param {AppointmentCreateRequest} appointmentCreateRequest appointmentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointmentUsingPOST: async (crn: string, sentenceId: number, appointmentCreateRequest: AppointmentCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('createAppointmentUsingPOST', 'crn', crn)
            // verify required parameter 'sentenceId' is not null or undefined
            assertParamExists('createAppointmentUsingPOST', 'sentenceId', sentenceId)
            // verify required parameter 'appointmentCreateRequest' is not null or undefined
            assertParamExists('createAppointmentUsingPOST', 'appointmentCreateRequest', appointmentCreateRequest)
            const localVarPath = `/secure/offenders/crn/{crn}/sentence/{sentenceId}/appointments`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)))
                .replace(`{${"sentenceId"}}`, encodeURIComponent(String(sentenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an Contact appointment for a specified context
         * @param {string} contextName Name identifying preprocessing applied to the request
         * @param {string} crn crn
         * @param {number} sentenceId sentenceId
         * @param {ContextlessAppointmentCreateRequest} contextlessAppointmentCreateRequest contextlessAppointmentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointmentWithContextNameUsingPOST: async (contextName: string, crn: string, sentenceId: number, contextlessAppointmentCreateRequest: ContextlessAppointmentCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextName' is not null or undefined
            assertParamExists('createAppointmentWithContextNameUsingPOST', 'contextName', contextName)
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('createAppointmentWithContextNameUsingPOST', 'crn', crn)
            // verify required parameter 'sentenceId' is not null or undefined
            assertParamExists('createAppointmentWithContextNameUsingPOST', 'sentenceId', sentenceId)
            // verify required parameter 'contextlessAppointmentCreateRequest' is not null or undefined
            assertParamExists('createAppointmentWithContextNameUsingPOST', 'contextlessAppointmentCreateRequest', contextlessAppointmentCreateRequest)
            const localVarPath = `/secure/offenders/crn/{crn}/sentence/{sentenceId}/appointments/context/{contextName}`
                .replace(`{${"contextName"}}`, encodeURIComponent(String(contextName)))
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)))
                .replace(`{${"sentenceId"}}`, encodeURIComponent(String(sentenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contextlessAppointmentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Determines all valid appointment types & their meta
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAppointmentTypesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/secure/appointment-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reschedules an appointment
         * @param {number} appointmentId appointmentId
         * @param {string} contextName Name identifying preprocessing applied to the request
         * @param {string} crn crn
         * @param {ContextlessAppointmentRescheduleRequest} appointmentRescheduleRequest appointmentRescheduleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleAppointmentWithContextNameUsingPOST: async (appointmentId: number, contextName: string, crn: string, appointmentRescheduleRequest: ContextlessAppointmentRescheduleRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('rescheduleAppointmentWithContextNameUsingPOST', 'appointmentId', appointmentId)
            // verify required parameter 'contextName' is not null or undefined
            assertParamExists('rescheduleAppointmentWithContextNameUsingPOST', 'contextName', contextName)
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('rescheduleAppointmentWithContextNameUsingPOST', 'crn', crn)
            // verify required parameter 'appointmentRescheduleRequest' is not null or undefined
            assertParamExists('rescheduleAppointmentWithContextNameUsingPOST', 'appointmentRescheduleRequest', appointmentRescheduleRequest)
            const localVarPath = `/secure/offenders/crn/{crn}/appointments/{appointmentId}/reschedule/context/{contextName}`
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)))
                .replace(`{${"contextName"}}`, encodeURIComponent(String(contextName)))
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentRescheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an Contact appointment outcome
         * @param {number} appointmentId appointmentId
         * @param {string} contextName Name identifying preprocessing applied to the request
         * @param {string} crn crn
         * @param {ContextlessAppointmentOutcomeRequest} appointmentOutcomeRequest appointmentOutcomeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppointmentOutcomeWithContextUsingPOST: async (appointmentId: number, contextName: string, crn: string, appointmentOutcomeRequest: ContextlessAppointmentOutcomeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('updateAppointmentOutcomeWithContextUsingPOST', 'appointmentId', appointmentId)
            // verify required parameter 'contextName' is not null or undefined
            assertParamExists('updateAppointmentOutcomeWithContextUsingPOST', 'contextName', contextName)
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('updateAppointmentOutcomeWithContextUsingPOST', 'crn', crn)
            // verify required parameter 'appointmentOutcomeRequest' is not null or undefined
            assertParamExists('updateAppointmentOutcomeWithContextUsingPOST', 'appointmentOutcomeRequest', appointmentOutcomeRequest)
            const localVarPath = `/secure/offenders/crn/{crn}/appointments/{appointmentId}/outcome/context/{contextName}`
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)))
                .replace(`{${"contextName"}}`, encodeURIComponent(String(contextName)))
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentOutcomeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppointmentsApi - functional programming interface
 * @export
 */
export const AppointmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppointmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates an Contact appointment
         * @param {string} crn crn
         * @param {number} sentenceId sentenceId
         * @param {AppointmentCreateRequest} appointmentCreateRequest appointmentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppointmentUsingPOST(crn: string, sentenceId: number, appointmentCreateRequest: AppointmentCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAppointmentUsingPOST(crn, sentenceId, appointmentCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates an Contact appointment for a specified context
         * @param {string} contextName Name identifying preprocessing applied to the request
         * @param {string} crn crn
         * @param {number} sentenceId sentenceId
         * @param {ContextlessAppointmentCreateRequest} contextlessAppointmentCreateRequest contextlessAppointmentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppointmentWithContextNameUsingPOST(contextName: string, crn: string, sentenceId: number, contextlessAppointmentCreateRequest: ContextlessAppointmentCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAppointmentWithContextNameUsingPOST(contextName, crn, sentenceId, contextlessAppointmentCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Determines all valid appointment types & their meta
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAppointmentTypesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppointmentType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAppointmentTypesUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reschedules an appointment
         * @param {number} appointmentId appointmentId
         * @param {string} contextName Name identifying preprocessing applied to the request
         * @param {string} crn crn
         * @param {ContextlessAppointmentRescheduleRequest} appointmentRescheduleRequest appointmentRescheduleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rescheduleAppointmentWithContextNameUsingPOST(appointmentId: number, contextName: string, crn: string, appointmentRescheduleRequest: ContextlessAppointmentRescheduleRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rescheduleAppointmentWithContextNameUsingPOST(appointmentId, contextName, crn, appointmentRescheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an Contact appointment outcome
         * @param {number} appointmentId appointmentId
         * @param {string} contextName Name identifying preprocessing applied to the request
         * @param {string} crn crn
         * @param {ContextlessAppointmentOutcomeRequest} appointmentOutcomeRequest appointmentOutcomeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAppointmentOutcomeWithContextUsingPOST(appointmentId: number, contextName: string, crn: string, appointmentOutcomeRequest: ContextlessAppointmentOutcomeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAppointmentOutcomeWithContextUsingPOST(appointmentId, contextName, crn, appointmentOutcomeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppointmentsApi - factory interface
 * @export
 */
export const AppointmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppointmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates an Contact appointment
         * @param {string} crn crn
         * @param {number} sentenceId sentenceId
         * @param {AppointmentCreateRequest} appointmentCreateRequest appointmentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointmentUsingPOST(crn: string, sentenceId: number, appointmentCreateRequest: AppointmentCreateRequest, options?: any): AxiosPromise<AppointmentCreateResponse> {
            return localVarFp.createAppointmentUsingPOST(crn, sentenceId, appointmentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an Contact appointment for a specified context
         * @param {string} contextName Name identifying preprocessing applied to the request
         * @param {string} crn crn
         * @param {number} sentenceId sentenceId
         * @param {ContextlessAppointmentCreateRequest} contextlessAppointmentCreateRequest contextlessAppointmentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointmentWithContextNameUsingPOST(contextName: string, crn: string, sentenceId: number, contextlessAppointmentCreateRequest: ContextlessAppointmentCreateRequest, options?: any): AxiosPromise<AppointmentCreateResponse> {
            return localVarFp.createAppointmentWithContextNameUsingPOST(contextName, crn, sentenceId, contextlessAppointmentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Determines all valid appointment types & their meta
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAppointmentTypesUsingGET(options?: any): AxiosPromise<Array<AppointmentType>> {
            return localVarFp.getAllAppointmentTypesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reschedules an appointment
         * @param {number} appointmentId appointmentId
         * @param {string} contextName Name identifying preprocessing applied to the request
         * @param {string} crn crn
         * @param {ContextlessAppointmentRescheduleRequest} appointmentRescheduleRequest appointmentRescheduleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleAppointmentWithContextNameUsingPOST(appointmentId: number, contextName: string, crn: string, appointmentRescheduleRequest: ContextlessAppointmentRescheduleRequest, options?: any): AxiosPromise<string> {
            return localVarFp.rescheduleAppointmentWithContextNameUsingPOST(appointmentId, contextName, crn, appointmentRescheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an Contact appointment outcome
         * @param {number} appointmentId appointmentId
         * @param {string} contextName Name identifying preprocessing applied to the request
         * @param {string} crn crn
         * @param {ContextlessAppointmentOutcomeRequest} appointmentOutcomeRequest appointmentOutcomeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppointmentOutcomeWithContextUsingPOST(appointmentId: number, contextName: string, crn: string, appointmentOutcomeRequest: ContextlessAppointmentOutcomeRequest, options?: any): AxiosPromise<string> {
            return localVarFp.updateAppointmentOutcomeWithContextUsingPOST(appointmentId, contextName, crn, appointmentOutcomeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAppointmentUsingPOST operation in AppointmentsApi.
 * @export
 * @interface AppointmentsApiCreateAppointmentUsingPOSTRequest
 */
export interface AppointmentsApiCreateAppointmentUsingPOSTRequest {
    /**
     * crn
     * @type {string}
     * @memberof AppointmentsApiCreateAppointmentUsingPOST
     */
    readonly crn: string

    /**
     * sentenceId
     * @type {number}
     * @memberof AppointmentsApiCreateAppointmentUsingPOST
     */
    readonly sentenceId: number

    /**
     * appointmentCreateRequest
     * @type {AppointmentCreateRequest}
     * @memberof AppointmentsApiCreateAppointmentUsingPOST
     */
    readonly appointmentCreateRequest: AppointmentCreateRequest
}

/**
 * Request parameters for createAppointmentWithContextNameUsingPOST operation in AppointmentsApi.
 * @export
 * @interface AppointmentsApiCreateAppointmentWithContextNameUsingPOSTRequest
 */
export interface AppointmentsApiCreateAppointmentWithContextNameUsingPOSTRequest {
    /**
     * Name identifying preprocessing applied to the request
     * @type {string}
     * @memberof AppointmentsApiCreateAppointmentWithContextNameUsingPOST
     */
    readonly contextName: string

    /**
     * crn
     * @type {string}
     * @memberof AppointmentsApiCreateAppointmentWithContextNameUsingPOST
     */
    readonly crn: string

    /**
     * sentenceId
     * @type {number}
     * @memberof AppointmentsApiCreateAppointmentWithContextNameUsingPOST
     */
    readonly sentenceId: number

    /**
     * contextlessAppointmentCreateRequest
     * @type {ContextlessAppointmentCreateRequest}
     * @memberof AppointmentsApiCreateAppointmentWithContextNameUsingPOST
     */
    readonly contextlessAppointmentCreateRequest: ContextlessAppointmentCreateRequest
}

/**
 * Request parameters for rescheduleAppointmentWithContextNameUsingPOST operation in AppointmentsApi.
 * @export
 * @interface AppointmentsApiRescheduleAppointmentWithContextNameUsingPOSTRequest
 */
export interface AppointmentsApiRescheduleAppointmentWithContextNameUsingPOSTRequest {
    /**
     * appointmentId
     * @type {number}
     * @memberof AppointmentsApiRescheduleAppointmentWithContextNameUsingPOST
     */
    readonly appointmentId: number

    /**
     * Name identifying preprocessing applied to the request
     * @type {string}
     * @memberof AppointmentsApiRescheduleAppointmentWithContextNameUsingPOST
     */
    readonly contextName: string

    /**
     * crn
     * @type {string}
     * @memberof AppointmentsApiRescheduleAppointmentWithContextNameUsingPOST
     */
    readonly crn: string

    /**
     * appointmentRescheduleRequest
     * @type {ContextlessAppointmentRescheduleRequest}
     * @memberof AppointmentsApiRescheduleAppointmentWithContextNameUsingPOST
     */
    readonly appointmentRescheduleRequest: ContextlessAppointmentRescheduleRequest
}

/**
 * Request parameters for updateAppointmentOutcomeWithContextUsingPOST operation in AppointmentsApi.
 * @export
 * @interface AppointmentsApiUpdateAppointmentOutcomeWithContextUsingPOSTRequest
 */
export interface AppointmentsApiUpdateAppointmentOutcomeWithContextUsingPOSTRequest {
    /**
     * appointmentId
     * @type {number}
     * @memberof AppointmentsApiUpdateAppointmentOutcomeWithContextUsingPOST
     */
    readonly appointmentId: number

    /**
     * Name identifying preprocessing applied to the request
     * @type {string}
     * @memberof AppointmentsApiUpdateAppointmentOutcomeWithContextUsingPOST
     */
    readonly contextName: string

    /**
     * crn
     * @type {string}
     * @memberof AppointmentsApiUpdateAppointmentOutcomeWithContextUsingPOST
     */
    readonly crn: string

    /**
     * appointmentOutcomeRequest
     * @type {ContextlessAppointmentOutcomeRequest}
     * @memberof AppointmentsApiUpdateAppointmentOutcomeWithContextUsingPOST
     */
    readonly appointmentOutcomeRequest: ContextlessAppointmentOutcomeRequest
}

/**
 * AppointmentsApi - object-oriented interface
 * @export
 * @class AppointmentsApi
 * @extends {BaseAPI}
 */
export class AppointmentsApi extends BaseAPI {
    /**
     * 
     * @summary Creates an Contact appointment
     * @param {AppointmentsApiCreateAppointmentUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsApi
     */
    public createAppointmentUsingPOST(requestParameters: AppointmentsApiCreateAppointmentUsingPOSTRequest, options?: any) {
        return AppointmentsApiFp(this.configuration).createAppointmentUsingPOST(requestParameters.crn, requestParameters.sentenceId, requestParameters.appointmentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an Contact appointment for a specified context
     * @param {AppointmentsApiCreateAppointmentWithContextNameUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsApi
     */
    public createAppointmentWithContextNameUsingPOST(requestParameters: AppointmentsApiCreateAppointmentWithContextNameUsingPOSTRequest, options?: any) {
        return AppointmentsApiFp(this.configuration).createAppointmentWithContextNameUsingPOST(requestParameters.contextName, requestParameters.crn, requestParameters.sentenceId, requestParameters.contextlessAppointmentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Determines all valid appointment types & their meta
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsApi
     */
    public getAllAppointmentTypesUsingGET(options?: any) {
        return AppointmentsApiFp(this.configuration).getAllAppointmentTypesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reschedules an appointment
     * @param {AppointmentsApiRescheduleAppointmentWithContextNameUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsApi
     */
    public rescheduleAppointmentWithContextNameUsingPOST(requestParameters: AppointmentsApiRescheduleAppointmentWithContextNameUsingPOSTRequest, options?: any) {
        return AppointmentsApiFp(this.configuration).rescheduleAppointmentWithContextNameUsingPOST(requestParameters.appointmentId, requestParameters.contextName, requestParameters.crn, requestParameters.appointmentRescheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an Contact appointment outcome
     * @param {AppointmentsApiUpdateAppointmentOutcomeWithContextUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsApi
     */
    public updateAppointmentOutcomeWithContextUsingPOST(requestParameters: AppointmentsApiUpdateAppointmentOutcomeWithContextUsingPOSTRequest, options?: any) {
        return AppointmentsApiFp(this.configuration).updateAppointmentOutcomeWithContextUsingPOST(requestParameters.appointmentId, requestParameters.contextName, requestParameters.crn, requestParameters.appointmentOutcomeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
