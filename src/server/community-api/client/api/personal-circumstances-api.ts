/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { PersonalCircumstances } from '../model';
/**
 * PersonalCircumstancesApi - axios parameter creator
 * @export
 */
export const PersonalCircumstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the personal circumstances for an offender using crn
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderPersonalCircumstancesByCrnUsingGET: async (crn: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getOffenderPersonalCircumstancesByCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/personalCircumstances`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the personal circumstances for an offender using noms number
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderPersonalCircumstancesByNomsNumberUsingGET: async (nomsNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getOffenderPersonalCircumstancesByNomsNumberUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/personalCircumstances`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the personal circumstances for an offender using offenderId
         * @param {number} offenderId offenderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderPersonalCircumstancesByOffenderIdUsingGET: async (offenderId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offenderId' is not null or undefined
            assertParamExists('getOffenderPersonalCircumstancesByOffenderIdUsingGET', 'offenderId', offenderId)
            const localVarPath = `/secure/offenders/offenderId/{offenderId}/personalCircumstances`
                .replace(`{${"offenderId"}}`, encodeURIComponent(String(offenderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonalCircumstancesApi - functional programming interface
 * @export
 */
export const PersonalCircumstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonalCircumstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the personal circumstances for an offender using crn
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderPersonalCircumstancesByCrnUsingGET(crn: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalCircumstances>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderPersonalCircumstancesByCrnUsingGET(crn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the personal circumstances for an offender using noms number
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderPersonalCircumstancesByNomsNumberUsingGET(nomsNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalCircumstances>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderPersonalCircumstancesByNomsNumberUsingGET(nomsNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the personal circumstances for an offender using offenderId
         * @param {number} offenderId offenderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderPersonalCircumstancesByOffenderIdUsingGET(offenderId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalCircumstances>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderPersonalCircumstancesByOffenderIdUsingGET(offenderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PersonalCircumstancesApi - factory interface
 * @export
 */
export const PersonalCircumstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonalCircumstancesApiFp(configuration)
    return {
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the personal circumstances for an offender using crn
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderPersonalCircumstancesByCrnUsingGET(crn: string, options?: any): AxiosPromise<PersonalCircumstances> {
            return localVarFp.getOffenderPersonalCircumstancesByCrnUsingGET(crn, options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the personal circumstances for an offender using noms number
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderPersonalCircumstancesByNomsNumberUsingGET(nomsNumber: string, options?: any): AxiosPromise<PersonalCircumstances> {
            return localVarFp.getOffenderPersonalCircumstancesByNomsNumberUsingGET(nomsNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_COMMUNITY
         * @summary Return the personal circumstances for an offender using offenderId
         * @param {number} offenderId offenderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderPersonalCircumstancesByOffenderIdUsingGET(offenderId: number, options?: any): AxiosPromise<PersonalCircumstances> {
            return localVarFp.getOffenderPersonalCircumstancesByOffenderIdUsingGET(offenderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getOffenderPersonalCircumstancesByCrnUsingGET operation in PersonalCircumstancesApi.
 * @export
 * @interface PersonalCircumstancesApiGetOffenderPersonalCircumstancesByCrnUsingGETRequest
 */
export interface PersonalCircumstancesApiGetOffenderPersonalCircumstancesByCrnUsingGETRequest {
    /**
     * crn
     * @type {string}
     * @memberof PersonalCircumstancesApiGetOffenderPersonalCircumstancesByCrnUsingGET
     */
    readonly crn: string
}

/**
 * Request parameters for getOffenderPersonalCircumstancesByNomsNumberUsingGET operation in PersonalCircumstancesApi.
 * @export
 * @interface PersonalCircumstancesApiGetOffenderPersonalCircumstancesByNomsNumberUsingGETRequest
 */
export interface PersonalCircumstancesApiGetOffenderPersonalCircumstancesByNomsNumberUsingGETRequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof PersonalCircumstancesApiGetOffenderPersonalCircumstancesByNomsNumberUsingGET
     */
    readonly nomsNumber: string
}

/**
 * Request parameters for getOffenderPersonalCircumstancesByOffenderIdUsingGET operation in PersonalCircumstancesApi.
 * @export
 * @interface PersonalCircumstancesApiGetOffenderPersonalCircumstancesByOffenderIdUsingGETRequest
 */
export interface PersonalCircumstancesApiGetOffenderPersonalCircumstancesByOffenderIdUsingGETRequest {
    /**
     * offenderId
     * @type {number}
     * @memberof PersonalCircumstancesApiGetOffenderPersonalCircumstancesByOffenderIdUsingGET
     */
    readonly offenderId: number
}

/**
 * PersonalCircumstancesApi - object-oriented interface
 * @export
 * @class PersonalCircumstancesApi
 * @extends {BaseAPI}
 */
export class PersonalCircumstancesApi extends BaseAPI {
    /**
     * requires ROLE_COMMUNITY
     * @summary Return the personal circumstances for an offender using crn
     * @param {PersonalCircumstancesApiGetOffenderPersonalCircumstancesByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalCircumstancesApi
     */
    public getOffenderPersonalCircumstancesByCrnUsingGET(requestParameters: PersonalCircumstancesApiGetOffenderPersonalCircumstancesByCrnUsingGETRequest, options?: any) {
        return PersonalCircumstancesApiFp(this.configuration).getOffenderPersonalCircumstancesByCrnUsingGET(requestParameters.crn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_COMMUNITY
     * @summary Return the personal circumstances for an offender using noms number
     * @param {PersonalCircumstancesApiGetOffenderPersonalCircumstancesByNomsNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalCircumstancesApi
     */
    public getOffenderPersonalCircumstancesByNomsNumberUsingGET(requestParameters: PersonalCircumstancesApiGetOffenderPersonalCircumstancesByNomsNumberUsingGETRequest, options?: any) {
        return PersonalCircumstancesApiFp(this.configuration).getOffenderPersonalCircumstancesByNomsNumberUsingGET(requestParameters.nomsNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_COMMUNITY
     * @summary Return the personal circumstances for an offender using offenderId
     * @param {PersonalCircumstancesApiGetOffenderPersonalCircumstancesByOffenderIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalCircumstancesApi
     */
    public getOffenderPersonalCircumstancesByOffenderIdUsingGET(requestParameters: PersonalCircumstancesApiGetOffenderPersonalCircumstancesByOffenderIdUsingGETRequest, options?: any) {
        return PersonalCircumstancesApiFp(this.configuration).getOffenderPersonalCircumstancesByOffenderIdUsingGET(requestParameters.offenderId, options).then((request) => request(this.axios, this.basePath));
    }
}
