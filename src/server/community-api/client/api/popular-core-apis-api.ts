/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommunityOrPrisonOffenderManager } from '../model';
// @ts-ignore
import { Conviction } from '../model';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { OffenderDetail } from '../model';
// @ts-ignore
import { OffenderDetailSummary } from '../model';
// @ts-ignore
import { ProbationStatusDetail } from '../model';
/**
 * PopularCoreAPIsApi - axios parameter creator
 * @export
 */
export const PopularCoreAPIsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accepts a NOMIS offender nomsNumber in the format A9999AA
         * @summary Returns the current community and prison offender managers for an offender
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [includeProbationAreaTeams] include teams on the ProbationArea records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOffenderManagersForOffenderUsingGET: async (nomsNumber: string, includeProbationAreaTeams?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getAllOffenderManagersForOffenderUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/allOffenderManagers`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeProbationAreaTeams !== undefined) {
                localVarQueryParameter['includeProbationAreaTeams'] = includeProbationAreaTeams;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts an offender CRN in the format A999999
         * @summary Returns the current community and prison offender managers for an offender
         * @param {string} crn CRN for the offender
         * @param {boolean} [includeProbationAreaTeams] include teams on the ProbationArea records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOffenderManagersForOffenderbyCrnUsingGET: async (crn: string, includeProbationAreaTeams?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getAllOffenderManagersForOffenderbyCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/allOffenderManagers`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeProbationAreaTeams !== undefined) {
                localVarQueryParameter['includeProbationAreaTeams'] = includeProbationAreaTeams;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the conviction (AKA Delius Event) for a conviction ID and a CRN
         * @param {number} convictionId ID for the conviction / event
         * @param {string} crn CRN for the offender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConvictionForOffenderByCrnAndConvictionIdUsingGET: async (convictionId: number, crn: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'convictionId' is not null or undefined
            assertParamExists('getConvictionForOffenderByCrnAndConvictionIdUsingGET', 'convictionId', convictionId)
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getConvictionForOffenderByCrnAndConvictionIdUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/convictions/{convictionId}`
                .replace(`{${"convictionId"}}`, encodeURIComponent(String(convictionId)))
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the convictions (AKA Delius Event) for an offender
         * @param {string} crn CRN for the offender
         * @param {boolean} [activeOnly] retrieve only active convictions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConvictionsForOffenderByCrnUsingGET: async (crn: string, activeOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getConvictionsForOffenderByCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/convictions`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (activeOnly !== undefined) {
                localVarQueryParameter['activeOnly'] = activeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the convictions (AKA Delius Event) for an offender
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [activeOnly] retrieve only active convictions
         * @param {boolean} [failOnDuplicate] Should fail if multiple offenders found regardless of status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConvictionsForOffenderUsingGET: async (nomsNumber: string, activeOnly?: boolean, failOnDuplicate?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getConvictionsForOffenderUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/convictions`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (activeOnly !== undefined) {
                localVarQueryParameter['activeOnly'] = activeOnly;
            }

            if (failOnDuplicate !== undefined) {
                localVarQueryParameter['failOnDuplicate'] = failOnDuplicate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the convictions (AKA Delius Event) for an offender that contain RAR
         * @param {string} crn CRN for the offender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderConvictionsWithRarByCrnUsingGET: async (crn: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getOffenderConvictionsWithRarByCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/convictions-with-rar`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the full offender detail for the given crn
         * @param {string} crn crn
         * @param {boolean} [authenticated] 
         * @param {string} [authorities0Authority] 
         * @param {object} [credentials] 
         * @param {object} [details] 
         * @param {object} [principal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDetailByCrnUsingGET: async (crn: string, authenticated?: boolean, authorities0Authority?: string, credentials?: object, details?: object, principal?: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getOffenderDetailByCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/all`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authenticated !== undefined) {
                localVarQueryParameter['authenticated'] = authenticated;
            }

            if (authorities0Authority !== undefined) {
                localVarQueryParameter['authorities[0].authority'] = authorities0Authority;
            }

            if (credentials !== undefined) {
                localVarQueryParameter['credentials'] = credentials;
            }

            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }

            if (principal !== undefined) {
                localVarQueryParameter['principal'] = principal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the full offender detail for the given nomsNumber. If multiple offender found the active one will be returned
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [failOnDuplicate] Should fail if multiple offenders found
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDetailByNomsNumberUsingGET: async (nomsNumber: string, failOnDuplicate?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getOffenderDetailByNomsNumberUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/all`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (failOnDuplicate !== undefined) {
                localVarQueryParameter['failOnDuplicate'] = failOnDuplicate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the details for an offender. If multiple offenders found the active one wll be returned
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [failOnDuplicate] Should fail if multiple offenders found regardless of status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDetailsUsingGET: async (nomsNumber: string, failOnDuplicate?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getOffenderDetailsUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (failOnDuplicate !== undefined) {
                localVarQueryParameter['failOnDuplicate'] = failOnDuplicate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the probation status for the given crn
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderProbationStatusByCrnUsingGET: async (crn: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getOffenderProbationStatusByCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/probationStatus`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the offender summary for the given crn
         * @param {string} crn crn
         * @param {boolean} [authenticated] 
         * @param {string} [authorities0Authority] 
         * @param {object} [credentials] 
         * @param {object} [details] 
         * @param {object} [principal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderSummaryByCrnUsingGET: async (crn: string, authenticated?: boolean, authorities0Authority?: string, credentials?: object, details?: object, principal?: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getOffenderSummaryByCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authenticated !== undefined) {
                localVarQueryParameter['authenticated'] = authenticated;
            }

            if (authorities0Authority !== undefined) {
                localVarQueryParameter['authorities[0].authority'] = authorities0Authority;
            }

            if (credentials !== undefined) {
                localVarQueryParameter['credentials'] = credentials;
            }

            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }

            if (principal !== undefined) {
                localVarQueryParameter['principal'] = principal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PopularCoreAPIsApi - functional programming interface
 * @export
 */
export const PopularCoreAPIsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PopularCoreAPIsApiAxiosParamCreator(configuration)
    return {
        /**
         * Accepts a NOMIS offender nomsNumber in the format A9999AA
         * @summary Returns the current community and prison offender managers for an offender
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [includeProbationAreaTeams] include teams on the ProbationArea records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOffenderManagersForOffenderUsingGET(nomsNumber: string, includeProbationAreaTeams?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommunityOrPrisonOffenderManager>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOffenderManagersForOffenderUsingGET(nomsNumber, includeProbationAreaTeams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts an offender CRN in the format A999999
         * @summary Returns the current community and prison offender managers for an offender
         * @param {string} crn CRN for the offender
         * @param {boolean} [includeProbationAreaTeams] include teams on the ProbationArea records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOffenderManagersForOffenderbyCrnUsingGET(crn: string, includeProbationAreaTeams?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommunityOrPrisonOffenderManager>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOffenderManagersForOffenderbyCrnUsingGET(crn, includeProbationAreaTeams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return the conviction (AKA Delius Event) for a conviction ID and a CRN
         * @param {number} convictionId ID for the conviction / event
         * @param {string} crn CRN for the offender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConvictionForOffenderByCrnAndConvictionIdUsingGET(convictionId: number, crn: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Conviction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConvictionForOffenderByCrnAndConvictionIdUsingGET(convictionId, crn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return the convictions (AKA Delius Event) for an offender
         * @param {string} crn CRN for the offender
         * @param {boolean} [activeOnly] retrieve only active convictions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConvictionsForOffenderByCrnUsingGET(crn: string, activeOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Conviction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConvictionsForOffenderByCrnUsingGET(crn, activeOnly, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return the convictions (AKA Delius Event) for an offender
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [activeOnly] retrieve only active convictions
         * @param {boolean} [failOnDuplicate] Should fail if multiple offenders found regardless of status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConvictionsForOffenderUsingGET(nomsNumber: string, activeOnly?: boolean, failOnDuplicate?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Conviction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConvictionsForOffenderUsingGET(nomsNumber, activeOnly, failOnDuplicate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return the convictions (AKA Delius Event) for an offender that contain RAR
         * @param {string} crn CRN for the offender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderConvictionsWithRarByCrnUsingGET(crn: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Conviction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderConvictionsWithRarByCrnUsingGET(crn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the full offender detail for the given crn
         * @param {string} crn crn
         * @param {boolean} [authenticated] 
         * @param {string} [authorities0Authority] 
         * @param {object} [credentials] 
         * @param {object} [details] 
         * @param {object} [principal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderDetailByCrnUsingGET(crn: string, authenticated?: boolean, authorities0Authority?: string, credentials?: object, details?: object, principal?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OffenderDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderDetailByCrnUsingGET(crn, authenticated, authorities0Authority, credentials, details, principal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the full offender detail for the given nomsNumber. If multiple offender found the active one will be returned
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [failOnDuplicate] Should fail if multiple offenders found
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderDetailByNomsNumberUsingGET(nomsNumber: string, failOnDuplicate?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OffenderDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderDetailByNomsNumberUsingGET(nomsNumber, failOnDuplicate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return the details for an offender. If multiple offenders found the active one wll be returned
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [failOnDuplicate] Should fail if multiple offenders found regardless of status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderDetailsUsingGET(nomsNumber: string, failOnDuplicate?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OffenderDetailSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderDetailsUsingGET(nomsNumber, failOnDuplicate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the probation status for the given crn
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderProbationStatusByCrnUsingGET(crn: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProbationStatusDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderProbationStatusByCrnUsingGET(crn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the offender summary for the given crn
         * @param {string} crn crn
         * @param {boolean} [authenticated] 
         * @param {string} [authorities0Authority] 
         * @param {object} [credentials] 
         * @param {object} [details] 
         * @param {object} [principal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderSummaryByCrnUsingGET(crn: string, authenticated?: boolean, authorities0Authority?: string, credentials?: object, details?: object, principal?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OffenderDetailSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderSummaryByCrnUsingGET(crn, authenticated, authorities0Authority, credentials, details, principal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PopularCoreAPIsApi - factory interface
 * @export
 */
export const PopularCoreAPIsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PopularCoreAPIsApiFp(configuration)
    return {
        /**
         * Accepts a NOMIS offender nomsNumber in the format A9999AA
         * @summary Returns the current community and prison offender managers for an offender
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [includeProbationAreaTeams] include teams on the ProbationArea records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOffenderManagersForOffenderUsingGET(nomsNumber: string, includeProbationAreaTeams?: boolean, options?: any): AxiosPromise<Array<CommunityOrPrisonOffenderManager>> {
            return localVarFp.getAllOffenderManagersForOffenderUsingGET(nomsNumber, includeProbationAreaTeams, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts an offender CRN in the format A999999
         * @summary Returns the current community and prison offender managers for an offender
         * @param {string} crn CRN for the offender
         * @param {boolean} [includeProbationAreaTeams] include teams on the ProbationArea records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOffenderManagersForOffenderbyCrnUsingGET(crn: string, includeProbationAreaTeams?: boolean, options?: any): AxiosPromise<Array<CommunityOrPrisonOffenderManager>> {
            return localVarFp.getAllOffenderManagersForOffenderbyCrnUsingGET(crn, includeProbationAreaTeams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return the conviction (AKA Delius Event) for a conviction ID and a CRN
         * @param {number} convictionId ID for the conviction / event
         * @param {string} crn CRN for the offender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConvictionForOffenderByCrnAndConvictionIdUsingGET(convictionId: number, crn: string, options?: any): AxiosPromise<Conviction> {
            return localVarFp.getConvictionForOffenderByCrnAndConvictionIdUsingGET(convictionId, crn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return the convictions (AKA Delius Event) for an offender
         * @param {string} crn CRN for the offender
         * @param {boolean} [activeOnly] retrieve only active convictions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConvictionsForOffenderByCrnUsingGET(crn: string, activeOnly?: boolean, options?: any): AxiosPromise<Array<Conviction>> {
            return localVarFp.getConvictionsForOffenderByCrnUsingGET(crn, activeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return the convictions (AKA Delius Event) for an offender
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [activeOnly] retrieve only active convictions
         * @param {boolean} [failOnDuplicate] Should fail if multiple offenders found regardless of status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConvictionsForOffenderUsingGET(nomsNumber: string, activeOnly?: boolean, failOnDuplicate?: boolean, options?: any): AxiosPromise<Array<Conviction>> {
            return localVarFp.getConvictionsForOffenderUsingGET(nomsNumber, activeOnly, failOnDuplicate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return the convictions (AKA Delius Event) for an offender that contain RAR
         * @param {string} crn CRN for the offender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderConvictionsWithRarByCrnUsingGET(crn: string, options?: any): AxiosPromise<Array<Conviction>> {
            return localVarFp.getOffenderConvictionsWithRarByCrnUsingGET(crn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the full offender detail for the given crn
         * @param {string} crn crn
         * @param {boolean} [authenticated] 
         * @param {string} [authorities0Authority] 
         * @param {object} [credentials] 
         * @param {object} [details] 
         * @param {object} [principal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDetailByCrnUsingGET(crn: string, authenticated?: boolean, authorities0Authority?: string, credentials?: object, details?: object, principal?: object, options?: any): AxiosPromise<OffenderDetail> {
            return localVarFp.getOffenderDetailByCrnUsingGET(crn, authenticated, authorities0Authority, credentials, details, principal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the full offender detail for the given nomsNumber. If multiple offender found the active one will be returned
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [failOnDuplicate] Should fail if multiple offenders found
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDetailByNomsNumberUsingGET(nomsNumber: string, failOnDuplicate?: boolean, options?: any): AxiosPromise<OffenderDetail> {
            return localVarFp.getOffenderDetailByNomsNumberUsingGET(nomsNumber, failOnDuplicate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return the details for an offender. If multiple offenders found the active one wll be returned
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [failOnDuplicate] Should fail if multiple offenders found regardless of status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDetailsUsingGET(nomsNumber: string, failOnDuplicate?: boolean, options?: any): AxiosPromise<OffenderDetailSummary> {
            return localVarFp.getOffenderDetailsUsingGET(nomsNumber, failOnDuplicate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the probation status for the given crn
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderProbationStatusByCrnUsingGET(crn: string, options?: any): AxiosPromise<ProbationStatusDetail> {
            return localVarFp.getOffenderProbationStatusByCrnUsingGET(crn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the offender summary for the given crn
         * @param {string} crn crn
         * @param {boolean} [authenticated] 
         * @param {string} [authorities0Authority] 
         * @param {object} [credentials] 
         * @param {object} [details] 
         * @param {object} [principal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderSummaryByCrnUsingGET(crn: string, authenticated?: boolean, authorities0Authority?: string, credentials?: object, details?: object, principal?: object, options?: any): AxiosPromise<OffenderDetailSummary> {
            return localVarFp.getOffenderSummaryByCrnUsingGET(crn, authenticated, authorities0Authority, credentials, details, principal, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllOffenderManagersForOffenderUsingGET operation in PopularCoreAPIsApi.
 * @export
 * @interface PopularCoreAPIsApiGetAllOffenderManagersForOffenderUsingGETRequest
 */
export interface PopularCoreAPIsApiGetAllOffenderManagersForOffenderUsingGETRequest {
    /**
     * Nomis number for the offender
     * @type {string}
     * @memberof PopularCoreAPIsApiGetAllOffenderManagersForOffenderUsingGET
     */
    readonly nomsNumber: string

    /**
     * include teams on the ProbationArea records
     * @type {boolean}
     * @memberof PopularCoreAPIsApiGetAllOffenderManagersForOffenderUsingGET
     */
    readonly includeProbationAreaTeams?: boolean
}

/**
 * Request parameters for getAllOffenderManagersForOffenderbyCrnUsingGET operation in PopularCoreAPIsApi.
 * @export
 * @interface PopularCoreAPIsApiGetAllOffenderManagersForOffenderbyCrnUsingGETRequest
 */
export interface PopularCoreAPIsApiGetAllOffenderManagersForOffenderbyCrnUsingGETRequest {
    /**
     * CRN for the offender
     * @type {string}
     * @memberof PopularCoreAPIsApiGetAllOffenderManagersForOffenderbyCrnUsingGET
     */
    readonly crn: string

    /**
     * include teams on the ProbationArea records
     * @type {boolean}
     * @memberof PopularCoreAPIsApiGetAllOffenderManagersForOffenderbyCrnUsingGET
     */
    readonly includeProbationAreaTeams?: boolean
}

/**
 * Request parameters for getConvictionForOffenderByCrnAndConvictionIdUsingGET operation in PopularCoreAPIsApi.
 * @export
 * @interface PopularCoreAPIsApiGetConvictionForOffenderByCrnAndConvictionIdUsingGETRequest
 */
export interface PopularCoreAPIsApiGetConvictionForOffenderByCrnAndConvictionIdUsingGETRequest {
    /**
     * ID for the conviction / event
     * @type {number}
     * @memberof PopularCoreAPIsApiGetConvictionForOffenderByCrnAndConvictionIdUsingGET
     */
    readonly convictionId: number

    /**
     * CRN for the offender
     * @type {string}
     * @memberof PopularCoreAPIsApiGetConvictionForOffenderByCrnAndConvictionIdUsingGET
     */
    readonly crn: string
}

/**
 * Request parameters for getConvictionsForOffenderByCrnUsingGET operation in PopularCoreAPIsApi.
 * @export
 * @interface PopularCoreAPIsApiGetConvictionsForOffenderByCrnUsingGETRequest
 */
export interface PopularCoreAPIsApiGetConvictionsForOffenderByCrnUsingGETRequest {
    /**
     * CRN for the offender
     * @type {string}
     * @memberof PopularCoreAPIsApiGetConvictionsForOffenderByCrnUsingGET
     */
    readonly crn: string

    /**
     * retrieve only active convictions
     * @type {boolean}
     * @memberof PopularCoreAPIsApiGetConvictionsForOffenderByCrnUsingGET
     */
    readonly activeOnly?: boolean
}

/**
 * Request parameters for getConvictionsForOffenderUsingGET operation in PopularCoreAPIsApi.
 * @export
 * @interface PopularCoreAPIsApiGetConvictionsForOffenderUsingGETRequest
 */
export interface PopularCoreAPIsApiGetConvictionsForOffenderUsingGETRequest {
    /**
     * Nomis number for the offender
     * @type {string}
     * @memberof PopularCoreAPIsApiGetConvictionsForOffenderUsingGET
     */
    readonly nomsNumber: string

    /**
     * retrieve only active convictions
     * @type {boolean}
     * @memberof PopularCoreAPIsApiGetConvictionsForOffenderUsingGET
     */
    readonly activeOnly?: boolean

    /**
     * Should fail if multiple offenders found regardless of status
     * @type {boolean}
     * @memberof PopularCoreAPIsApiGetConvictionsForOffenderUsingGET
     */
    readonly failOnDuplicate?: boolean
}

/**
 * Request parameters for getOffenderConvictionsWithRarByCrnUsingGET operation in PopularCoreAPIsApi.
 * @export
 * @interface PopularCoreAPIsApiGetOffenderConvictionsWithRarByCrnUsingGETRequest
 */
export interface PopularCoreAPIsApiGetOffenderConvictionsWithRarByCrnUsingGETRequest {
    /**
     * CRN for the offender
     * @type {string}
     * @memberof PopularCoreAPIsApiGetOffenderConvictionsWithRarByCrnUsingGET
     */
    readonly crn: string
}

/**
 * Request parameters for getOffenderDetailByCrnUsingGET operation in PopularCoreAPIsApi.
 * @export
 * @interface PopularCoreAPIsApiGetOffenderDetailByCrnUsingGETRequest
 */
export interface PopularCoreAPIsApiGetOffenderDetailByCrnUsingGETRequest {
    /**
     * crn
     * @type {string}
     * @memberof PopularCoreAPIsApiGetOffenderDetailByCrnUsingGET
     */
    readonly crn: string

    /**
     * 
     * @type {boolean}
     * @memberof PopularCoreAPIsApiGetOffenderDetailByCrnUsingGET
     */
    readonly authenticated?: boolean

    /**
     * 
     * @type {string}
     * @memberof PopularCoreAPIsApiGetOffenderDetailByCrnUsingGET
     */
    readonly authorities0Authority?: string

    /**
     * 
     * @type {object}
     * @memberof PopularCoreAPIsApiGetOffenderDetailByCrnUsingGET
     */
    readonly credentials?: object

    /**
     * 
     * @type {object}
     * @memberof PopularCoreAPIsApiGetOffenderDetailByCrnUsingGET
     */
    readonly details?: object

    /**
     * 
     * @type {object}
     * @memberof PopularCoreAPIsApiGetOffenderDetailByCrnUsingGET
     */
    readonly principal?: object
}

/**
 * Request parameters for getOffenderDetailByNomsNumberUsingGET operation in PopularCoreAPIsApi.
 * @export
 * @interface PopularCoreAPIsApiGetOffenderDetailByNomsNumberUsingGETRequest
 */
export interface PopularCoreAPIsApiGetOffenderDetailByNomsNumberUsingGETRequest {
    /**
     * Nomis number for the offender
     * @type {string}
     * @memberof PopularCoreAPIsApiGetOffenderDetailByNomsNumberUsingGET
     */
    readonly nomsNumber: string

    /**
     * Should fail if multiple offenders found
     * @type {boolean}
     * @memberof PopularCoreAPIsApiGetOffenderDetailByNomsNumberUsingGET
     */
    readonly failOnDuplicate?: boolean
}

/**
 * Request parameters for getOffenderDetailsUsingGET operation in PopularCoreAPIsApi.
 * @export
 * @interface PopularCoreAPIsApiGetOffenderDetailsUsingGETRequest
 */
export interface PopularCoreAPIsApiGetOffenderDetailsUsingGETRequest {
    /**
     * Nomis number for the offender
     * @type {string}
     * @memberof PopularCoreAPIsApiGetOffenderDetailsUsingGET
     */
    readonly nomsNumber: string

    /**
     * Should fail if multiple offenders found regardless of status
     * @type {boolean}
     * @memberof PopularCoreAPIsApiGetOffenderDetailsUsingGET
     */
    readonly failOnDuplicate?: boolean
}

/**
 * Request parameters for getOffenderProbationStatusByCrnUsingGET operation in PopularCoreAPIsApi.
 * @export
 * @interface PopularCoreAPIsApiGetOffenderProbationStatusByCrnUsingGETRequest
 */
export interface PopularCoreAPIsApiGetOffenderProbationStatusByCrnUsingGETRequest {
    /**
     * crn
     * @type {string}
     * @memberof PopularCoreAPIsApiGetOffenderProbationStatusByCrnUsingGET
     */
    readonly crn: string
}

/**
 * Request parameters for getOffenderSummaryByCrnUsingGET operation in PopularCoreAPIsApi.
 * @export
 * @interface PopularCoreAPIsApiGetOffenderSummaryByCrnUsingGETRequest
 */
export interface PopularCoreAPIsApiGetOffenderSummaryByCrnUsingGETRequest {
    /**
     * crn
     * @type {string}
     * @memberof PopularCoreAPIsApiGetOffenderSummaryByCrnUsingGET
     */
    readonly crn: string

    /**
     * 
     * @type {boolean}
     * @memberof PopularCoreAPIsApiGetOffenderSummaryByCrnUsingGET
     */
    readonly authenticated?: boolean

    /**
     * 
     * @type {string}
     * @memberof PopularCoreAPIsApiGetOffenderSummaryByCrnUsingGET
     */
    readonly authorities0Authority?: string

    /**
     * 
     * @type {object}
     * @memberof PopularCoreAPIsApiGetOffenderSummaryByCrnUsingGET
     */
    readonly credentials?: object

    /**
     * 
     * @type {object}
     * @memberof PopularCoreAPIsApiGetOffenderSummaryByCrnUsingGET
     */
    readonly details?: object

    /**
     * 
     * @type {object}
     * @memberof PopularCoreAPIsApiGetOffenderSummaryByCrnUsingGET
     */
    readonly principal?: object
}

/**
 * PopularCoreAPIsApi - object-oriented interface
 * @export
 * @class PopularCoreAPIsApi
 * @extends {BaseAPI}
 */
export class PopularCoreAPIsApi extends BaseAPI {
    /**
     * Accepts a NOMIS offender nomsNumber in the format A9999AA
     * @summary Returns the current community and prison offender managers for an offender
     * @param {PopularCoreAPIsApiGetAllOffenderManagersForOffenderUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopularCoreAPIsApi
     */
    public getAllOffenderManagersForOffenderUsingGET(requestParameters: PopularCoreAPIsApiGetAllOffenderManagersForOffenderUsingGETRequest, options?: any) {
        return PopularCoreAPIsApiFp(this.configuration).getAllOffenderManagersForOffenderUsingGET(requestParameters.nomsNumber, requestParameters.includeProbationAreaTeams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts an offender CRN in the format A999999
     * @summary Returns the current community and prison offender managers for an offender
     * @param {PopularCoreAPIsApiGetAllOffenderManagersForOffenderbyCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopularCoreAPIsApi
     */
    public getAllOffenderManagersForOffenderbyCrnUsingGET(requestParameters: PopularCoreAPIsApiGetAllOffenderManagersForOffenderbyCrnUsingGETRequest, options?: any) {
        return PopularCoreAPIsApiFp(this.configuration).getAllOffenderManagersForOffenderbyCrnUsingGET(requestParameters.crn, requestParameters.includeProbationAreaTeams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return the conviction (AKA Delius Event) for a conviction ID and a CRN
     * @param {PopularCoreAPIsApiGetConvictionForOffenderByCrnAndConvictionIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopularCoreAPIsApi
     */
    public getConvictionForOffenderByCrnAndConvictionIdUsingGET(requestParameters: PopularCoreAPIsApiGetConvictionForOffenderByCrnAndConvictionIdUsingGETRequest, options?: any) {
        return PopularCoreAPIsApiFp(this.configuration).getConvictionForOffenderByCrnAndConvictionIdUsingGET(requestParameters.convictionId, requestParameters.crn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return the convictions (AKA Delius Event) for an offender
     * @param {PopularCoreAPIsApiGetConvictionsForOffenderByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopularCoreAPIsApi
     */
    public getConvictionsForOffenderByCrnUsingGET(requestParameters: PopularCoreAPIsApiGetConvictionsForOffenderByCrnUsingGETRequest, options?: any) {
        return PopularCoreAPIsApiFp(this.configuration).getConvictionsForOffenderByCrnUsingGET(requestParameters.crn, requestParameters.activeOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return the convictions (AKA Delius Event) for an offender
     * @param {PopularCoreAPIsApiGetConvictionsForOffenderUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopularCoreAPIsApi
     */
    public getConvictionsForOffenderUsingGET(requestParameters: PopularCoreAPIsApiGetConvictionsForOffenderUsingGETRequest, options?: any) {
        return PopularCoreAPIsApiFp(this.configuration).getConvictionsForOffenderUsingGET(requestParameters.nomsNumber, requestParameters.activeOnly, requestParameters.failOnDuplicate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return the convictions (AKA Delius Event) for an offender that contain RAR
     * @param {PopularCoreAPIsApiGetOffenderConvictionsWithRarByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopularCoreAPIsApi
     */
    public getOffenderConvictionsWithRarByCrnUsingGET(requestParameters: PopularCoreAPIsApiGetOffenderConvictionsWithRarByCrnUsingGETRequest, options?: any) {
        return PopularCoreAPIsApiFp(this.configuration).getOffenderConvictionsWithRarByCrnUsingGET(requestParameters.crn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the full offender detail for the given crn
     * @param {PopularCoreAPIsApiGetOffenderDetailByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopularCoreAPIsApi
     */
    public getOffenderDetailByCrnUsingGET(requestParameters: PopularCoreAPIsApiGetOffenderDetailByCrnUsingGETRequest, options?: any) {
        return PopularCoreAPIsApiFp(this.configuration).getOffenderDetailByCrnUsingGET(requestParameters.crn, requestParameters.authenticated, requestParameters.authorities0Authority, requestParameters.credentials, requestParameters.details, requestParameters.principal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the full offender detail for the given nomsNumber. If multiple offender found the active one will be returned
     * @param {PopularCoreAPIsApiGetOffenderDetailByNomsNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopularCoreAPIsApi
     */
    public getOffenderDetailByNomsNumberUsingGET(requestParameters: PopularCoreAPIsApiGetOffenderDetailByNomsNumberUsingGETRequest, options?: any) {
        return PopularCoreAPIsApiFp(this.configuration).getOffenderDetailByNomsNumberUsingGET(requestParameters.nomsNumber, requestParameters.failOnDuplicate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return the details for an offender. If multiple offenders found the active one wll be returned
     * @param {PopularCoreAPIsApiGetOffenderDetailsUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopularCoreAPIsApi
     */
    public getOffenderDetailsUsingGET(requestParameters: PopularCoreAPIsApiGetOffenderDetailsUsingGETRequest, options?: any) {
        return PopularCoreAPIsApiFp(this.configuration).getOffenderDetailsUsingGET(requestParameters.nomsNumber, requestParameters.failOnDuplicate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the probation status for the given crn
     * @param {PopularCoreAPIsApiGetOffenderProbationStatusByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopularCoreAPIsApi
     */
    public getOffenderProbationStatusByCrnUsingGET(requestParameters: PopularCoreAPIsApiGetOffenderProbationStatusByCrnUsingGETRequest, options?: any) {
        return PopularCoreAPIsApiFp(this.configuration).getOffenderProbationStatusByCrnUsingGET(requestParameters.crn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the offender summary for the given crn
     * @param {PopularCoreAPIsApiGetOffenderSummaryByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopularCoreAPIsApi
     */
    public getOffenderSummaryByCrnUsingGET(requestParameters: PopularCoreAPIsApiGetOffenderSummaryByCrnUsingGETRequest, options?: any) {
        return PopularCoreAPIsApiFp(this.configuration).getOffenderSummaryByCrnUsingGET(requestParameters.crn, requestParameters.authenticated, requestParameters.authorities0Authority, requestParameters.credentials, requestParameters.details, requestParameters.principal, options).then((request) => request(this.axios, this.basePath));
    }
}
