/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateCustodyKeyDate } from '../model';
// @ts-ignore
import { Custody } from '../model';
// @ts-ignore
import { CustodyKeyDate } from '../model';
// @ts-ignore
import { ReplaceCustodyKeyDates } from '../model';
/**
 * SentenceDatesApi - axios parameter creator
 * @export
 */
export const SentenceDatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByCrnUsingDELETE: async (crn: string, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByCrnUsingDELETE', 'crn', crn)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByCrnUsingDELETE', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/crn/{crn}/custody/keyDates/{typeCode}`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByNomsNumberUsingDELETE: async (nomsNumber: string, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByNomsNumberUsingDELETE', 'nomsNumber', nomsNumber)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByNomsNumberUsingDELETE', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/custody/keyDates/{typeCode}`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByOffenderIdUsingDELETE: async (offenderId: number, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offenderId' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByOffenderIdUsingDELETE', 'offenderId', offenderId)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByOffenderIdUsingDELETE', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/offenderId/{offenderId}/custody/keyDates/{typeCode}`
                .replace(`{${"offenderId"}}`, encodeURIComponent(String(offenderId)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the associated custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE: async (prisonBookingNumber: string, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'prisonBookingNumber' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE', 'prisonBookingNumber', prisonBookingNumber)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/prisonBookingNumber/{prisonBookingNumber}/custody/keyDates/{typeCode}`
                .replace(`{${"prisonBookingNumber"}}`, encodeURIComponent(String(prisonBookingNumber)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByCrnUsingGET: async (crn: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getAllCustodyKeyDateByCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/custody/keyDates`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all custody key dates for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByNomsNumberUsingGET: async (nomsNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getAllCustodyKeyDateByNomsNumberUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/custody/keyDates`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByOffenderIdUsingGET: async (offenderId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offenderId' is not null or undefined
            assertParamExists('getAllCustodyKeyDateByOffenderIdUsingGET', 'offenderId', offenderId)
            const localVarPath = `/secure/offenders/offenderId/{offenderId}/custody/keyDates`
                .replace(`{${"offenderId"}}`, encodeURIComponent(String(offenderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByPrisonBookingNumberUsingGET: async (prisonBookingNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'prisonBookingNumber' is not null or undefined
            assertParamExists('getAllCustodyKeyDateByPrisonBookingNumberUsingGET', 'prisonBookingNumber', prisonBookingNumber)
            const localVarPath = `/secure/offenders/prisonBookingNumber/{prisonBookingNumber}/custody/keyDates`
                .replace(`{${"prisonBookingNumber"}}`, encodeURIComponent(String(prisonBookingNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByCrnUsingGET: async (crn: string, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getCustodyKeyDateByCrnUsingGET', 'crn', crn)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('getCustodyKeyDateByCrnUsingGET', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/crn/{crn}/custody/keyDates/{typeCode}`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByNomsNumberUsingGET: async (nomsNumber: string, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getCustodyKeyDateByNomsNumberUsingGET', 'nomsNumber', nomsNumber)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('getCustodyKeyDateByNomsNumberUsingGET', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/custody/keyDates/{typeCode}`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByOffenderIdUsingGET: async (offenderId: number, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offenderId' is not null or undefined
            assertParamExists('getCustodyKeyDateByOffenderIdUsingGET', 'offenderId', offenderId)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('getCustodyKeyDateByOffenderIdUsingGET', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/offenderId/{offenderId}/custody/keyDates/{typeCode}`
                .replace(`{${"offenderId"}}`, encodeURIComponent(String(offenderId)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a custody key date for the related custodial conviction with the matching prison booking
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByPrisonBookingNumberUsingGET: async (prisonBookingNumber: string, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'prisonBookingNumber' is not null or undefined
            assertParamExists('getCustodyKeyDateByPrisonBookingNumberUsingGET', 'prisonBookingNumber', prisonBookingNumber)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('getCustodyKeyDateByPrisonBookingNumberUsingGET', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/prisonBookingNumber/{prisonBookingNumber}/custody/keyDates/{typeCode}`
                .replace(`{${"prisonBookingNumber"}}`, encodeURIComponent(String(prisonBookingNumber)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByCrnUsingPUT: async (crn: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('putCustodyKeyDateByCrnUsingPUT', 'crn', crn)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('putCustodyKeyDateByCrnUsingPUT', 'typeCode', typeCode)
            // verify required parameter 'custodyKeyDate' is not null or undefined
            assertParamExists('putCustodyKeyDateByCrnUsingPUT', 'custodyKeyDate', custodyKeyDate)
            const localVarPath = `/secure/offenders/crn/{crn}/custody/keyDates/{typeCode}`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(custodyKeyDate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByNomsNumberUsingPUT: async (nomsNumber: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('putCustodyKeyDateByNomsNumberUsingPUT', 'nomsNumber', nomsNumber)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('putCustodyKeyDateByNomsNumberUsingPUT', 'typeCode', typeCode)
            // verify required parameter 'custodyKeyDate' is not null or undefined
            assertParamExists('putCustodyKeyDateByNomsNumberUsingPUT', 'custodyKeyDate', custodyKeyDate)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/custody/keyDates/{typeCode}`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(custodyKeyDate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByOffenderIdUsingPUT: async (offenderId: number, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offenderId' is not null or undefined
            assertParamExists('putCustodyKeyDateByOffenderIdUsingPUT', 'offenderId', offenderId)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('putCustodyKeyDateByOffenderIdUsingPUT', 'typeCode', typeCode)
            // verify required parameter 'custodyKeyDate' is not null or undefined
            assertParamExists('putCustodyKeyDateByOffenderIdUsingPUT', 'custodyKeyDate', custodyKeyDate)
            const localVarPath = `/secure/offenders/offenderId/{offenderId}/custody/keyDates/{typeCode}`
                .replace(`{${"offenderId"}}`, encodeURIComponent(String(offenderId)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(custodyKeyDate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByPrisonBookingNumberUsingPUT: async (prisonBookingNumber: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'prisonBookingNumber' is not null or undefined
            assertParamExists('putCustodyKeyDateByPrisonBookingNumberUsingPUT', 'prisonBookingNumber', prisonBookingNumber)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('putCustodyKeyDateByPrisonBookingNumberUsingPUT', 'typeCode', typeCode)
            // verify required parameter 'custodyKeyDate' is not null or undefined
            assertParamExists('putCustodyKeyDateByPrisonBookingNumberUsingPUT', 'custodyKeyDate', custodyKeyDate)
            const localVarPath = `/secure/offenders/prisonBookingNumber/{prisonBookingNumber}/custody/keyDates/{typeCode}`
                .replace(`{${"prisonBookingNumber"}}`, encodeURIComponent(String(prisonBookingNumber)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(custodyKeyDate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Replaces all key dates specified in body. Key dates are either added or replaced or deleted if absent (see ReplaceCustodyKeyDates for the list). The the custodial conviction must be active
         * @param {string} bookingNumber bookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {ReplaceCustodyKeyDates} replaceCustodyKeyDates replaceCustodyKeyDates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST: async (bookingNumber: string, nomsNumber: string, replaceCustodyKeyDates: ReplaceCustodyKeyDates, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingNumber' is not null or undefined
            assertParamExists('replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST', 'bookingNumber', bookingNumber)
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST', 'nomsNumber', nomsNumber)
            // verify required parameter 'replaceCustodyKeyDates' is not null or undefined
            assertParamExists('replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST', 'replaceCustodyKeyDates', replaceCustodyKeyDates)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/bookingNumber/{bookingNumber}/custody/keyDates`
                .replace(`{${"bookingNumber"}}`, encodeURIComponent(String(bookingNumber)))
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(replaceCustodyKeyDates, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SentenceDatesApi - functional programming interface
 * @export
 */
export const SentenceDatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SentenceDatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustodyKeyDateByCrnUsingDELETE(crn: string, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustodyKeyDateByCrnUsingDELETE(crn, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustodyKeyDateByNomsNumberUsingDELETE(nomsNumber: string, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustodyKeyDateByNomsNumberUsingDELETE(nomsNumber, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustodyKeyDateByOffenderIdUsingDELETE(offenderId: number, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustodyKeyDateByOffenderIdUsingDELETE(offenderId, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the associated custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE(prisonBookingNumber: string, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE(prisonBookingNumber, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCustodyKeyDateByCrnUsingGET(crn: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustodyKeyDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCustodyKeyDateByCrnUsingGET(crn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets all custody key dates for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCustodyKeyDateByNomsNumberUsingGET(nomsNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustodyKeyDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCustodyKeyDateByNomsNumberUsingGET(nomsNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCustodyKeyDateByOffenderIdUsingGET(offenderId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustodyKeyDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCustodyKeyDateByOffenderIdUsingGET(offenderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustodyKeyDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustodyKeyDateByCrnUsingGET(crn: string, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustodyKeyDateByCrnUsingGET(crn, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustodyKeyDateByNomsNumberUsingGET(nomsNumber: string, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustodyKeyDateByNomsNumberUsingGET(nomsNumber, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustodyKeyDateByOffenderIdUsingGET(offenderId: number, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustodyKeyDateByOffenderIdUsingGET(offenderId, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a custody key date for the related custodial conviction with the matching prison booking
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber: string, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCustodyKeyDateByCrnUsingPUT(crn: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCustodyKeyDateByCrnUsingPUT(crn, typeCode, custodyKeyDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCustodyKeyDateByNomsNumberUsingPUT(nomsNumber: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCustodyKeyDateByNomsNumberUsingPUT(nomsNumber, typeCode, custodyKeyDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCustodyKeyDateByOffenderIdUsingPUT(offenderId: number, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCustodyKeyDateByOffenderIdUsingPUT(offenderId, typeCode, custodyKeyDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCustodyKeyDateByPrisonBookingNumberUsingPUT(prisonBookingNumber: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCustodyKeyDateByPrisonBookingNumberUsingPUT(prisonBookingNumber, typeCode, custodyKeyDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Replaces all key dates specified in body. Key dates are either added or replaced or deleted if absent (see ReplaceCustodyKeyDates for the list). The the custodial conviction must be active
         * @param {string} bookingNumber bookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {ReplaceCustodyKeyDates} replaceCustodyKeyDates replaceCustodyKeyDates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST(bookingNumber: string, nomsNumber: string, replaceCustodyKeyDates: ReplaceCustodyKeyDates, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Custody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST(bookingNumber, nomsNumber, replaceCustodyKeyDates, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SentenceDatesApi - factory interface
 * @export
 */
export const SentenceDatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SentenceDatesApiFp(configuration)
    return {
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByCrnUsingDELETE(crn: string, typeCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCustodyKeyDateByCrnUsingDELETE(crn, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByNomsNumberUsingDELETE(nomsNumber: string, typeCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCustodyKeyDateByNomsNumberUsingDELETE(nomsNumber, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByOffenderIdUsingDELETE(offenderId: number, typeCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCustodyKeyDateByOffenderIdUsingDELETE(offenderId, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the associated custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE(prisonBookingNumber: string, typeCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE(prisonBookingNumber, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByCrnUsingGET(crn: string, options?: any): AxiosPromise<Array<CustodyKeyDate>> {
            return localVarFp.getAllCustodyKeyDateByCrnUsingGET(crn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets all custody key dates for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByNomsNumberUsingGET(nomsNumber: string, options?: any): AxiosPromise<Array<CustodyKeyDate>> {
            return localVarFp.getAllCustodyKeyDateByNomsNumberUsingGET(nomsNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByOffenderIdUsingGET(offenderId: number, options?: any): AxiosPromise<Array<CustodyKeyDate>> {
            return localVarFp.getAllCustodyKeyDateByOffenderIdUsingGET(offenderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber: string, options?: any): AxiosPromise<Array<CustodyKeyDate>> {
            return localVarFp.getAllCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByCrnUsingGET(crn: string, typeCode: string, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.getCustodyKeyDateByCrnUsingGET(crn, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByNomsNumberUsingGET(nomsNumber: string, typeCode: string, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.getCustodyKeyDateByNomsNumberUsingGET(nomsNumber, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByOffenderIdUsingGET(offenderId: number, typeCode: string, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.getCustodyKeyDateByOffenderIdUsingGET(offenderId, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a custody key date for the related custodial conviction with the matching prison booking
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber: string, typeCode: string, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.getCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByCrnUsingPUT(crn: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.putCustodyKeyDateByCrnUsingPUT(crn, typeCode, custodyKeyDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByNomsNumberUsingPUT(nomsNumber: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.putCustodyKeyDateByNomsNumberUsingPUT(nomsNumber, typeCode, custodyKeyDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByOffenderIdUsingPUT(offenderId: number, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.putCustodyKeyDateByOffenderIdUsingPUT(offenderId, typeCode, custodyKeyDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByPrisonBookingNumberUsingPUT(prisonBookingNumber: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.putCustodyKeyDateByPrisonBookingNumberUsingPUT(prisonBookingNumber, typeCode, custodyKeyDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Replaces all key dates specified in body. Key dates are either added or replaced or deleted if absent (see ReplaceCustodyKeyDates for the list). The the custodial conviction must be active
         * @param {string} bookingNumber bookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {ReplaceCustodyKeyDates} replaceCustodyKeyDates replaceCustodyKeyDates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST(bookingNumber: string, nomsNumber: string, replaceCustodyKeyDates: ReplaceCustodyKeyDates, options?: any): AxiosPromise<Custody> {
            return localVarFp.replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST(bookingNumber, nomsNumber, replaceCustodyKeyDates, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteCustodyKeyDateByCrnUsingDELETE operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiDeleteCustodyKeyDateByCrnUsingDELETERequest
 */
export interface SentenceDatesApiDeleteCustodyKeyDateByCrnUsingDELETERequest {
    /**
     * crn
     * @type {string}
     * @memberof SentenceDatesApiDeleteCustodyKeyDateByCrnUsingDELETE
     */
    readonly crn: string

    /**
     * typeCode
     * @type {string}
     * @memberof SentenceDatesApiDeleteCustodyKeyDateByCrnUsingDELETE
     */
    readonly typeCode: string
}

/**
 * Request parameters for deleteCustodyKeyDateByNomsNumberUsingDELETE operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiDeleteCustodyKeyDateByNomsNumberUsingDELETERequest
 */
export interface SentenceDatesApiDeleteCustodyKeyDateByNomsNumberUsingDELETERequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof SentenceDatesApiDeleteCustodyKeyDateByNomsNumberUsingDELETE
     */
    readonly nomsNumber: string

    /**
     * typeCode
     * @type {string}
     * @memberof SentenceDatesApiDeleteCustodyKeyDateByNomsNumberUsingDELETE
     */
    readonly typeCode: string
}

/**
 * Request parameters for deleteCustodyKeyDateByOffenderIdUsingDELETE operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiDeleteCustodyKeyDateByOffenderIdUsingDELETERequest
 */
export interface SentenceDatesApiDeleteCustodyKeyDateByOffenderIdUsingDELETERequest {
    /**
     * offenderId
     * @type {number}
     * @memberof SentenceDatesApiDeleteCustodyKeyDateByOffenderIdUsingDELETE
     */
    readonly offenderId: number

    /**
     * typeCode
     * @type {string}
     * @memberof SentenceDatesApiDeleteCustodyKeyDateByOffenderIdUsingDELETE
     */
    readonly typeCode: string
}

/**
 * Request parameters for deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiDeleteCustodyKeyDateByPrisonBookingNumberUsingDELETERequest
 */
export interface SentenceDatesApiDeleteCustodyKeyDateByPrisonBookingNumberUsingDELETERequest {
    /**
     * prisonBookingNumber
     * @type {string}
     * @memberof SentenceDatesApiDeleteCustodyKeyDateByPrisonBookingNumberUsingDELETE
     */
    readonly prisonBookingNumber: string

    /**
     * typeCode
     * @type {string}
     * @memberof SentenceDatesApiDeleteCustodyKeyDateByPrisonBookingNumberUsingDELETE
     */
    readonly typeCode: string
}

/**
 * Request parameters for getAllCustodyKeyDateByCrnUsingGET operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiGetAllCustodyKeyDateByCrnUsingGETRequest
 */
export interface SentenceDatesApiGetAllCustodyKeyDateByCrnUsingGETRequest {
    /**
     * crn
     * @type {string}
     * @memberof SentenceDatesApiGetAllCustodyKeyDateByCrnUsingGET
     */
    readonly crn: string
}

/**
 * Request parameters for getAllCustodyKeyDateByNomsNumberUsingGET operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiGetAllCustodyKeyDateByNomsNumberUsingGETRequest
 */
export interface SentenceDatesApiGetAllCustodyKeyDateByNomsNumberUsingGETRequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof SentenceDatesApiGetAllCustodyKeyDateByNomsNumberUsingGET
     */
    readonly nomsNumber: string
}

/**
 * Request parameters for getAllCustodyKeyDateByOffenderIdUsingGET operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiGetAllCustodyKeyDateByOffenderIdUsingGETRequest
 */
export interface SentenceDatesApiGetAllCustodyKeyDateByOffenderIdUsingGETRequest {
    /**
     * offenderId
     * @type {number}
     * @memberof SentenceDatesApiGetAllCustodyKeyDateByOffenderIdUsingGET
     */
    readonly offenderId: number
}

/**
 * Request parameters for getAllCustodyKeyDateByPrisonBookingNumberUsingGET operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiGetAllCustodyKeyDateByPrisonBookingNumberUsingGETRequest
 */
export interface SentenceDatesApiGetAllCustodyKeyDateByPrisonBookingNumberUsingGETRequest {
    /**
     * prisonBookingNumber
     * @type {string}
     * @memberof SentenceDatesApiGetAllCustodyKeyDateByPrisonBookingNumberUsingGET
     */
    readonly prisonBookingNumber: string
}

/**
 * Request parameters for getCustodyKeyDateByCrnUsingGET operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiGetCustodyKeyDateByCrnUsingGETRequest
 */
export interface SentenceDatesApiGetCustodyKeyDateByCrnUsingGETRequest {
    /**
     * crn
     * @type {string}
     * @memberof SentenceDatesApiGetCustodyKeyDateByCrnUsingGET
     */
    readonly crn: string

    /**
     * typeCode
     * @type {string}
     * @memberof SentenceDatesApiGetCustodyKeyDateByCrnUsingGET
     */
    readonly typeCode: string
}

/**
 * Request parameters for getCustodyKeyDateByNomsNumberUsingGET operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiGetCustodyKeyDateByNomsNumberUsingGETRequest
 */
export interface SentenceDatesApiGetCustodyKeyDateByNomsNumberUsingGETRequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof SentenceDatesApiGetCustodyKeyDateByNomsNumberUsingGET
     */
    readonly nomsNumber: string

    /**
     * typeCode
     * @type {string}
     * @memberof SentenceDatesApiGetCustodyKeyDateByNomsNumberUsingGET
     */
    readonly typeCode: string
}

/**
 * Request parameters for getCustodyKeyDateByOffenderIdUsingGET operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiGetCustodyKeyDateByOffenderIdUsingGETRequest
 */
export interface SentenceDatesApiGetCustodyKeyDateByOffenderIdUsingGETRequest {
    /**
     * offenderId
     * @type {number}
     * @memberof SentenceDatesApiGetCustodyKeyDateByOffenderIdUsingGET
     */
    readonly offenderId: number

    /**
     * typeCode
     * @type {string}
     * @memberof SentenceDatesApiGetCustodyKeyDateByOffenderIdUsingGET
     */
    readonly typeCode: string
}

/**
 * Request parameters for getCustodyKeyDateByPrisonBookingNumberUsingGET operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiGetCustodyKeyDateByPrisonBookingNumberUsingGETRequest
 */
export interface SentenceDatesApiGetCustodyKeyDateByPrisonBookingNumberUsingGETRequest {
    /**
     * prisonBookingNumber
     * @type {string}
     * @memberof SentenceDatesApiGetCustodyKeyDateByPrisonBookingNumberUsingGET
     */
    readonly prisonBookingNumber: string

    /**
     * typeCode
     * @type {string}
     * @memberof SentenceDatesApiGetCustodyKeyDateByPrisonBookingNumberUsingGET
     */
    readonly typeCode: string
}

/**
 * Request parameters for putCustodyKeyDateByCrnUsingPUT operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiPutCustodyKeyDateByCrnUsingPUTRequest
 */
export interface SentenceDatesApiPutCustodyKeyDateByCrnUsingPUTRequest {
    /**
     * crn
     * @type {string}
     * @memberof SentenceDatesApiPutCustodyKeyDateByCrnUsingPUT
     */
    readonly crn: string

    /**
     * typeCode
     * @type {string}
     * @memberof SentenceDatesApiPutCustodyKeyDateByCrnUsingPUT
     */
    readonly typeCode: string

    /**
     * custodyKeyDate
     * @type {CreateCustodyKeyDate}
     * @memberof SentenceDatesApiPutCustodyKeyDateByCrnUsingPUT
     */
    readonly custodyKeyDate: CreateCustodyKeyDate
}

/**
 * Request parameters for putCustodyKeyDateByNomsNumberUsingPUT operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiPutCustodyKeyDateByNomsNumberUsingPUTRequest
 */
export interface SentenceDatesApiPutCustodyKeyDateByNomsNumberUsingPUTRequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof SentenceDatesApiPutCustodyKeyDateByNomsNumberUsingPUT
     */
    readonly nomsNumber: string

    /**
     * typeCode
     * @type {string}
     * @memberof SentenceDatesApiPutCustodyKeyDateByNomsNumberUsingPUT
     */
    readonly typeCode: string

    /**
     * custodyKeyDate
     * @type {CreateCustodyKeyDate}
     * @memberof SentenceDatesApiPutCustodyKeyDateByNomsNumberUsingPUT
     */
    readonly custodyKeyDate: CreateCustodyKeyDate
}

/**
 * Request parameters for putCustodyKeyDateByOffenderIdUsingPUT operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiPutCustodyKeyDateByOffenderIdUsingPUTRequest
 */
export interface SentenceDatesApiPutCustodyKeyDateByOffenderIdUsingPUTRequest {
    /**
     * offenderId
     * @type {number}
     * @memberof SentenceDatesApiPutCustodyKeyDateByOffenderIdUsingPUT
     */
    readonly offenderId: number

    /**
     * typeCode
     * @type {string}
     * @memberof SentenceDatesApiPutCustodyKeyDateByOffenderIdUsingPUT
     */
    readonly typeCode: string

    /**
     * custodyKeyDate
     * @type {CreateCustodyKeyDate}
     * @memberof SentenceDatesApiPutCustodyKeyDateByOffenderIdUsingPUT
     */
    readonly custodyKeyDate: CreateCustodyKeyDate
}

/**
 * Request parameters for putCustodyKeyDateByPrisonBookingNumberUsingPUT operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiPutCustodyKeyDateByPrisonBookingNumberUsingPUTRequest
 */
export interface SentenceDatesApiPutCustodyKeyDateByPrisonBookingNumberUsingPUTRequest {
    /**
     * prisonBookingNumber
     * @type {string}
     * @memberof SentenceDatesApiPutCustodyKeyDateByPrisonBookingNumberUsingPUT
     */
    readonly prisonBookingNumber: string

    /**
     * typeCode
     * @type {string}
     * @memberof SentenceDatesApiPutCustodyKeyDateByPrisonBookingNumberUsingPUT
     */
    readonly typeCode: string

    /**
     * custodyKeyDate
     * @type {CreateCustodyKeyDate}
     * @memberof SentenceDatesApiPutCustodyKeyDateByPrisonBookingNumberUsingPUT
     */
    readonly custodyKeyDate: CreateCustodyKeyDate
}

/**
 * Request parameters for replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST operation in SentenceDatesApi.
 * @export
 * @interface SentenceDatesApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOSTRequest
 */
export interface SentenceDatesApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOSTRequest {
    /**
     * bookingNumber
     * @type {string}
     * @memberof SentenceDatesApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST
     */
    readonly bookingNumber: string

    /**
     * nomsNumber
     * @type {string}
     * @memberof SentenceDatesApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST
     */
    readonly nomsNumber: string

    /**
     * replaceCustodyKeyDates
     * @type {ReplaceCustodyKeyDates}
     * @memberof SentenceDatesApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST
     */
    readonly replaceCustodyKeyDates: ReplaceCustodyKeyDates
}

/**
 * SentenceDatesApi - object-oriented interface
 * @export
 * @class SentenceDatesApi
 * @extends {BaseAPI}
 */
export class SentenceDatesApi extends BaseAPI {
    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Deletes the custody key date for the active custodial conviction
     * @param {SentenceDatesApiDeleteCustodyKeyDateByCrnUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public deleteCustodyKeyDateByCrnUsingDELETE(requestParameters: SentenceDatesApiDeleteCustodyKeyDateByCrnUsingDELETERequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).deleteCustodyKeyDateByCrnUsingDELETE(requestParameters.crn, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Deletes the custody key date for the active custodial conviction
     * @param {SentenceDatesApiDeleteCustodyKeyDateByNomsNumberUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public deleteCustodyKeyDateByNomsNumberUsingDELETE(requestParameters: SentenceDatesApiDeleteCustodyKeyDateByNomsNumberUsingDELETERequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).deleteCustodyKeyDateByNomsNumberUsingDELETE(requestParameters.nomsNumber, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Deletes the custody key date for the active custodial conviction
     * @param {SentenceDatesApiDeleteCustodyKeyDateByOffenderIdUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public deleteCustodyKeyDateByOffenderIdUsingDELETE(requestParameters: SentenceDatesApiDeleteCustodyKeyDateByOffenderIdUsingDELETERequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).deleteCustodyKeyDateByOffenderIdUsingDELETE(requestParameters.offenderId, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Deletes the custody key date for the associated custodial conviction
     * @param {SentenceDatesApiDeleteCustodyKeyDateByPrisonBookingNumberUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE(requestParameters: SentenceDatesApiDeleteCustodyKeyDateByPrisonBookingNumberUsingDELETERequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE(requestParameters.prisonBookingNumber, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a all custody key dates for the active custodial conviction
     * @param {SentenceDatesApiGetAllCustodyKeyDateByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public getAllCustodyKeyDateByCrnUsingGET(requestParameters: SentenceDatesApiGetAllCustodyKeyDateByCrnUsingGETRequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).getAllCustodyKeyDateByCrnUsingGET(requestParameters.crn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets all custody key dates for the active custodial conviction
     * @param {SentenceDatesApiGetAllCustodyKeyDateByNomsNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public getAllCustodyKeyDateByNomsNumberUsingGET(requestParameters: SentenceDatesApiGetAllCustodyKeyDateByNomsNumberUsingGETRequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).getAllCustodyKeyDateByNomsNumberUsingGET(requestParameters.nomsNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a all custody key dates for the active custodial conviction
     * @param {SentenceDatesApiGetAllCustodyKeyDateByOffenderIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public getAllCustodyKeyDateByOffenderIdUsingGET(requestParameters: SentenceDatesApiGetAllCustodyKeyDateByOffenderIdUsingGETRequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).getAllCustodyKeyDateByOffenderIdUsingGET(requestParameters.offenderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a all custody key dates for the active custodial conviction
     * @param {SentenceDatesApiGetAllCustodyKeyDateByPrisonBookingNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public getAllCustodyKeyDateByPrisonBookingNumberUsingGET(requestParameters: SentenceDatesApiGetAllCustodyKeyDateByPrisonBookingNumberUsingGETRequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).getAllCustodyKeyDateByPrisonBookingNumberUsingGET(requestParameters.prisonBookingNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a custody key date for the active custodial conviction
     * @param {SentenceDatesApiGetCustodyKeyDateByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public getCustodyKeyDateByCrnUsingGET(requestParameters: SentenceDatesApiGetCustodyKeyDateByCrnUsingGETRequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).getCustodyKeyDateByCrnUsingGET(requestParameters.crn, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a custody key date for the active custodial conviction
     * @param {SentenceDatesApiGetCustodyKeyDateByNomsNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public getCustodyKeyDateByNomsNumberUsingGET(requestParameters: SentenceDatesApiGetCustodyKeyDateByNomsNumberUsingGETRequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).getCustodyKeyDateByNomsNumberUsingGET(requestParameters.nomsNumber, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a custody key date for the active custodial conviction
     * @param {SentenceDatesApiGetCustodyKeyDateByOffenderIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public getCustodyKeyDateByOffenderIdUsingGET(requestParameters: SentenceDatesApiGetCustodyKeyDateByOffenderIdUsingGETRequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).getCustodyKeyDateByOffenderIdUsingGET(requestParameters.offenderId, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a custody key date for the related custodial conviction with the matching prison booking
     * @param {SentenceDatesApiGetCustodyKeyDateByPrisonBookingNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public getCustodyKeyDateByPrisonBookingNumberUsingGET(requestParameters: SentenceDatesApiGetCustodyKeyDateByPrisonBookingNumberUsingGETRequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).getCustodyKeyDateByPrisonBookingNumberUsingGET(requestParameters.prisonBookingNumber, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Adds or replaces a custody key date for the active custodial conviction
     * @param {SentenceDatesApiPutCustodyKeyDateByCrnUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public putCustodyKeyDateByCrnUsingPUT(requestParameters: SentenceDatesApiPutCustodyKeyDateByCrnUsingPUTRequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).putCustodyKeyDateByCrnUsingPUT(requestParameters.crn, requestParameters.typeCode, requestParameters.custodyKeyDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Adds or replaces a custody key date for the active custodial conviction
     * @param {SentenceDatesApiPutCustodyKeyDateByNomsNumberUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public putCustodyKeyDateByNomsNumberUsingPUT(requestParameters: SentenceDatesApiPutCustodyKeyDateByNomsNumberUsingPUTRequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).putCustodyKeyDateByNomsNumberUsingPUT(requestParameters.nomsNumber, requestParameters.typeCode, requestParameters.custodyKeyDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Adds or replaces a custody key date for the active custodial conviction
     * @param {SentenceDatesApiPutCustodyKeyDateByOffenderIdUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public putCustodyKeyDateByOffenderIdUsingPUT(requestParameters: SentenceDatesApiPutCustodyKeyDateByOffenderIdUsingPUTRequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).putCustodyKeyDateByOffenderIdUsingPUT(requestParameters.offenderId, requestParameters.typeCode, requestParameters.custodyKeyDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Adds or replaces a custody key date for the active custodial conviction
     * @param {SentenceDatesApiPutCustodyKeyDateByPrisonBookingNumberUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public putCustodyKeyDateByPrisonBookingNumberUsingPUT(requestParameters: SentenceDatesApiPutCustodyKeyDateByPrisonBookingNumberUsingPUTRequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).putCustodyKeyDateByPrisonBookingNumberUsingPUT(requestParameters.prisonBookingNumber, requestParameters.typeCode, requestParameters.custodyKeyDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Replaces all key dates specified in body. Key dates are either added or replaced or deleted if absent (see ReplaceCustodyKeyDates for the list). The the custodial conviction must be active
     * @param {SentenceDatesApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceDatesApi
     */
    public replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST(requestParameters: SentenceDatesApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOSTRequest, options?: any) {
        return SentenceDatesApiFp(this.configuration).replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST(requestParameters.bookingNumber, requestParameters.nomsNumber, requestParameters.replaceCustodyKeyDates, options).then((request) => request(this.axios, this.basePath));
    }
}
