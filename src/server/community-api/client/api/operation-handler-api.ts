/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * OperationHandlerApi - axios parameter creator
 * @export
 */
export const OperationHandlerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET: async (body?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET1: async (body?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/**`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET2: async (body?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET3: async (body?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperationHandlerApi - functional programming interface
 * @export
 */
export const OperationHandlerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OperationHandlerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleUsingGET(body?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleUsingGET(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleUsingGET1(body?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleUsingGET1(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleUsingGET2(body?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleUsingGET2(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleUsingGET3(body?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleUsingGET3(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OperationHandlerApi - factory interface
 * @export
 */
export const OperationHandlerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OperationHandlerApiFp(configuration)
    return {
        /**
         * 
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET(body?: { [key: string]: string; }, options?: any): AxiosPromise<object> {
            return localVarFp.handleUsingGET(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET1(body?: { [key: string]: string; }, options?: any): AxiosPromise<object> {
            return localVarFp.handleUsingGET1(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET2(body?: { [key: string]: string; }, options?: any): AxiosPromise<object> {
            return localVarFp.handleUsingGET2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET3(body?: { [key: string]: string; }, options?: any): AxiosPromise<object> {
            return localVarFp.handleUsingGET3(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for handleUsingGET operation in OperationHandlerApi.
 * @export
 * @interface OperationHandlerApiHandleUsingGETRequest
 */
export interface OperationHandlerApiHandleUsingGETRequest {
    /**
     * body
     * @type {{ [key: string]: string; }}
     * @memberof OperationHandlerApiHandleUsingGET
     */
    readonly body?: { [key: string]: string; }
}

/**
 * Request parameters for handleUsingGET1 operation in OperationHandlerApi.
 * @export
 * @interface OperationHandlerApiHandleUsingGET1Request
 */
export interface OperationHandlerApiHandleUsingGET1Request {
    /**
     * body
     * @type {{ [key: string]: string; }}
     * @memberof OperationHandlerApiHandleUsingGET1
     */
    readonly body?: { [key: string]: string; }
}

/**
 * Request parameters for handleUsingGET2 operation in OperationHandlerApi.
 * @export
 * @interface OperationHandlerApiHandleUsingGET2Request
 */
export interface OperationHandlerApiHandleUsingGET2Request {
    /**
     * body
     * @type {{ [key: string]: string; }}
     * @memberof OperationHandlerApiHandleUsingGET2
     */
    readonly body?: { [key: string]: string; }
}

/**
 * Request parameters for handleUsingGET3 operation in OperationHandlerApi.
 * @export
 * @interface OperationHandlerApiHandleUsingGET3Request
 */
export interface OperationHandlerApiHandleUsingGET3Request {
    /**
     * body
     * @type {{ [key: string]: string; }}
     * @memberof OperationHandlerApiHandleUsingGET3
     */
    readonly body?: { [key: string]: string; }
}

/**
 * OperationHandlerApi - object-oriented interface
 * @export
 * @class OperationHandlerApi
 * @extends {BaseAPI}
 */
export class OperationHandlerApi extends BaseAPI {
    /**
     * 
     * @summary handle
     * @param {OperationHandlerApiHandleUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET(requestParameters: OperationHandlerApiHandleUsingGETRequest = {}, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary handle
     * @param {OperationHandlerApiHandleUsingGET1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET1(requestParameters: OperationHandlerApiHandleUsingGET1Request = {}, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET1(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary handle
     * @param {OperationHandlerApiHandleUsingGET2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET2(requestParameters: OperationHandlerApiHandleUsingGET2Request = {}, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary handle
     * @param {OperationHandlerApiHandleUsingGET3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET3(requestParameters: OperationHandlerApiHandleUsingGET3Request = {}, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET3(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
