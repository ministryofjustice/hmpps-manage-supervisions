/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { OffenderDelta } from '../model';
// @ts-ignore
import { OffenderUpdate } from '../model';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes delta data before the date supplied
         * @param {string} before Delete records before the date time provided
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOffenderDeltasUsingDELETE: async (before: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'before' is not null or undefined
            assertParamExists('deleteOffenderDeltasUsingDELETE', 'before', before)
            const localVarPath = `/secure/offenderDeltaIds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_COMMUNITY_EVENTS
         * @summary Deletes an update of an offender previous retrieved by `/offenders/nextUpdate` 
         * @param {number} offenderDeltaId offenderDeltaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOffenderUpdateUsingDELETE: async (offenderDeltaId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offenderDeltaId' is not null or undefined
            assertParamExists('deleteOffenderUpdateUsingDELETE', 'offenderDeltaId', offenderDeltaId)
            const localVarPath = `/secure/offenders/update/{offenderDeltaId}`
                .replace(`{${"offenderDeltaId"}}`, encodeURIComponent(String(offenderDeltaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_COMMUNITY_EVENTS
         * @summary Returns the next update for any offender. If none, will look for failed updates and set them in progress again
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAndLockNextOffenderUpdateUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/secure/offenders/nextUpdate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of offender IDs which have be inserted/updated or deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDeltasUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/secure/offenderDeltaIds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * requires ROLE_COMMUNITY_EVENTS
         * @summary Mark an offender update as failed
         * @param {number} offenderDeltaId offenderDeltaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsFailedUsingPUT: async (offenderDeltaId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offenderDeltaId' is not null or undefined
            assertParamExists('markAsFailedUsingPUT', 'offenderDeltaId', offenderDeltaId)
            const localVarPath = `/secure/offenders/update/{offenderDeltaId}/markAsFailed`
                .replace(`{${"offenderDeltaId"}}`, encodeURIComponent(String(offenderDeltaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes delta data before the date supplied
         * @param {string} before Delete records before the date time provided
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOffenderDeltasUsingDELETE(before: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOffenderDeltasUsingDELETE(before, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_COMMUNITY_EVENTS
         * @summary Deletes an update of an offender previous retrieved by `/offenders/nextUpdate` 
         * @param {number} offenderDeltaId offenderDeltaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOffenderUpdateUsingDELETE(offenderDeltaId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOffenderUpdateUsingDELETE(offenderDeltaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_COMMUNITY_EVENTS
         * @summary Returns the next update for any offender. If none, will look for failed updates and set them in progress again
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAndLockNextOffenderUpdateUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OffenderUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAndLockNextOffenderUpdateUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of offender IDs which have be inserted/updated or deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffenderDeltasUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OffenderDelta>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffenderDeltasUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * requires ROLE_COMMUNITY_EVENTS
         * @summary Mark an offender update as failed
         * @param {number} offenderDeltaId offenderDeltaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAsFailedUsingPUT(offenderDeltaId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAsFailedUsingPUT(offenderDeltaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes delta data before the date supplied
         * @param {string} before Delete records before the date time provided
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOffenderDeltasUsingDELETE(before: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOffenderDeltasUsingDELETE(before, options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_COMMUNITY_EVENTS
         * @summary Deletes an update of an offender previous retrieved by `/offenders/nextUpdate` 
         * @param {number} offenderDeltaId offenderDeltaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOffenderUpdateUsingDELETE(offenderDeltaId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOffenderUpdateUsingDELETE(offenderDeltaId, options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_COMMUNITY_EVENTS
         * @summary Returns the next update for any offender. If none, will look for failed updates and set them in progress again
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAndLockNextOffenderUpdateUsingGET(options?: any): AxiosPromise<OffenderUpdate> {
            return localVarFp.getAndLockNextOffenderUpdateUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of offender IDs which have be inserted/updated or deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffenderDeltasUsingGET(options?: any): AxiosPromise<Array<OffenderDelta>> {
            return localVarFp.getOffenderDeltasUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * requires ROLE_COMMUNITY_EVENTS
         * @summary Mark an offender update as failed
         * @param {number} offenderDeltaId offenderDeltaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsFailedUsingPUT(offenderDeltaId: number, options?: any): AxiosPromise<void> {
            return localVarFp.markAsFailedUsingPUT(offenderDeltaId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteOffenderDeltasUsingDELETE operation in EventsApi.
 * @export
 * @interface EventsApiDeleteOffenderDeltasUsingDELETERequest
 */
export interface EventsApiDeleteOffenderDeltasUsingDELETERequest {
    /**
     * Delete records before the date time provided
     * @type {string}
     * @memberof EventsApiDeleteOffenderDeltasUsingDELETE
     */
    readonly before: string
}

/**
 * Request parameters for deleteOffenderUpdateUsingDELETE operation in EventsApi.
 * @export
 * @interface EventsApiDeleteOffenderUpdateUsingDELETERequest
 */
export interface EventsApiDeleteOffenderUpdateUsingDELETERequest {
    /**
     * offenderDeltaId
     * @type {number}
     * @memberof EventsApiDeleteOffenderUpdateUsingDELETE
     */
    readonly offenderDeltaId: number
}

/**
 * Request parameters for markAsFailedUsingPUT operation in EventsApi.
 * @export
 * @interface EventsApiMarkAsFailedUsingPUTRequest
 */
export interface EventsApiMarkAsFailedUsingPUTRequest {
    /**
     * offenderDeltaId
     * @type {number}
     * @memberof EventsApiMarkAsFailedUsingPUT
     */
    readonly offenderDeltaId: number
}

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * 
     * @summary Deletes delta data before the date supplied
     * @param {EventsApiDeleteOffenderDeltasUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public deleteOffenderDeltasUsingDELETE(requestParameters: EventsApiDeleteOffenderDeltasUsingDELETERequest, options?: any) {
        return EventsApiFp(this.configuration).deleteOffenderDeltasUsingDELETE(requestParameters.before, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_COMMUNITY_EVENTS
     * @summary Deletes an update of an offender previous retrieved by `/offenders/nextUpdate` 
     * @param {EventsApiDeleteOffenderUpdateUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public deleteOffenderUpdateUsingDELETE(requestParameters: EventsApiDeleteOffenderUpdateUsingDELETERequest, options?: any) {
        return EventsApiFp(this.configuration).deleteOffenderUpdateUsingDELETE(requestParameters.offenderDeltaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_COMMUNITY_EVENTS
     * @summary Returns the next update for any offender. If none, will look for failed updates and set them in progress again
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getAndLockNextOffenderUpdateUsingGET(options?: any) {
        return EventsApiFp(this.configuration).getAndLockNextOffenderUpdateUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of offender IDs which have be inserted/updated or deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getOffenderDeltasUsingGET(options?: any) {
        return EventsApiFp(this.configuration).getOffenderDeltasUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * requires ROLE_COMMUNITY_EVENTS
     * @summary Mark an offender update as failed
     * @param {EventsApiMarkAsFailedUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public markAsFailedUsingPUT(requestParameters: EventsApiMarkAsFailedUsingPUTRequest, options?: any) {
        return EventsApiFp(this.configuration).markAsFailedUsingPUT(requestParameters.offenderDeltaId, options).then((request) => request(this.axios, this.basePath));
    }
}
