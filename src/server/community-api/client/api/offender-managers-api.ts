/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommunityOrPrisonOffenderManager } from '../model';
// @ts-ignore
import { CreatePrisonOffenderManager } from '../model';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { ResponsibleOfficer } from '../model';
// @ts-ignore
import { ResponsibleOfficerSwitch } from '../model';
/**
 * OffenderManagersApi - axios parameter creator
 * @export
 */
export const OffenderManagersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Allocates the prison offender manager for an offender in custody. This operation may also have a side affect of creating a Staff member if one matching the name does not already exist. An existing staff member can be used if the staff id is supplied.
         * @param {string} nomsNumber nomsNumber
         * @param {CreatePrisonOffenderManager} prisonOffenderManager prisonOffenderManager
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allocatePrisonOffenderManagerByNomsNumberUsingPUT: async (nomsNumber: string, prisonOffenderManager: CreatePrisonOffenderManager, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('allocatePrisonOffenderManagerByNomsNumberUsingPUT', 'nomsNumber', nomsNumber)
            // verify required parameter 'prisonOffenderManager' is not null or undefined
            assertParamExists('allocatePrisonOffenderManagerByNomsNumberUsingPUT', 'prisonOffenderManager', prisonOffenderManager)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/prisonOffenderManager`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(prisonOffenderManager, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deallocates the prison offender manager for an offender in custody. The POM is set back to its unallocated state
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deallocatePrisonOffenderManagerByNomsNumberUsingDELETE: async (nomsNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('deallocatePrisonOffenderManagerByNomsNumberUsingDELETE', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/prisonOffenderManager`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts a NOMIS offender nomsNumber in the format A9999AA
         * @summary Returns the current community and prison offender managers for an offender
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [includeProbationAreaTeams] include teams on the ProbationArea records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOffenderManagersForOffenderUsingGET: async (nomsNumber: string, includeProbationAreaTeams?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getAllOffenderManagersForOffenderUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/allOffenderManagers`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeProbationAreaTeams !== undefined) {
                localVarQueryParameter['includeProbationAreaTeams'] = includeProbationAreaTeams;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts an offender CRN in the format A999999
         * @summary Returns the current community and prison offender managers for an offender
         * @param {string} crn CRN for the offender
         * @param {boolean} [includeProbationAreaTeams] include teams on the ProbationArea records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOffenderManagersForOffenderbyCrnUsingGET: async (crn: string, includeProbationAreaTeams?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getAllOffenderManagersForOffenderbyCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/allOffenderManagers`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeProbationAreaTeams !== undefined) {
                localVarQueryParameter['includeProbationAreaTeams'] = includeProbationAreaTeams;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts a NOMIS offender nomsNumber in the format A9999AA
         * @summary Return the responsible officer (RO) for an offender
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [current] Current only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResponsibleOfficersForOffenderUsingGET: async (nomsNumber: string, current?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getResponsibleOfficersForOffenderUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/responsibleOfficers`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Sets the responsible officer for an offender to either the current prison offender manager to community offender manager. This will allow the responsible officer to be set to an unallocated offender manager
         * @param {string} nomsNumber nomsNumber
         * @param {ResponsibleOfficerSwitch} responsibleOfficerSwitch responsibleOfficerSwitch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        switchResponsibleOfficerUsingPUT: async (nomsNumber: string, responsibleOfficerSwitch: ResponsibleOfficerSwitch, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('switchResponsibleOfficerUsingPUT', 'nomsNumber', nomsNumber)
            // verify required parameter 'responsibleOfficerSwitch' is not null or undefined
            assertParamExists('switchResponsibleOfficerUsingPUT', 'responsibleOfficerSwitch', responsibleOfficerSwitch)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/responsibleOfficer/switch`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(responsibleOfficerSwitch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OffenderManagersApi - functional programming interface
 * @export
 */
export const OffenderManagersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OffenderManagersApiAxiosParamCreator(configuration)
    return {
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Allocates the prison offender manager for an offender in custody. This operation may also have a side affect of creating a Staff member if one matching the name does not already exist. An existing staff member can be used if the staff id is supplied.
         * @param {string} nomsNumber nomsNumber
         * @param {CreatePrisonOffenderManager} prisonOffenderManager prisonOffenderManager
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allocatePrisonOffenderManagerByNomsNumberUsingPUT(nomsNumber: string, prisonOffenderManager: CreatePrisonOffenderManager, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunityOrPrisonOffenderManager>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allocatePrisonOffenderManagerByNomsNumberUsingPUT(nomsNumber, prisonOffenderManager, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deallocates the prison offender manager for an offender in custody. The POM is set back to its unallocated state
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deallocatePrisonOffenderManagerByNomsNumberUsingDELETE(nomsNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deallocatePrisonOffenderManagerByNomsNumberUsingDELETE(nomsNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts a NOMIS offender nomsNumber in the format A9999AA
         * @summary Returns the current community and prison offender managers for an offender
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [includeProbationAreaTeams] include teams on the ProbationArea records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOffenderManagersForOffenderUsingGET(nomsNumber: string, includeProbationAreaTeams?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommunityOrPrisonOffenderManager>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOffenderManagersForOffenderUsingGET(nomsNumber, includeProbationAreaTeams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts an offender CRN in the format A999999
         * @summary Returns the current community and prison offender managers for an offender
         * @param {string} crn CRN for the offender
         * @param {boolean} [includeProbationAreaTeams] include teams on the ProbationArea records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOffenderManagersForOffenderbyCrnUsingGET(crn: string, includeProbationAreaTeams?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommunityOrPrisonOffenderManager>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOffenderManagersForOffenderbyCrnUsingGET(crn, includeProbationAreaTeams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts a NOMIS offender nomsNumber in the format A9999AA
         * @summary Return the responsible officer (RO) for an offender
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [current] Current only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResponsibleOfficersForOffenderUsingGET(nomsNumber: string, current?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponsibleOfficer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResponsibleOfficersForOffenderUsingGET(nomsNumber, current, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Sets the responsible officer for an offender to either the current prison offender manager to community offender manager. This will allow the responsible officer to be set to an unallocated offender manager
         * @param {string} nomsNumber nomsNumber
         * @param {ResponsibleOfficerSwitch} responsibleOfficerSwitch responsibleOfficerSwitch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async switchResponsibleOfficerUsingPUT(nomsNumber: string, responsibleOfficerSwitch: ResponsibleOfficerSwitch, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunityOrPrisonOffenderManager>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.switchResponsibleOfficerUsingPUT(nomsNumber, responsibleOfficerSwitch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OffenderManagersApi - factory interface
 * @export
 */
export const OffenderManagersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OffenderManagersApiFp(configuration)
    return {
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Allocates the prison offender manager for an offender in custody. This operation may also have a side affect of creating a Staff member if one matching the name does not already exist. An existing staff member can be used if the staff id is supplied.
         * @param {string} nomsNumber nomsNumber
         * @param {CreatePrisonOffenderManager} prisonOffenderManager prisonOffenderManager
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allocatePrisonOffenderManagerByNomsNumberUsingPUT(nomsNumber: string, prisonOffenderManager: CreatePrisonOffenderManager, options?: any): AxiosPromise<CommunityOrPrisonOffenderManager> {
            return localVarFp.allocatePrisonOffenderManagerByNomsNumberUsingPUT(nomsNumber, prisonOffenderManager, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deallocates the prison offender manager for an offender in custody. The POM is set back to its unallocated state
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deallocatePrisonOffenderManagerByNomsNumberUsingDELETE(nomsNumber: string, options?: any): AxiosPromise<void> {
            return localVarFp.deallocatePrisonOffenderManagerByNomsNumberUsingDELETE(nomsNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts a NOMIS offender nomsNumber in the format A9999AA
         * @summary Returns the current community and prison offender managers for an offender
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [includeProbationAreaTeams] include teams on the ProbationArea records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOffenderManagersForOffenderUsingGET(nomsNumber: string, includeProbationAreaTeams?: boolean, options?: any): AxiosPromise<Array<CommunityOrPrisonOffenderManager>> {
            return localVarFp.getAllOffenderManagersForOffenderUsingGET(nomsNumber, includeProbationAreaTeams, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts an offender CRN in the format A999999
         * @summary Returns the current community and prison offender managers for an offender
         * @param {string} crn CRN for the offender
         * @param {boolean} [includeProbationAreaTeams] include teams on the ProbationArea records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOffenderManagersForOffenderbyCrnUsingGET(crn: string, includeProbationAreaTeams?: boolean, options?: any): AxiosPromise<Array<CommunityOrPrisonOffenderManager>> {
            return localVarFp.getAllOffenderManagersForOffenderbyCrnUsingGET(crn, includeProbationAreaTeams, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts a NOMIS offender nomsNumber in the format A9999AA
         * @summary Return the responsible officer (RO) for an offender
         * @param {string} nomsNumber Nomis number for the offender
         * @param {boolean} [current] Current only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResponsibleOfficersForOffenderUsingGET(nomsNumber: string, current?: boolean, options?: any): AxiosPromise<Array<ResponsibleOfficer>> {
            return localVarFp.getResponsibleOfficersForOffenderUsingGET(nomsNumber, current, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Sets the responsible officer for an offender to either the current prison offender manager to community offender manager. This will allow the responsible officer to be set to an unallocated offender manager
         * @param {string} nomsNumber nomsNumber
         * @param {ResponsibleOfficerSwitch} responsibleOfficerSwitch responsibleOfficerSwitch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        switchResponsibleOfficerUsingPUT(nomsNumber: string, responsibleOfficerSwitch: ResponsibleOfficerSwitch, options?: any): AxiosPromise<CommunityOrPrisonOffenderManager> {
            return localVarFp.switchResponsibleOfficerUsingPUT(nomsNumber, responsibleOfficerSwitch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for allocatePrisonOffenderManagerByNomsNumberUsingPUT operation in OffenderManagersApi.
 * @export
 * @interface OffenderManagersApiAllocatePrisonOffenderManagerByNomsNumberUsingPUTRequest
 */
export interface OffenderManagersApiAllocatePrisonOffenderManagerByNomsNumberUsingPUTRequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof OffenderManagersApiAllocatePrisonOffenderManagerByNomsNumberUsingPUT
     */
    readonly nomsNumber: string

    /**
     * prisonOffenderManager
     * @type {CreatePrisonOffenderManager}
     * @memberof OffenderManagersApiAllocatePrisonOffenderManagerByNomsNumberUsingPUT
     */
    readonly prisonOffenderManager: CreatePrisonOffenderManager
}

/**
 * Request parameters for deallocatePrisonOffenderManagerByNomsNumberUsingDELETE operation in OffenderManagersApi.
 * @export
 * @interface OffenderManagersApiDeallocatePrisonOffenderManagerByNomsNumberUsingDELETERequest
 */
export interface OffenderManagersApiDeallocatePrisonOffenderManagerByNomsNumberUsingDELETERequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof OffenderManagersApiDeallocatePrisonOffenderManagerByNomsNumberUsingDELETE
     */
    readonly nomsNumber: string
}

/**
 * Request parameters for getAllOffenderManagersForOffenderUsingGET operation in OffenderManagersApi.
 * @export
 * @interface OffenderManagersApiGetAllOffenderManagersForOffenderUsingGETRequest
 */
export interface OffenderManagersApiGetAllOffenderManagersForOffenderUsingGETRequest {
    /**
     * Nomis number for the offender
     * @type {string}
     * @memberof OffenderManagersApiGetAllOffenderManagersForOffenderUsingGET
     */
    readonly nomsNumber: string

    /**
     * include teams on the ProbationArea records
     * @type {boolean}
     * @memberof OffenderManagersApiGetAllOffenderManagersForOffenderUsingGET
     */
    readonly includeProbationAreaTeams?: boolean
}

/**
 * Request parameters for getAllOffenderManagersForOffenderbyCrnUsingGET operation in OffenderManagersApi.
 * @export
 * @interface OffenderManagersApiGetAllOffenderManagersForOffenderbyCrnUsingGETRequest
 */
export interface OffenderManagersApiGetAllOffenderManagersForOffenderbyCrnUsingGETRequest {
    /**
     * CRN for the offender
     * @type {string}
     * @memberof OffenderManagersApiGetAllOffenderManagersForOffenderbyCrnUsingGET
     */
    readonly crn: string

    /**
     * include teams on the ProbationArea records
     * @type {boolean}
     * @memberof OffenderManagersApiGetAllOffenderManagersForOffenderbyCrnUsingGET
     */
    readonly includeProbationAreaTeams?: boolean
}

/**
 * Request parameters for getResponsibleOfficersForOffenderUsingGET operation in OffenderManagersApi.
 * @export
 * @interface OffenderManagersApiGetResponsibleOfficersForOffenderUsingGETRequest
 */
export interface OffenderManagersApiGetResponsibleOfficersForOffenderUsingGETRequest {
    /**
     * Nomis number for the offender
     * @type {string}
     * @memberof OffenderManagersApiGetResponsibleOfficersForOffenderUsingGET
     */
    readonly nomsNumber: string

    /**
     * Current only
     * @type {boolean}
     * @memberof OffenderManagersApiGetResponsibleOfficersForOffenderUsingGET
     */
    readonly current?: boolean
}

/**
 * Request parameters for switchResponsibleOfficerUsingPUT operation in OffenderManagersApi.
 * @export
 * @interface OffenderManagersApiSwitchResponsibleOfficerUsingPUTRequest
 */
export interface OffenderManagersApiSwitchResponsibleOfficerUsingPUTRequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof OffenderManagersApiSwitchResponsibleOfficerUsingPUT
     */
    readonly nomsNumber: string

    /**
     * responsibleOfficerSwitch
     * @type {ResponsibleOfficerSwitch}
     * @memberof OffenderManagersApiSwitchResponsibleOfficerUsingPUT
     */
    readonly responsibleOfficerSwitch: ResponsibleOfficerSwitch
}

/**
 * OffenderManagersApi - object-oriented interface
 * @export
 * @class OffenderManagersApi
 * @extends {BaseAPI}
 */
export class OffenderManagersApi extends BaseAPI {
    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Allocates the prison offender manager for an offender in custody. This operation may also have a side affect of creating a Staff member if one matching the name does not already exist. An existing staff member can be used if the staff id is supplied.
     * @param {OffenderManagersApiAllocatePrisonOffenderManagerByNomsNumberUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffenderManagersApi
     */
    public allocatePrisonOffenderManagerByNomsNumberUsingPUT(requestParameters: OffenderManagersApiAllocatePrisonOffenderManagerByNomsNumberUsingPUTRequest, options?: any) {
        return OffenderManagersApiFp(this.configuration).allocatePrisonOffenderManagerByNomsNumberUsingPUT(requestParameters.nomsNumber, requestParameters.prisonOffenderManager, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Deallocates the prison offender manager for an offender in custody. The POM is set back to its unallocated state
     * @param {OffenderManagersApiDeallocatePrisonOffenderManagerByNomsNumberUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffenderManagersApi
     */
    public deallocatePrisonOffenderManagerByNomsNumberUsingDELETE(requestParameters: OffenderManagersApiDeallocatePrisonOffenderManagerByNomsNumberUsingDELETERequest, options?: any) {
        return OffenderManagersApiFp(this.configuration).deallocatePrisonOffenderManagerByNomsNumberUsingDELETE(requestParameters.nomsNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts a NOMIS offender nomsNumber in the format A9999AA
     * @summary Returns the current community and prison offender managers for an offender
     * @param {OffenderManagersApiGetAllOffenderManagersForOffenderUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffenderManagersApi
     */
    public getAllOffenderManagersForOffenderUsingGET(requestParameters: OffenderManagersApiGetAllOffenderManagersForOffenderUsingGETRequest, options?: any) {
        return OffenderManagersApiFp(this.configuration).getAllOffenderManagersForOffenderUsingGET(requestParameters.nomsNumber, requestParameters.includeProbationAreaTeams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts an offender CRN in the format A999999
     * @summary Returns the current community and prison offender managers for an offender
     * @param {OffenderManagersApiGetAllOffenderManagersForOffenderbyCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffenderManagersApi
     */
    public getAllOffenderManagersForOffenderbyCrnUsingGET(requestParameters: OffenderManagersApiGetAllOffenderManagersForOffenderbyCrnUsingGETRequest, options?: any) {
        return OffenderManagersApiFp(this.configuration).getAllOffenderManagersForOffenderbyCrnUsingGET(requestParameters.crn, requestParameters.includeProbationAreaTeams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts a NOMIS offender nomsNumber in the format A9999AA
     * @summary Return the responsible officer (RO) for an offender
     * @param {OffenderManagersApiGetResponsibleOfficersForOffenderUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffenderManagersApi
     */
    public getResponsibleOfficersForOffenderUsingGET(requestParameters: OffenderManagersApiGetResponsibleOfficersForOffenderUsingGETRequest, options?: any) {
        return OffenderManagersApiFp(this.configuration).getResponsibleOfficersForOffenderUsingGET(requestParameters.nomsNumber, requestParameters.current, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Sets the responsible officer for an offender to either the current prison offender manager to community offender manager. This will allow the responsible officer to be set to an unallocated offender manager
     * @param {OffenderManagersApiSwitchResponsibleOfficerUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffenderManagersApi
     */
    public switchResponsibleOfficerUsingPUT(requestParameters: OffenderManagersApiSwitchResponsibleOfficerUsingPUTRequest, options?: any) {
        return OffenderManagersApiFp(this.configuration).switchResponsibleOfficerUsingPUT(requestParameters.nomsNumber, requestParameters.responsibleOfficerSwitch, options).then((request) => request(this.axios, this.basePath));
    }
}
