/* tslint:disable */
/* eslint-disable */
/**
 * Community API Documentation
 * <h2>REST service for accessing community probation information</h2><p>This service provides endpoints for accessing data primary sourced from National Delius about people that are of interest to HM Probation Service.</p><p>There is cross-over with the <b>prison-api</b> though suspects on remand will not be surfaced by this API unless that have previously been on probation.</p><div>This service is secured by <b>OAuth2</b> with tokens supplied by HMPPS Auth. Most read-only endpoints require the <b>ROLE_COMMUNITY</b> to access, but check each endpoint where this differs.<p>This service can be accessed in a number environments. For each environment a different set of OAuth2 credentials from HMPPS Auth are required</p><ul><li>Development: <b>https://community-api.dev.probation.service.justice.gov.uk</b></li><li>Test: <b>https://community-api.test.probation.service.justice.gov.uk</b></li><li>Pre-production: <b>https://community-api.pre-prod.delius.probation.hmpps.dsd.io</b></li><li>Production: <b>https://community-api.probation.service.justice.gov.uk</b></li></ul><div>
 *
 * The version of the OpenAPI document: 2021-05-21.4548.b3fe43e
 * Contact: dps-hmpps@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateCustodyKeyDate } from '../model';
// @ts-ignore
import { Custody } from '../model';
// @ts-ignore
import { CustodyKeyDate } from '../model';
// @ts-ignore
import { IDs } from '../model';
// @ts-ignore
import { ReplaceCustodyKeyDates } from '../model';
// @ts-ignore
import { TeamCreationResult } from '../model';
// @ts-ignore
import { UpdateCustody } from '../model';
// @ts-ignore
import { UpdateCustodyBookingNumber } from '../model';
// @ts-ignore
import { UpdateOffenderNomsNumber } from '../model';
/**
 * CustodyApi - axios parameter creator
 * @export
 */
export const CustodyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates teams in each prison for prison offender managers. For each team the Unallocated staff member will also be created. Only teams or staff that are missing will be created. This only needs to run once per environment or when a new prison is added to Delius
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMissingPrisonOffenderManagerTeamsUsingPOST: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/secure/teams/prisonOffenderManagers/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByCrnUsingDELETE: async (crn: string, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByCrnUsingDELETE', 'crn', crn)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByCrnUsingDELETE', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/crn/{crn}/custody/keyDates/{typeCode}`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByNomsNumberUsingDELETE: async (nomsNumber: string, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByNomsNumberUsingDELETE', 'nomsNumber', nomsNumber)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByNomsNumberUsingDELETE', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/custody/keyDates/{typeCode}`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByOffenderIdUsingDELETE: async (offenderId: number, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offenderId' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByOffenderIdUsingDELETE', 'offenderId', offenderId)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByOffenderIdUsingDELETE', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/offenderId/{offenderId}/custody/keyDates/{typeCode}`
                .replace(`{${"offenderId"}}`, encodeURIComponent(String(offenderId)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the associated custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE: async (prisonBookingNumber: string, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'prisonBookingNumber' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE', 'prisonBookingNumber', prisonBookingNumber)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/prisonBookingNumber/{prisonBookingNumber}/custody/keyDates/{typeCode}`
                .replace(`{${"prisonBookingNumber"}}`, encodeURIComponent(String(prisonBookingNumber)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByCrnUsingGET: async (crn: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getAllCustodyKeyDateByCrnUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/custody/keyDates`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all custody key dates for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByNomsNumberUsingGET: async (nomsNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getAllCustodyKeyDateByNomsNumberUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/custody/keyDates`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByOffenderIdUsingGET: async (offenderId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offenderId' is not null or undefined
            assertParamExists('getAllCustodyKeyDateByOffenderIdUsingGET', 'offenderId', offenderId)
            const localVarPath = `/secure/offenders/offenderId/{offenderId}/custody/keyDates`
                .replace(`{${"offenderId"}}`, encodeURIComponent(String(offenderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByPrisonBookingNumberUsingGET: async (prisonBookingNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'prisonBookingNumber' is not null or undefined
            assertParamExists('getAllCustodyKeyDateByPrisonBookingNumberUsingGET', 'prisonBookingNumber', prisonBookingNumber)
            const localVarPath = `/secure/offenders/prisonBookingNumber/{prisonBookingNumber}/custody/keyDates`
                .replace(`{${"prisonBookingNumber"}}`, encodeURIComponent(String(prisonBookingNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the current custody record
         * @param {string} bookingNumber bookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyByBookNumberUsingGET: async (bookingNumber: string, nomsNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingNumber' is not null or undefined
            assertParamExists('getCustodyByBookNumberUsingGET', 'bookingNumber', bookingNumber)
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getCustodyByBookNumberUsingGET', 'nomsNumber', nomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/custody/bookingNumber/{bookingNumber}`
                .replace(`{${"bookingNumber"}}`, encodeURIComponent(String(bookingNumber)))
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the current custody record
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyByConvictionIdUsingGET: async (convictionId: number, crn: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'convictionId' is not null or undefined
            assertParamExists('getCustodyByConvictionIdUsingGET', 'convictionId', convictionId)
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getCustodyByConvictionIdUsingGET', 'crn', crn)
            const localVarPath = `/secure/offenders/crn/{crn}/custody/convictionId/{convictionId}`
                .replace(`{${"convictionId"}}`, encodeURIComponent(String(convictionId)))
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByCrnUsingGET: async (crn: string, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('getCustodyKeyDateByCrnUsingGET', 'crn', crn)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('getCustodyKeyDateByCrnUsingGET', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/crn/{crn}/custody/keyDates/{typeCode}`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByNomsNumberUsingGET: async (nomsNumber: string, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('getCustodyKeyDateByNomsNumberUsingGET', 'nomsNumber', nomsNumber)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('getCustodyKeyDateByNomsNumberUsingGET', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/custody/keyDates/{typeCode}`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByOffenderIdUsingGET: async (offenderId: number, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offenderId' is not null or undefined
            assertParamExists('getCustodyKeyDateByOffenderIdUsingGET', 'offenderId', offenderId)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('getCustodyKeyDateByOffenderIdUsingGET', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/offenderId/{offenderId}/custody/keyDates/{typeCode}`
                .replace(`{${"offenderId"}}`, encodeURIComponent(String(offenderId)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a custody key date for the related custodial conviction with the matching prison booking
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByPrisonBookingNumberUsingGET: async (prisonBookingNumber: string, typeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'prisonBookingNumber' is not null or undefined
            assertParamExists('getCustodyKeyDateByPrisonBookingNumberUsingGET', 'prisonBookingNumber', prisonBookingNumber)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('getCustodyKeyDateByPrisonBookingNumberUsingGET', 'typeCode', typeCode)
            const localVarPath = `/secure/offenders/prisonBookingNumber/{prisonBookingNumber}/custody/keyDates/{typeCode}`
                .replace(`{${"prisonBookingNumber"}}`, encodeURIComponent(String(prisonBookingNumber)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByCrnUsingPUT: async (crn: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('putCustodyKeyDateByCrnUsingPUT', 'crn', crn)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('putCustodyKeyDateByCrnUsingPUT', 'typeCode', typeCode)
            // verify required parameter 'custodyKeyDate' is not null or undefined
            assertParamExists('putCustodyKeyDateByCrnUsingPUT', 'custodyKeyDate', custodyKeyDate)
            const localVarPath = `/secure/offenders/crn/{crn}/custody/keyDates/{typeCode}`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(custodyKeyDate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByNomsNumberUsingPUT: async (nomsNumber: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('putCustodyKeyDateByNomsNumberUsingPUT', 'nomsNumber', nomsNumber)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('putCustodyKeyDateByNomsNumberUsingPUT', 'typeCode', typeCode)
            // verify required parameter 'custodyKeyDate' is not null or undefined
            assertParamExists('putCustodyKeyDateByNomsNumberUsingPUT', 'custodyKeyDate', custodyKeyDate)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/custody/keyDates/{typeCode}`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(custodyKeyDate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByOffenderIdUsingPUT: async (offenderId: number, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offenderId' is not null or undefined
            assertParamExists('putCustodyKeyDateByOffenderIdUsingPUT', 'offenderId', offenderId)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('putCustodyKeyDateByOffenderIdUsingPUT', 'typeCode', typeCode)
            // verify required parameter 'custodyKeyDate' is not null or undefined
            assertParamExists('putCustodyKeyDateByOffenderIdUsingPUT', 'custodyKeyDate', custodyKeyDate)
            const localVarPath = `/secure/offenders/offenderId/{offenderId}/custody/keyDates/{typeCode}`
                .replace(`{${"offenderId"}}`, encodeURIComponent(String(offenderId)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(custodyKeyDate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByPrisonBookingNumberUsingPUT: async (prisonBookingNumber: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'prisonBookingNumber' is not null or undefined
            assertParamExists('putCustodyKeyDateByPrisonBookingNumberUsingPUT', 'prisonBookingNumber', prisonBookingNumber)
            // verify required parameter 'typeCode' is not null or undefined
            assertParamExists('putCustodyKeyDateByPrisonBookingNumberUsingPUT', 'typeCode', typeCode)
            // verify required parameter 'custodyKeyDate' is not null or undefined
            assertParamExists('putCustodyKeyDateByPrisonBookingNumberUsingPUT', 'custodyKeyDate', custodyKeyDate)
            const localVarPath = `/secure/offenders/prisonBookingNumber/{prisonBookingNumber}/custody/keyDates/{typeCode}`
                .replace(`{${"prisonBookingNumber"}}`, encodeURIComponent(String(prisonBookingNumber)))
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(custodyKeyDate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Replaces all key dates specified in body. Key dates are either added or replaced or deleted if absent (see ReplaceCustodyKeyDates for the list). The the custodial conviction must be active
         * @param {string} bookingNumber bookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {ReplaceCustodyKeyDates} replaceCustodyKeyDates replaceCustodyKeyDates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST: async (bookingNumber: string, nomsNumber: string, replaceCustodyKeyDates: ReplaceCustodyKeyDates, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingNumber' is not null or undefined
            assertParamExists('replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST', 'bookingNumber', bookingNumber)
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST', 'nomsNumber', nomsNumber)
            // verify required parameter 'replaceCustodyKeyDates' is not null or undefined
            assertParamExists('replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST', 'replaceCustodyKeyDates', replaceCustodyKeyDates)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/bookingNumber/{bookingNumber}/custody/keyDates`
                .replace(`{${"bookingNumber"}}`, encodeURIComponent(String(bookingNumber)))
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(replaceCustodyKeyDates, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * In the very rare circumstances more than one offender is found with matching noms number, all will be updated and their identifiers returned.
         * @summary Updates the offender record(s) with the new NOMS number in UpdateOffenderNomsNumber replacing the existing number.
         * @param {string} originalNomsNumber originalNomsNumber
         * @param {UpdateOffenderNomsNumber} updateOffenderNomsNumber updateOffenderNomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceOffenderNomsNumberUsingPUT: async (originalNomsNumber: string, updateOffenderNomsNumber: UpdateOffenderNomsNumber, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'originalNomsNumber' is not null or undefined
            assertParamExists('replaceOffenderNomsNumberUsingPUT', 'originalNomsNumber', originalNomsNumber)
            // verify required parameter 'updateOffenderNomsNumber' is not null or undefined
            assertParamExists('replaceOffenderNomsNumberUsingPUT', 'updateOffenderNomsNumber', updateOffenderNomsNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{originalNomsNumber}/nomsNumber`
                .replace(`{${"originalNomsNumber"}}`, encodeURIComponent(String(originalNomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOffenderNomsNumber, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the associated custody record with booking number in UpdateCustodyBookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {UpdateCustodyBookingNumber} updateCustodyBookingNumber updateCustodyBookingNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustodyBookingNumberUsingPUT: async (nomsNumber: string, updateCustodyBookingNumber: UpdateCustodyBookingNumber, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('updateCustodyBookingNumberUsingPUT', 'nomsNumber', nomsNumber)
            // verify required parameter 'updateCustodyBookingNumber' is not null or undefined
            assertParamExists('updateCustodyBookingNumberUsingPUT', 'updateCustodyBookingNumber', updateCustodyBookingNumber)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/custody/bookingNumber`
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustodyBookingNumber, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the associated custody record with changes defined in UpdateCustody
         * @param {string} bookingNumber bookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {UpdateCustody} updateCustody updateCustody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustodyUsingPUT: async (bookingNumber: string, nomsNumber: string, updateCustody: UpdateCustody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingNumber' is not null or undefined
            assertParamExists('updateCustodyUsingPUT', 'bookingNumber', bookingNumber)
            // verify required parameter 'nomsNumber' is not null or undefined
            assertParamExists('updateCustodyUsingPUT', 'nomsNumber', nomsNumber)
            // verify required parameter 'updateCustody' is not null or undefined
            assertParamExists('updateCustodyUsingPUT', 'updateCustody', updateCustody)
            const localVarPath = `/secure/offenders/nomsNumber/{nomsNumber}/custody/bookingNumber/{bookingNumber}`
                .replace(`{${"bookingNumber"}}`, encodeURIComponent(String(bookingNumber)))
                .replace(`{${"nomsNumber"}}`, encodeURIComponent(String(nomsNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the offender record with the NOMS number in UpdateOffenderNomsNumber
         * @param {string} crn crn
         * @param {UpdateOffenderNomsNumber} updateOffenderNomsNumber updateOffenderNomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOffenderNomsNumberUsingPUT: async (crn: string, updateOffenderNomsNumber: UpdateOffenderNomsNumber, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'crn' is not null or undefined
            assertParamExists('updateOffenderNomsNumberUsingPUT', 'crn', crn)
            // verify required parameter 'updateOffenderNomsNumber' is not null or undefined
            assertParamExists('updateOffenderNomsNumberUsingPUT', 'updateOffenderNomsNumber', updateOffenderNomsNumber)
            const localVarPath = `/secure/offenders/crn/{crn}/nomsNumber`
                .replace(`{${"crn"}}`, encodeURIComponent(String(crn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOffenderNomsNumber, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustodyApi - functional programming interface
 * @export
 */
export const CustodyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustodyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates teams in each prison for prison offender managers. For each team the Unallocated staff member will also be created. Only teams or staff that are missing will be created. This only needs to run once per environment or when a new prison is added to Delius
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMissingPrisonOffenderManagerTeamsUsingPOST(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamCreationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMissingPrisonOffenderManagerTeamsUsingPOST(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustodyKeyDateByCrnUsingDELETE(crn: string, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustodyKeyDateByCrnUsingDELETE(crn, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustodyKeyDateByNomsNumberUsingDELETE(nomsNumber: string, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustodyKeyDateByNomsNumberUsingDELETE(nomsNumber, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustodyKeyDateByOffenderIdUsingDELETE(offenderId: number, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustodyKeyDateByOffenderIdUsingDELETE(offenderId, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the associated custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE(prisonBookingNumber: string, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE(prisonBookingNumber, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCustodyKeyDateByCrnUsingGET(crn: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustodyKeyDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCustodyKeyDateByCrnUsingGET(crn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets all custody key dates for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCustodyKeyDateByNomsNumberUsingGET(nomsNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustodyKeyDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCustodyKeyDateByNomsNumberUsingGET(nomsNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCustodyKeyDateByOffenderIdUsingGET(offenderId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustodyKeyDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCustodyKeyDateByOffenderIdUsingGET(offenderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustodyKeyDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the current custody record
         * @param {string} bookingNumber bookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustodyByBookNumberUsingGET(bookingNumber: string, nomsNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Custody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustodyByBookNumberUsingGET(bookingNumber, nomsNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the current custody record
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustodyByConvictionIdUsingGET(convictionId: number, crn: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Custody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustodyByConvictionIdUsingGET(convictionId, crn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustodyKeyDateByCrnUsingGET(crn: string, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustodyKeyDateByCrnUsingGET(crn, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustodyKeyDateByNomsNumberUsingGET(nomsNumber: string, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustodyKeyDateByNomsNumberUsingGET(nomsNumber, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustodyKeyDateByOffenderIdUsingGET(offenderId: number, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustodyKeyDateByOffenderIdUsingGET(offenderId, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a custody key date for the related custodial conviction with the matching prison booking
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber: string, typeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber, typeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCustodyKeyDateByCrnUsingPUT(crn: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCustodyKeyDateByCrnUsingPUT(crn, typeCode, custodyKeyDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCustodyKeyDateByNomsNumberUsingPUT(nomsNumber: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCustodyKeyDateByNomsNumberUsingPUT(nomsNumber, typeCode, custodyKeyDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCustodyKeyDateByOffenderIdUsingPUT(offenderId: number, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCustodyKeyDateByOffenderIdUsingPUT(offenderId, typeCode, custodyKeyDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCustodyKeyDateByPrisonBookingNumberUsingPUT(prisonBookingNumber: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustodyKeyDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCustodyKeyDateByPrisonBookingNumberUsingPUT(prisonBookingNumber, typeCode, custodyKeyDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Replaces all key dates specified in body. Key dates are either added or replaced or deleted if absent (see ReplaceCustodyKeyDates for the list). The the custodial conviction must be active
         * @param {string} bookingNumber bookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {ReplaceCustodyKeyDates} replaceCustodyKeyDates replaceCustodyKeyDates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST(bookingNumber: string, nomsNumber: string, replaceCustodyKeyDates: ReplaceCustodyKeyDates, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Custody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST(bookingNumber, nomsNumber, replaceCustodyKeyDates, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * In the very rare circumstances more than one offender is found with matching noms number, all will be updated and their identifiers returned.
         * @summary Updates the offender record(s) with the new NOMS number in UpdateOffenderNomsNumber replacing the existing number.
         * @param {string} originalNomsNumber originalNomsNumber
         * @param {UpdateOffenderNomsNumber} updateOffenderNomsNumber updateOffenderNomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceOffenderNomsNumberUsingPUT(originalNomsNumber: string, updateOffenderNomsNumber: UpdateOffenderNomsNumber, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IDs>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceOffenderNomsNumberUsingPUT(originalNomsNumber, updateOffenderNomsNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates the associated custody record with booking number in UpdateCustodyBookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {UpdateCustodyBookingNumber} updateCustodyBookingNumber updateCustodyBookingNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustodyBookingNumberUsingPUT(nomsNumber: string, updateCustodyBookingNumber: UpdateCustodyBookingNumber, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Custody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustodyBookingNumberUsingPUT(nomsNumber, updateCustodyBookingNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates the associated custody record with changes defined in UpdateCustody
         * @param {string} bookingNumber bookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {UpdateCustody} updateCustody updateCustody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustodyUsingPUT(bookingNumber: string, nomsNumber: string, updateCustody: UpdateCustody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Custody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustodyUsingPUT(bookingNumber, nomsNumber, updateCustody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates the offender record with the NOMS number in UpdateOffenderNomsNumber
         * @param {string} crn crn
         * @param {UpdateOffenderNomsNumber} updateOffenderNomsNumber updateOffenderNomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOffenderNomsNumberUsingPUT(crn: string, updateOffenderNomsNumber: UpdateOffenderNomsNumber, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IDs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOffenderNomsNumberUsingPUT(crn, updateOffenderNomsNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustodyApi - factory interface
 * @export
 */
export const CustodyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustodyApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates teams in each prison for prison offender managers. For each team the Unallocated staff member will also be created. Only teams or staff that are missing will be created. This only needs to run once per environment or when a new prison is added to Delius
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMissingPrisonOffenderManagerTeamsUsingPOST(options?: any): AxiosPromise<TeamCreationResult> {
            return localVarFp.createMissingPrisonOffenderManagerTeamsUsingPOST(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByCrnUsingDELETE(crn: string, typeCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCustodyKeyDateByCrnUsingDELETE(crn, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByNomsNumberUsingDELETE(nomsNumber: string, typeCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCustodyKeyDateByNomsNumberUsingDELETE(nomsNumber, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByOffenderIdUsingDELETE(offenderId: number, typeCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCustodyKeyDateByOffenderIdUsingDELETE(offenderId, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Deletes the custody key date for the associated custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE(prisonBookingNumber: string, typeCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE(prisonBookingNumber, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByCrnUsingGET(crn: string, options?: any): AxiosPromise<Array<CustodyKeyDate>> {
            return localVarFp.getAllCustodyKeyDateByCrnUsingGET(crn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets all custody key dates for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByNomsNumberUsingGET(nomsNumber: string, options?: any): AxiosPromise<Array<CustodyKeyDate>> {
            return localVarFp.getAllCustodyKeyDateByNomsNumberUsingGET(nomsNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByOffenderIdUsingGET(offenderId: number, options?: any): AxiosPromise<Array<CustodyKeyDate>> {
            return localVarFp.getAllCustodyKeyDateByOffenderIdUsingGET(offenderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a all custody key dates for the active custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber: string, options?: any): AxiosPromise<Array<CustodyKeyDate>> {
            return localVarFp.getAllCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the current custody record
         * @param {string} bookingNumber bookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyByBookNumberUsingGET(bookingNumber: string, nomsNumber: string, options?: any): AxiosPromise<Custody> {
            return localVarFp.getCustodyByBookNumberUsingGET(bookingNumber, nomsNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the current custody record
         * @param {number} convictionId convictionId
         * @param {string} crn crn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyByConvictionIdUsingGET(convictionId: number, crn: string, options?: any): AxiosPromise<Custody> {
            return localVarFp.getCustodyByConvictionIdUsingGET(convictionId, crn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByCrnUsingGET(crn: string, typeCode: string, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.getCustodyKeyDateByCrnUsingGET(crn, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByNomsNumberUsingGET(nomsNumber: string, typeCode: string, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.getCustodyKeyDateByNomsNumberUsingGET(nomsNumber, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByOffenderIdUsingGET(offenderId: number, typeCode: string, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.getCustodyKeyDateByOffenderIdUsingGET(offenderId, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a custody key date for the related custodial conviction with the matching prison booking
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber: string, typeCode: string, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.getCustodyKeyDateByPrisonBookingNumberUsingGET(prisonBookingNumber, typeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} crn crn
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByCrnUsingPUT(crn: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.putCustodyKeyDateByCrnUsingPUT(crn, typeCode, custodyKeyDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} nomsNumber nomsNumber
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByNomsNumberUsingPUT(nomsNumber: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.putCustodyKeyDateByNomsNumberUsingPUT(nomsNumber, typeCode, custodyKeyDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {number} offenderId offenderId
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByOffenderIdUsingPUT(offenderId: number, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.putCustodyKeyDateByOffenderIdUsingPUT(offenderId, typeCode, custodyKeyDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Adds or replaces a custody key date for the active custodial conviction
         * @param {string} prisonBookingNumber prisonBookingNumber
         * @param {string} typeCode typeCode
         * @param {CreateCustodyKeyDate} custodyKeyDate custodyKeyDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustodyKeyDateByPrisonBookingNumberUsingPUT(prisonBookingNumber: string, typeCode: string, custodyKeyDate: CreateCustodyKeyDate, options?: any): AxiosPromise<CustodyKeyDate> {
            return localVarFp.putCustodyKeyDateByPrisonBookingNumberUsingPUT(prisonBookingNumber, typeCode, custodyKeyDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
         * @summary Replaces all key dates specified in body. Key dates are either added or replaced or deleted if absent (see ReplaceCustodyKeyDates for the list). The the custodial conviction must be active
         * @param {string} bookingNumber bookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {ReplaceCustodyKeyDates} replaceCustodyKeyDates replaceCustodyKeyDates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST(bookingNumber: string, nomsNumber: string, replaceCustodyKeyDates: ReplaceCustodyKeyDates, options?: any): AxiosPromise<Custody> {
            return localVarFp.replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST(bookingNumber, nomsNumber, replaceCustodyKeyDates, options).then((request) => request(axios, basePath));
        },
        /**
         * In the very rare circumstances more than one offender is found with matching noms number, all will be updated and their identifiers returned.
         * @summary Updates the offender record(s) with the new NOMS number in UpdateOffenderNomsNumber replacing the existing number.
         * @param {string} originalNomsNumber originalNomsNumber
         * @param {UpdateOffenderNomsNumber} updateOffenderNomsNumber updateOffenderNomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceOffenderNomsNumberUsingPUT(originalNomsNumber: string, updateOffenderNomsNumber: UpdateOffenderNomsNumber, options?: any): AxiosPromise<Array<IDs>> {
            return localVarFp.replaceOffenderNomsNumberUsingPUT(originalNomsNumber, updateOffenderNomsNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates the associated custody record with booking number in UpdateCustodyBookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {UpdateCustodyBookingNumber} updateCustodyBookingNumber updateCustodyBookingNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustodyBookingNumberUsingPUT(nomsNumber: string, updateCustodyBookingNumber: UpdateCustodyBookingNumber, options?: any): AxiosPromise<Custody> {
            return localVarFp.updateCustodyBookingNumberUsingPUT(nomsNumber, updateCustodyBookingNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates the associated custody record with changes defined in UpdateCustody
         * @param {string} bookingNumber bookingNumber
         * @param {string} nomsNumber nomsNumber
         * @param {UpdateCustody} updateCustody updateCustody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustodyUsingPUT(bookingNumber: string, nomsNumber: string, updateCustody: UpdateCustody, options?: any): AxiosPromise<Custody> {
            return localVarFp.updateCustodyUsingPUT(bookingNumber, nomsNumber, updateCustody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates the offender record with the NOMS number in UpdateOffenderNomsNumber
         * @param {string} crn crn
         * @param {UpdateOffenderNomsNumber} updateOffenderNomsNumber updateOffenderNomsNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOffenderNomsNumberUsingPUT(crn: string, updateOffenderNomsNumber: UpdateOffenderNomsNumber, options?: any): AxiosPromise<IDs> {
            return localVarFp.updateOffenderNomsNumberUsingPUT(crn, updateOffenderNomsNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteCustodyKeyDateByCrnUsingDELETE operation in CustodyApi.
 * @export
 * @interface CustodyApiDeleteCustodyKeyDateByCrnUsingDELETERequest
 */
export interface CustodyApiDeleteCustodyKeyDateByCrnUsingDELETERequest {
    /**
     * crn
     * @type {string}
     * @memberof CustodyApiDeleteCustodyKeyDateByCrnUsingDELETE
     */
    readonly crn: string

    /**
     * typeCode
     * @type {string}
     * @memberof CustodyApiDeleteCustodyKeyDateByCrnUsingDELETE
     */
    readonly typeCode: string
}

/**
 * Request parameters for deleteCustodyKeyDateByNomsNumberUsingDELETE operation in CustodyApi.
 * @export
 * @interface CustodyApiDeleteCustodyKeyDateByNomsNumberUsingDELETERequest
 */
export interface CustodyApiDeleteCustodyKeyDateByNomsNumberUsingDELETERequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof CustodyApiDeleteCustodyKeyDateByNomsNumberUsingDELETE
     */
    readonly nomsNumber: string

    /**
     * typeCode
     * @type {string}
     * @memberof CustodyApiDeleteCustodyKeyDateByNomsNumberUsingDELETE
     */
    readonly typeCode: string
}

/**
 * Request parameters for deleteCustodyKeyDateByOffenderIdUsingDELETE operation in CustodyApi.
 * @export
 * @interface CustodyApiDeleteCustodyKeyDateByOffenderIdUsingDELETERequest
 */
export interface CustodyApiDeleteCustodyKeyDateByOffenderIdUsingDELETERequest {
    /**
     * offenderId
     * @type {number}
     * @memberof CustodyApiDeleteCustodyKeyDateByOffenderIdUsingDELETE
     */
    readonly offenderId: number

    /**
     * typeCode
     * @type {string}
     * @memberof CustodyApiDeleteCustodyKeyDateByOffenderIdUsingDELETE
     */
    readonly typeCode: string
}

/**
 * Request parameters for deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE operation in CustodyApi.
 * @export
 * @interface CustodyApiDeleteCustodyKeyDateByPrisonBookingNumberUsingDELETERequest
 */
export interface CustodyApiDeleteCustodyKeyDateByPrisonBookingNumberUsingDELETERequest {
    /**
     * prisonBookingNumber
     * @type {string}
     * @memberof CustodyApiDeleteCustodyKeyDateByPrisonBookingNumberUsingDELETE
     */
    readonly prisonBookingNumber: string

    /**
     * typeCode
     * @type {string}
     * @memberof CustodyApiDeleteCustodyKeyDateByPrisonBookingNumberUsingDELETE
     */
    readonly typeCode: string
}

/**
 * Request parameters for getAllCustodyKeyDateByCrnUsingGET operation in CustodyApi.
 * @export
 * @interface CustodyApiGetAllCustodyKeyDateByCrnUsingGETRequest
 */
export interface CustodyApiGetAllCustodyKeyDateByCrnUsingGETRequest {
    /**
     * crn
     * @type {string}
     * @memberof CustodyApiGetAllCustodyKeyDateByCrnUsingGET
     */
    readonly crn: string
}

/**
 * Request parameters for getAllCustodyKeyDateByNomsNumberUsingGET operation in CustodyApi.
 * @export
 * @interface CustodyApiGetAllCustodyKeyDateByNomsNumberUsingGETRequest
 */
export interface CustodyApiGetAllCustodyKeyDateByNomsNumberUsingGETRequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof CustodyApiGetAllCustodyKeyDateByNomsNumberUsingGET
     */
    readonly nomsNumber: string
}

/**
 * Request parameters for getAllCustodyKeyDateByOffenderIdUsingGET operation in CustodyApi.
 * @export
 * @interface CustodyApiGetAllCustodyKeyDateByOffenderIdUsingGETRequest
 */
export interface CustodyApiGetAllCustodyKeyDateByOffenderIdUsingGETRequest {
    /**
     * offenderId
     * @type {number}
     * @memberof CustodyApiGetAllCustodyKeyDateByOffenderIdUsingGET
     */
    readonly offenderId: number
}

/**
 * Request parameters for getAllCustodyKeyDateByPrisonBookingNumberUsingGET operation in CustodyApi.
 * @export
 * @interface CustodyApiGetAllCustodyKeyDateByPrisonBookingNumberUsingGETRequest
 */
export interface CustodyApiGetAllCustodyKeyDateByPrisonBookingNumberUsingGETRequest {
    /**
     * prisonBookingNumber
     * @type {string}
     * @memberof CustodyApiGetAllCustodyKeyDateByPrisonBookingNumberUsingGET
     */
    readonly prisonBookingNumber: string
}

/**
 * Request parameters for getCustodyByBookNumberUsingGET operation in CustodyApi.
 * @export
 * @interface CustodyApiGetCustodyByBookNumberUsingGETRequest
 */
export interface CustodyApiGetCustodyByBookNumberUsingGETRequest {
    /**
     * bookingNumber
     * @type {string}
     * @memberof CustodyApiGetCustodyByBookNumberUsingGET
     */
    readonly bookingNumber: string

    /**
     * nomsNumber
     * @type {string}
     * @memberof CustodyApiGetCustodyByBookNumberUsingGET
     */
    readonly nomsNumber: string
}

/**
 * Request parameters for getCustodyByConvictionIdUsingGET operation in CustodyApi.
 * @export
 * @interface CustodyApiGetCustodyByConvictionIdUsingGETRequest
 */
export interface CustodyApiGetCustodyByConvictionIdUsingGETRequest {
    /**
     * convictionId
     * @type {number}
     * @memberof CustodyApiGetCustodyByConvictionIdUsingGET
     */
    readonly convictionId: number

    /**
     * crn
     * @type {string}
     * @memberof CustodyApiGetCustodyByConvictionIdUsingGET
     */
    readonly crn: string
}

/**
 * Request parameters for getCustodyKeyDateByCrnUsingGET operation in CustodyApi.
 * @export
 * @interface CustodyApiGetCustodyKeyDateByCrnUsingGETRequest
 */
export interface CustodyApiGetCustodyKeyDateByCrnUsingGETRequest {
    /**
     * crn
     * @type {string}
     * @memberof CustodyApiGetCustodyKeyDateByCrnUsingGET
     */
    readonly crn: string

    /**
     * typeCode
     * @type {string}
     * @memberof CustodyApiGetCustodyKeyDateByCrnUsingGET
     */
    readonly typeCode: string
}

/**
 * Request parameters for getCustodyKeyDateByNomsNumberUsingGET operation in CustodyApi.
 * @export
 * @interface CustodyApiGetCustodyKeyDateByNomsNumberUsingGETRequest
 */
export interface CustodyApiGetCustodyKeyDateByNomsNumberUsingGETRequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof CustodyApiGetCustodyKeyDateByNomsNumberUsingGET
     */
    readonly nomsNumber: string

    /**
     * typeCode
     * @type {string}
     * @memberof CustodyApiGetCustodyKeyDateByNomsNumberUsingGET
     */
    readonly typeCode: string
}

/**
 * Request parameters for getCustodyKeyDateByOffenderIdUsingGET operation in CustodyApi.
 * @export
 * @interface CustodyApiGetCustodyKeyDateByOffenderIdUsingGETRequest
 */
export interface CustodyApiGetCustodyKeyDateByOffenderIdUsingGETRequest {
    /**
     * offenderId
     * @type {number}
     * @memberof CustodyApiGetCustodyKeyDateByOffenderIdUsingGET
     */
    readonly offenderId: number

    /**
     * typeCode
     * @type {string}
     * @memberof CustodyApiGetCustodyKeyDateByOffenderIdUsingGET
     */
    readonly typeCode: string
}

/**
 * Request parameters for getCustodyKeyDateByPrisonBookingNumberUsingGET operation in CustodyApi.
 * @export
 * @interface CustodyApiGetCustodyKeyDateByPrisonBookingNumberUsingGETRequest
 */
export interface CustodyApiGetCustodyKeyDateByPrisonBookingNumberUsingGETRequest {
    /**
     * prisonBookingNumber
     * @type {string}
     * @memberof CustodyApiGetCustodyKeyDateByPrisonBookingNumberUsingGET
     */
    readonly prisonBookingNumber: string

    /**
     * typeCode
     * @type {string}
     * @memberof CustodyApiGetCustodyKeyDateByPrisonBookingNumberUsingGET
     */
    readonly typeCode: string
}

/**
 * Request parameters for putCustodyKeyDateByCrnUsingPUT operation in CustodyApi.
 * @export
 * @interface CustodyApiPutCustodyKeyDateByCrnUsingPUTRequest
 */
export interface CustodyApiPutCustodyKeyDateByCrnUsingPUTRequest {
    /**
     * crn
     * @type {string}
     * @memberof CustodyApiPutCustodyKeyDateByCrnUsingPUT
     */
    readonly crn: string

    /**
     * typeCode
     * @type {string}
     * @memberof CustodyApiPutCustodyKeyDateByCrnUsingPUT
     */
    readonly typeCode: string

    /**
     * custodyKeyDate
     * @type {CreateCustodyKeyDate}
     * @memberof CustodyApiPutCustodyKeyDateByCrnUsingPUT
     */
    readonly custodyKeyDate: CreateCustodyKeyDate
}

/**
 * Request parameters for putCustodyKeyDateByNomsNumberUsingPUT operation in CustodyApi.
 * @export
 * @interface CustodyApiPutCustodyKeyDateByNomsNumberUsingPUTRequest
 */
export interface CustodyApiPutCustodyKeyDateByNomsNumberUsingPUTRequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof CustodyApiPutCustodyKeyDateByNomsNumberUsingPUT
     */
    readonly nomsNumber: string

    /**
     * typeCode
     * @type {string}
     * @memberof CustodyApiPutCustodyKeyDateByNomsNumberUsingPUT
     */
    readonly typeCode: string

    /**
     * custodyKeyDate
     * @type {CreateCustodyKeyDate}
     * @memberof CustodyApiPutCustodyKeyDateByNomsNumberUsingPUT
     */
    readonly custodyKeyDate: CreateCustodyKeyDate
}

/**
 * Request parameters for putCustodyKeyDateByOffenderIdUsingPUT operation in CustodyApi.
 * @export
 * @interface CustodyApiPutCustodyKeyDateByOffenderIdUsingPUTRequest
 */
export interface CustodyApiPutCustodyKeyDateByOffenderIdUsingPUTRequest {
    /**
     * offenderId
     * @type {number}
     * @memberof CustodyApiPutCustodyKeyDateByOffenderIdUsingPUT
     */
    readonly offenderId: number

    /**
     * typeCode
     * @type {string}
     * @memberof CustodyApiPutCustodyKeyDateByOffenderIdUsingPUT
     */
    readonly typeCode: string

    /**
     * custodyKeyDate
     * @type {CreateCustodyKeyDate}
     * @memberof CustodyApiPutCustodyKeyDateByOffenderIdUsingPUT
     */
    readonly custodyKeyDate: CreateCustodyKeyDate
}

/**
 * Request parameters for putCustodyKeyDateByPrisonBookingNumberUsingPUT operation in CustodyApi.
 * @export
 * @interface CustodyApiPutCustodyKeyDateByPrisonBookingNumberUsingPUTRequest
 */
export interface CustodyApiPutCustodyKeyDateByPrisonBookingNumberUsingPUTRequest {
    /**
     * prisonBookingNumber
     * @type {string}
     * @memberof CustodyApiPutCustodyKeyDateByPrisonBookingNumberUsingPUT
     */
    readonly prisonBookingNumber: string

    /**
     * typeCode
     * @type {string}
     * @memberof CustodyApiPutCustodyKeyDateByPrisonBookingNumberUsingPUT
     */
    readonly typeCode: string

    /**
     * custodyKeyDate
     * @type {CreateCustodyKeyDate}
     * @memberof CustodyApiPutCustodyKeyDateByPrisonBookingNumberUsingPUT
     */
    readonly custodyKeyDate: CreateCustodyKeyDate
}

/**
 * Request parameters for replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST operation in CustodyApi.
 * @export
 * @interface CustodyApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOSTRequest
 */
export interface CustodyApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOSTRequest {
    /**
     * bookingNumber
     * @type {string}
     * @memberof CustodyApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST
     */
    readonly bookingNumber: string

    /**
     * nomsNumber
     * @type {string}
     * @memberof CustodyApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST
     */
    readonly nomsNumber: string

    /**
     * replaceCustodyKeyDates
     * @type {ReplaceCustodyKeyDates}
     * @memberof CustodyApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST
     */
    readonly replaceCustodyKeyDates: ReplaceCustodyKeyDates
}

/**
 * Request parameters for replaceOffenderNomsNumberUsingPUT operation in CustodyApi.
 * @export
 * @interface CustodyApiReplaceOffenderNomsNumberUsingPUTRequest
 */
export interface CustodyApiReplaceOffenderNomsNumberUsingPUTRequest {
    /**
     * originalNomsNumber
     * @type {string}
     * @memberof CustodyApiReplaceOffenderNomsNumberUsingPUT
     */
    readonly originalNomsNumber: string

    /**
     * updateOffenderNomsNumber
     * @type {UpdateOffenderNomsNumber}
     * @memberof CustodyApiReplaceOffenderNomsNumberUsingPUT
     */
    readonly updateOffenderNomsNumber: UpdateOffenderNomsNumber
}

/**
 * Request parameters for updateCustodyBookingNumberUsingPUT operation in CustodyApi.
 * @export
 * @interface CustodyApiUpdateCustodyBookingNumberUsingPUTRequest
 */
export interface CustodyApiUpdateCustodyBookingNumberUsingPUTRequest {
    /**
     * nomsNumber
     * @type {string}
     * @memberof CustodyApiUpdateCustodyBookingNumberUsingPUT
     */
    readonly nomsNumber: string

    /**
     * updateCustodyBookingNumber
     * @type {UpdateCustodyBookingNumber}
     * @memberof CustodyApiUpdateCustodyBookingNumberUsingPUT
     */
    readonly updateCustodyBookingNumber: UpdateCustodyBookingNumber
}

/**
 * Request parameters for updateCustodyUsingPUT operation in CustodyApi.
 * @export
 * @interface CustodyApiUpdateCustodyUsingPUTRequest
 */
export interface CustodyApiUpdateCustodyUsingPUTRequest {
    /**
     * bookingNumber
     * @type {string}
     * @memberof CustodyApiUpdateCustodyUsingPUT
     */
    readonly bookingNumber: string

    /**
     * nomsNumber
     * @type {string}
     * @memberof CustodyApiUpdateCustodyUsingPUT
     */
    readonly nomsNumber: string

    /**
     * updateCustody
     * @type {UpdateCustody}
     * @memberof CustodyApiUpdateCustodyUsingPUT
     */
    readonly updateCustody: UpdateCustody
}

/**
 * Request parameters for updateOffenderNomsNumberUsingPUT operation in CustodyApi.
 * @export
 * @interface CustodyApiUpdateOffenderNomsNumberUsingPUTRequest
 */
export interface CustodyApiUpdateOffenderNomsNumberUsingPUTRequest {
    /**
     * crn
     * @type {string}
     * @memberof CustodyApiUpdateOffenderNomsNumberUsingPUT
     */
    readonly crn: string

    /**
     * updateOffenderNomsNumber
     * @type {UpdateOffenderNomsNumber}
     * @memberof CustodyApiUpdateOffenderNomsNumberUsingPUT
     */
    readonly updateOffenderNomsNumber: UpdateOffenderNomsNumber
}

/**
 * CustodyApi - object-oriented interface
 * @export
 * @class CustodyApi
 * @extends {BaseAPI}
 */
export class CustodyApi extends BaseAPI {
    /**
     * 
     * @summary Creates teams in each prison for prison offender managers. For each team the Unallocated staff member will also be created. Only teams or staff that are missing will be created. This only needs to run once per environment or when a new prison is added to Delius
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public createMissingPrisonOffenderManagerTeamsUsingPOST(options?: any) {
        return CustodyApiFp(this.configuration).createMissingPrisonOffenderManagerTeamsUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Deletes the custody key date for the active custodial conviction
     * @param {CustodyApiDeleteCustodyKeyDateByCrnUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public deleteCustodyKeyDateByCrnUsingDELETE(requestParameters: CustodyApiDeleteCustodyKeyDateByCrnUsingDELETERequest, options?: any) {
        return CustodyApiFp(this.configuration).deleteCustodyKeyDateByCrnUsingDELETE(requestParameters.crn, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Deletes the custody key date for the active custodial conviction
     * @param {CustodyApiDeleteCustodyKeyDateByNomsNumberUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public deleteCustodyKeyDateByNomsNumberUsingDELETE(requestParameters: CustodyApiDeleteCustodyKeyDateByNomsNumberUsingDELETERequest, options?: any) {
        return CustodyApiFp(this.configuration).deleteCustodyKeyDateByNomsNumberUsingDELETE(requestParameters.nomsNumber, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Deletes the custody key date for the active custodial conviction
     * @param {CustodyApiDeleteCustodyKeyDateByOffenderIdUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public deleteCustodyKeyDateByOffenderIdUsingDELETE(requestParameters: CustodyApiDeleteCustodyKeyDateByOffenderIdUsingDELETERequest, options?: any) {
        return CustodyApiFp(this.configuration).deleteCustodyKeyDateByOffenderIdUsingDELETE(requestParameters.offenderId, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Deletes the custody key date for the associated custodial conviction
     * @param {CustodyApiDeleteCustodyKeyDateByPrisonBookingNumberUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE(requestParameters: CustodyApiDeleteCustodyKeyDateByPrisonBookingNumberUsingDELETERequest, options?: any) {
        return CustodyApiFp(this.configuration).deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE(requestParameters.prisonBookingNumber, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a all custody key dates for the active custodial conviction
     * @param {CustodyApiGetAllCustodyKeyDateByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public getAllCustodyKeyDateByCrnUsingGET(requestParameters: CustodyApiGetAllCustodyKeyDateByCrnUsingGETRequest, options?: any) {
        return CustodyApiFp(this.configuration).getAllCustodyKeyDateByCrnUsingGET(requestParameters.crn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets all custody key dates for the active custodial conviction
     * @param {CustodyApiGetAllCustodyKeyDateByNomsNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public getAllCustodyKeyDateByNomsNumberUsingGET(requestParameters: CustodyApiGetAllCustodyKeyDateByNomsNumberUsingGETRequest, options?: any) {
        return CustodyApiFp(this.configuration).getAllCustodyKeyDateByNomsNumberUsingGET(requestParameters.nomsNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a all custody key dates for the active custodial conviction
     * @param {CustodyApiGetAllCustodyKeyDateByOffenderIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public getAllCustodyKeyDateByOffenderIdUsingGET(requestParameters: CustodyApiGetAllCustodyKeyDateByOffenderIdUsingGETRequest, options?: any) {
        return CustodyApiFp(this.configuration).getAllCustodyKeyDateByOffenderIdUsingGET(requestParameters.offenderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a all custody key dates for the active custodial conviction
     * @param {CustodyApiGetAllCustodyKeyDateByPrisonBookingNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public getAllCustodyKeyDateByPrisonBookingNumberUsingGET(requestParameters: CustodyApiGetAllCustodyKeyDateByPrisonBookingNumberUsingGETRequest, options?: any) {
        return CustodyApiFp(this.configuration).getAllCustodyKeyDateByPrisonBookingNumberUsingGET(requestParameters.prisonBookingNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the current custody record
     * @param {CustodyApiGetCustodyByBookNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public getCustodyByBookNumberUsingGET(requestParameters: CustodyApiGetCustodyByBookNumberUsingGETRequest, options?: any) {
        return CustodyApiFp(this.configuration).getCustodyByBookNumberUsingGET(requestParameters.bookingNumber, requestParameters.nomsNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the current custody record
     * @param {CustodyApiGetCustodyByConvictionIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public getCustodyByConvictionIdUsingGET(requestParameters: CustodyApiGetCustodyByConvictionIdUsingGETRequest, options?: any) {
        return CustodyApiFp(this.configuration).getCustodyByConvictionIdUsingGET(requestParameters.convictionId, requestParameters.crn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a custody key date for the active custodial conviction
     * @param {CustodyApiGetCustodyKeyDateByCrnUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public getCustodyKeyDateByCrnUsingGET(requestParameters: CustodyApiGetCustodyKeyDateByCrnUsingGETRequest, options?: any) {
        return CustodyApiFp(this.configuration).getCustodyKeyDateByCrnUsingGET(requestParameters.crn, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a custody key date for the active custodial conviction
     * @param {CustodyApiGetCustodyKeyDateByNomsNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public getCustodyKeyDateByNomsNumberUsingGET(requestParameters: CustodyApiGetCustodyKeyDateByNomsNumberUsingGETRequest, options?: any) {
        return CustodyApiFp(this.configuration).getCustodyKeyDateByNomsNumberUsingGET(requestParameters.nomsNumber, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a custody key date for the active custodial conviction
     * @param {CustodyApiGetCustodyKeyDateByOffenderIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public getCustodyKeyDateByOffenderIdUsingGET(requestParameters: CustodyApiGetCustodyKeyDateByOffenderIdUsingGETRequest, options?: any) {
        return CustodyApiFp(this.configuration).getCustodyKeyDateByOffenderIdUsingGET(requestParameters.offenderId, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a custody key date for the related custodial conviction with the matching prison booking
     * @param {CustodyApiGetCustodyKeyDateByPrisonBookingNumberUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public getCustodyKeyDateByPrisonBookingNumberUsingGET(requestParameters: CustodyApiGetCustodyKeyDateByPrisonBookingNumberUsingGETRequest, options?: any) {
        return CustodyApiFp(this.configuration).getCustodyKeyDateByPrisonBookingNumberUsingGET(requestParameters.prisonBookingNumber, requestParameters.typeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Adds or replaces a custody key date for the active custodial conviction
     * @param {CustodyApiPutCustodyKeyDateByCrnUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public putCustodyKeyDateByCrnUsingPUT(requestParameters: CustodyApiPutCustodyKeyDateByCrnUsingPUTRequest, options?: any) {
        return CustodyApiFp(this.configuration).putCustodyKeyDateByCrnUsingPUT(requestParameters.crn, requestParameters.typeCode, requestParameters.custodyKeyDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Adds or replaces a custody key date for the active custodial conviction
     * @param {CustodyApiPutCustodyKeyDateByNomsNumberUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public putCustodyKeyDateByNomsNumberUsingPUT(requestParameters: CustodyApiPutCustodyKeyDateByNomsNumberUsingPUTRequest, options?: any) {
        return CustodyApiFp(this.configuration).putCustodyKeyDateByNomsNumberUsingPUT(requestParameters.nomsNumber, requestParameters.typeCode, requestParameters.custodyKeyDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Adds or replaces a custody key date for the active custodial conviction
     * @param {CustodyApiPutCustodyKeyDateByOffenderIdUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public putCustodyKeyDateByOffenderIdUsingPUT(requestParameters: CustodyApiPutCustodyKeyDateByOffenderIdUsingPUTRequest, options?: any) {
        return CustodyApiFp(this.configuration).putCustodyKeyDateByOffenderIdUsingPUT(requestParameters.offenderId, requestParameters.typeCode, requestParameters.custodyKeyDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Adds or replaces a custody key date for the active custodial conviction
     * @param {CustodyApiPutCustodyKeyDateByPrisonBookingNumberUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public putCustodyKeyDateByPrisonBookingNumberUsingPUT(requestParameters: CustodyApiPutCustodyKeyDateByPrisonBookingNumberUsingPUTRequest, options?: any) {
        return CustodyApiFp(this.configuration).putCustodyKeyDateByPrisonBookingNumberUsingPUT(requestParameters.prisonBookingNumber, requestParameters.typeCode, requestParameters.custodyKeyDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires role ROLE_COMMUNITY_CUSTODY_UPDATE
     * @summary Replaces all key dates specified in body. Key dates are either added or replaced or deleted if absent (see ReplaceCustodyKeyDates for the list). The the custodial conviction must be active
     * @param {CustodyApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST(requestParameters: CustodyApiReplaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOSTRequest, options?: any) {
        return CustodyApiFp(this.configuration).replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST(requestParameters.bookingNumber, requestParameters.nomsNumber, requestParameters.replaceCustodyKeyDates, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * In the very rare circumstances more than one offender is found with matching noms number, all will be updated and their identifiers returned.
     * @summary Updates the offender record(s) with the new NOMS number in UpdateOffenderNomsNumber replacing the existing number.
     * @param {CustodyApiReplaceOffenderNomsNumberUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public replaceOffenderNomsNumberUsingPUT(requestParameters: CustodyApiReplaceOffenderNomsNumberUsingPUTRequest, options?: any) {
        return CustodyApiFp(this.configuration).replaceOffenderNomsNumberUsingPUT(requestParameters.originalNomsNumber, requestParameters.updateOffenderNomsNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates the associated custody record with booking number in UpdateCustodyBookingNumber
     * @param {CustodyApiUpdateCustodyBookingNumberUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public updateCustodyBookingNumberUsingPUT(requestParameters: CustodyApiUpdateCustodyBookingNumberUsingPUTRequest, options?: any) {
        return CustodyApiFp(this.configuration).updateCustodyBookingNumberUsingPUT(requestParameters.nomsNumber, requestParameters.updateCustodyBookingNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates the associated custody record with changes defined in UpdateCustody
     * @param {CustodyApiUpdateCustodyUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public updateCustodyUsingPUT(requestParameters: CustodyApiUpdateCustodyUsingPUTRequest, options?: any) {
        return CustodyApiFp(this.configuration).updateCustodyUsingPUT(requestParameters.bookingNumber, requestParameters.nomsNumber, requestParameters.updateCustody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates the offender record with the NOMS number in UpdateOffenderNomsNumber
     * @param {CustodyApiUpdateOffenderNomsNumberUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodyApi
     */
    public updateOffenderNomsNumberUsingPUT(requestParameters: CustodyApiUpdateOffenderNomsNumberUsingPUTRequest, options?: any) {
        return CustodyApiFp(this.configuration).updateOffenderNomsNumberUsingPUT(requestParameters.crn, requestParameters.updateOffenderNomsNumber, options).then((request) => request(this.axios, this.basePath));
    }
}
