import { RecordOutcomeFixture } from '../../fixtures/record-outcome.fixture'

context('Record outcome happy path & validation', () => {
  before(() => {
    cy.seed()
  })

  it('can record outcome - failed to comply', () => {
    new RecordOutcomeFixture()
      .whenRecordingOutcome()
      .shouldDisplayStep('init', 'Record an outcome', page => {
        page.appointmentDetails.contains('Not a well known appointment with Robert Ohagan')
        page.appointmentDetails.contains('Wednesday 2 September 2020 from 11am to 1pm')
        page.appointmentDetails.find('a').contains('View appointment').click()
      })
      .shouldDisplayAppointmentPage('Not a well known appointment with Robert Ohagan')
      .whenGoingBack()
      .whenSubmittingFirstStep()
      .shouldDisplayCompliancePage('attend and comply?')
      .whenSelectingNonComplianceOption()
      .whenSubmittingCurrentStep()
      .shouldDisplayOutcomePage('How did Liz not comply?')
      .whenSelectingOutcome('Failed to comply')
      .whenSubmittingCurrentStep()
      .shouldDisplayEnforcementPage()
      .whenSubmittingCurrentStep()
      // testing the validation
      .shouldDisplayEnforcementErrors('There is a problem', 'Select an enforcement')
      .whenSelectingEnforcementAction('Refer to Offender Manager')
      .whenSubmittingCurrentStep()
      .shouldDisplayEnforcementPage()
      .whenSubmittingCurrentStep()
      // testing the validation
      .shouldDisplayEnforcementErrors('There is a problem', 'Select an enforcement')
      .whenSelectingEnforcementAction('Refer to Offender Manager')
      .whenSubmittingCurrentStep()
  })
  it('can record outcome - failed to attend', () => {
    new RecordOutcomeFixture()
      .whenRecordingOutcome()
      .whenSubmittingFirstStep()
      .shouldDisplayCompliancePage('Did Liz attend and comply?')
      .whenSelectingComplianceFailedToAttendOutcome()
      .whenSubmittingCurrentStep()
      .shouldDisplayFailedToAttendPage('Was Liz’s absence acceptable?')
      .whenSelectingAbsenceAcceptable('No')
      .whenSubmittingCurrentStep()
      .shouldDisplayOutcomePage('How did Liz not comply?')
      .whenSelectingOutcome('Failed to attend')
      .whenSubmittingCurrentStep()
      .shouldDisplayEnforcementPage()
      .whenSelectingEnforcementAction('Refer to Offender Manager')
      .whenSubmittingCurrentStep()
  })
  it('compliance page validation', () => {
    new RecordOutcomeFixture()
      .whenRecordingOutcome()
      .whenSubmittingFirstStep()
      .shouldDisplayCompliancePage('attend and comply?')
      .whenSubmittingCurrentStep()
      .shouldDisplayComplianceErrors('There is a problem', 'Select one of the compliance options')
  })
  it('failed-to-attend page validation', () => {
    new RecordOutcomeFixture()
      .whenRecordingOutcome()
      .whenSubmittingFirstStep()
      .shouldDisplayCompliancePage('Did Liz attend and comply?')
      .whenSelectingComplianceFailedToAttendOutcome()
      .whenSubmittingCurrentStep()
      .shouldDisplayFailedToAttendPage('Was Liz’s absence acceptable?')
      .whenSubmittingCurrentStep()
      .shouldDisplayFailedToAttendErrors('There is a problem', 'Select one of the absence options')
  })
  it('outcome page validation', () => {
    new RecordOutcomeFixture()
      .whenRecordingOutcome()
      .whenSubmittingFirstStep()
      .shouldDisplayCompliancePage('Did Liz attend and comply?')
      .whenSelectingComplianceFailedToAttendOutcome()
      .whenSubmittingCurrentStep()
      .shouldDisplayFailedToAttendPage('Was Liz’s absence acceptable?')
      .whenSelectingAbsenceAcceptable('Yes')
      .whenSubmittingCurrentStep()
      .shouldDisplayOutcomePage('Why was Liz absent?')
      .whenSubmittingCurrentStep()
      .shouldDisplayOutcomeErrors('There is a problem', 'Select an outcome')
  })
})
